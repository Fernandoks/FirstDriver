
FirstDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000368  08000370  00010370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000368  08000368  00010370  2**0
                  CONTENTS
  4 .ARM          00000000  08000368  08000368  00010370  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000368  08000370  00010370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000368  08000368  00010368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800036c  0800036c  0001036c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000370  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000001c  08000370  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010370  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c10  00000000  00000000  000103a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000002ca  00000000  00000000  00010fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000d0  00000000  00000000  00011280  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a8  00000000  00000000  00011350  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001387  00000000  00000000  000113f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000ae7  00000000  00000000  0001277f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00005c80  00000000  00000000  00013266  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00018ee6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000284  00000000  00000000  00018f64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000350 	.word	0x08000350

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000350 	.word	0x08000350

08000204 <GPIO_WriteToOutputPin>:
 * @Param2:					Pin number
 * @Param3:					Value (SET or RESET)
 * @Return:					None
 * @Note:					-
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value){
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
 8000210:	4613      	mov	r3, r2
 8000212:	70bb      	strb	r3, [r7, #2]

	if (Value == GPIO_PIN_SET){
 8000214:	78bb      	ldrb	r3, [r7, #2]
 8000216:	2b01      	cmp	r3, #1
 8000218:	d109      	bne.n	800022e <GPIO_WriteToOutputPin+0x2a>
		pGPIOx->ODR |= (1 << PinNumber);
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	78fa      	ldrb	r2, [r7, #3]
 8000220:	2101      	movs	r1, #1
 8000222:	fa01 f202 	lsl.w	r2, r1, r2
 8000226:	431a      	orrs	r2, r3
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	615a      	str	r2, [r3, #20]
	}
	else{
		pGPIOx->ODR &= ~(1 << PinNumber);
	}

}
 800022c:	e009      	b.n	8000242 <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->ODR &= ~(1 << PinNumber);
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	695b      	ldr	r3, [r3, #20]
 8000232:	78fa      	ldrb	r2, [r7, #3]
 8000234:	2101      	movs	r1, #1
 8000236:	fa01 f202 	lsl.w	r2, r1, r2
 800023a:	43d2      	mvns	r2, r2
 800023c:	401a      	ands	r2, r3
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	615a      	str	r2, [r3, #20]
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
	...

08000250 <GPIO_IRQHandling>:
 * @Param1:					Pin Number
 * @Return:					None
 * @Note:					-
 ************************************************************************/

void GPIO_IRQHandling(uint8_t PinNumber){
 8000250:	b480      	push	{r7}
 8000252:	b083      	sub	sp, #12
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	71fb      	strb	r3, [r7, #7]
/*
 * Remember to use the correct implementation of the EXTI_IRQHandler
 * those functions are weak defined in Startup file
 */
	if(EXTI->PR & (1 << PinNumber)){
 800025a:	4b0c      	ldr	r3, [pc, #48]	; (800028c <GPIO_IRQHandling+0x3c>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	79fa      	ldrb	r2, [r7, #7]
 8000260:	2101      	movs	r1, #1
 8000262:	fa01 f202 	lsl.w	r2, r1, r2
 8000266:	4013      	ands	r3, r2
 8000268:	2b00      	cmp	r3, #0
 800026a:	d009      	beq.n	8000280 <GPIO_IRQHandling+0x30>
		EXTI->PR |= (1 << PinNumber); // PR register is cleared with setting 1.
 800026c:	4b07      	ldr	r3, [pc, #28]	; (800028c <GPIO_IRQHandling+0x3c>)
 800026e:	695b      	ldr	r3, [r3, #20]
 8000270:	79fa      	ldrb	r2, [r7, #7]
 8000272:	2101      	movs	r1, #1
 8000274:	fa01 f202 	lsl.w	r2, r1, r2
 8000278:	4611      	mov	r1, r2
 800027a:	4a04      	ldr	r2, [pc, #16]	; (800028c <GPIO_IRQHandling+0x3c>)
 800027c:	430b      	orrs	r3, r1
 800027e:	6153      	str	r3, [r2, #20]
	}
}
 8000280:	bf00      	nop
 8000282:	370c      	adds	r7, #12
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	40013c00 	.word	0x40013c00

08000290 <main>:


/*
 * START PROGRAM
 */
int main(){
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0

	while(1){
 8000294:	e7fe      	b.n	8000294 <main+0x4>
	...

08000298 <EXTI15_10_IRQHandler>:


/*
 * EXTI Handler
 */
void EXTI15_10_IRQHandler(void){
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_13);
 800029c:	200d      	movs	r0, #13
 800029e:	f7ff ffd7 	bl	8000250 <GPIO_IRQHandling>

	GPIO_WriteToOutputPin(GPIOA,GPIO_PIN_5,SET);
 80002a2:	2201      	movs	r2, #1
 80002a4:	2105      	movs	r1, #5
 80002a6:	4802      	ldr	r0, [pc, #8]	; (80002b0 <EXTI15_10_IRQHandler+0x18>)
 80002a8:	f7ff ffac 	bl	8000204 <GPIO_WriteToOutputPin>

}
 80002ac:	bf00      	nop
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	40020000 	.word	0x40020000

080002b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b4:	480d      	ldr	r0, [pc, #52]	; (80002ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002b6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b8:	480d      	ldr	r0, [pc, #52]	; (80002f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80002ba:	490e      	ldr	r1, [pc, #56]	; (80002f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002bc:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <LoopForever+0xe>)
  movs r3, #0
 80002be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c0:	e002      	b.n	80002c8 <LoopCopyDataInit>

080002c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c6:	3304      	adds	r3, #4

080002c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002cc:	d3f9      	bcc.n	80002c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ce:	4a0b      	ldr	r2, [pc, #44]	; (80002fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d0:	4c0b      	ldr	r4, [pc, #44]	; (8000300 <LoopForever+0x16>)
  movs r3, #0
 80002d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d4:	e001      	b.n	80002da <LoopFillZerobss>

080002d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d8:	3204      	adds	r2, #4

080002da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002dc:	d3fb      	bcc.n	80002d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002de:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80002e2:	f000 f811 	bl	8000308 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002e6:	f7ff ffd3 	bl	8000290 <main>

080002ea <LoopForever>:

LoopForever:
    b LoopForever
 80002ea:	e7fe      	b.n	80002ea <LoopForever>
  ldr   r0, =_estack
 80002ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f8:	08000370 	.word	0x08000370
  ldr r2, =_sbss
 80002fc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000300:	2000001c 	.word	0x2000001c

08000304 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000304:	e7fe      	b.n	8000304 <ADC_IRQHandler>
	...

08000308 <__libc_init_array>:
 8000308:	b570      	push	{r4, r5, r6, lr}
 800030a:	4e0d      	ldr	r6, [pc, #52]	; (8000340 <__libc_init_array+0x38>)
 800030c:	4c0d      	ldr	r4, [pc, #52]	; (8000344 <__libc_init_array+0x3c>)
 800030e:	1ba4      	subs	r4, r4, r6
 8000310:	10a4      	asrs	r4, r4, #2
 8000312:	2500      	movs	r5, #0
 8000314:	42a5      	cmp	r5, r4
 8000316:	d109      	bne.n	800032c <__libc_init_array+0x24>
 8000318:	4e0b      	ldr	r6, [pc, #44]	; (8000348 <__libc_init_array+0x40>)
 800031a:	4c0c      	ldr	r4, [pc, #48]	; (800034c <__libc_init_array+0x44>)
 800031c:	f000 f818 	bl	8000350 <_init>
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	10a4      	asrs	r4, r4, #2
 8000324:	2500      	movs	r5, #0
 8000326:	42a5      	cmp	r5, r4
 8000328:	d105      	bne.n	8000336 <__libc_init_array+0x2e>
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000330:	4798      	blx	r3
 8000332:	3501      	adds	r5, #1
 8000334:	e7ee      	b.n	8000314 <__libc_init_array+0xc>
 8000336:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800033a:	4798      	blx	r3
 800033c:	3501      	adds	r5, #1
 800033e:	e7f2      	b.n	8000326 <__libc_init_array+0x1e>
 8000340:	08000368 	.word	0x08000368
 8000344:	08000368 	.word	0x08000368
 8000348:	08000368 	.word	0x08000368
 800034c:	0800036c 	.word	0x0800036c

08000350 <_init>:
 8000350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000352:	bf00      	nop
 8000354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000356:	bc08      	pop	{r3}
 8000358:	469e      	mov	lr, r3
 800035a:	4770      	bx	lr

0800035c <_fini>:
 800035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035e:	bf00      	nop
 8000360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000362:	bc08      	pop	{r3}
 8000364:	469e      	mov	lr, r3
 8000366:	4770      	bx	lr
