
FirstDriver-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08003124  08003124  00013124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033bc  080033bc  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080033bc  080033bc  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033bc  080033bc  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033bc  080033bc  000133bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033c0  080033c0  000133c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080033c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000088  0800344c  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  200001f8  0800344c  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f81  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b7e  00000000  00000000  00024039  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002d0  00000000  00000000  00024bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000258  00000000  00000000  00024e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002f2c  00000000  00000000  000250e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002965  00000000  00000000  0002800c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000bfef  00000000  00000000  0002a971  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00036960  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000165c  00000000  00000000  000369dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  00038038  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  0003805c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800310c 	.word	0x0800310c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	0800310c 	.word	0x0800310c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <SysTickInit>:

volatile uint32_t ticks;


void SysTickInit (void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
	//Enable Systick
	uint32_t temp = 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60bb      	str	r3, [r7, #8]
	uint32_t clock = 0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	60fb      	str	r3, [r7, #12]


	temp |= (3ul << 0U); // Enable counter and Exception
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	f043 0303 	orr.w	r3, r3, #3
 80002d4:	60bb      	str	r3, [r7, #8]
	temp |= (1ul << 1U); // 1 for internal clock, 0 for external
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	f043 0302 	orr.w	r3, r3, #2
 80002dc:	60bb      	str	r3, [r7, #8]
	*SYST_CSR |= temp;
 80002de:	4b0f      	ldr	r3, [pc, #60]	; (800031c <SysTickInit+0x5c>)
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	490e      	ldr	r1, [pc, #56]	; (800031c <SysTickInit+0x5c>)
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	4313      	orrs	r3, r2
 80002e8:	600b      	str	r3, [r1, #0]
	/*
	 * Get Clock - Systick receives (SYSClock*AHBPrescaler)/8
	 */


	RCC_RegDef_t* pRCC = RCC;
 80002ea:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <SysTickInit+0x60>)
 80002ec:	607b      	str	r3, [r7, #4]

	if ( (pRCC->CR & (1ul << 0U)) == RESET  )
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f003 0301 	and.w	r3, r3, #1
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SysTickInit+0x3e>
		//HSE
	}
	else
	{
		//clock = ( ((pRCC->CR) & (0xFF << 8U) ) >> 8U ) ; //bit 8 to 15 are HSI cal//HSI
		clock = (16000000/8); //bit 8 to 15 are HSI cal//HSI
 80002fa:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <SysTickInit+0x64>)
 80002fc:	60fb      	str	r3, [r7, #12]
	}

	//set systick counter to interrupt each ms
	*SYST_RVR = ((clock/(1000))-1);
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	4a09      	ldr	r2, [pc, #36]	; (8000328 <SysTickInit+0x68>)
 8000302:	fba2 2303 	umull	r2, r3, r2, r3
 8000306:	099b      	lsrs	r3, r3, #6
 8000308:	4a08      	ldr	r2, [pc, #32]	; (800032c <SysTickInit+0x6c>)
 800030a:	3b01      	subs	r3, #1
 800030c:	6013      	str	r3, [r2, #0]

}
 800030e:	bf00      	nop
 8000310:	3714      	adds	r7, #20
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	e000e010 	.word	0xe000e010
 8000320:	40023800 	.word	0x40023800
 8000324:	001e8480 	.word	0x001e8480
 8000328:	10624dd3 	.word	0x10624dd3
 800032c:	e000e014 	.word	0xe000e014

08000330 <SysTick_Handler>:


void SysTick_Handler (void)
 {
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
   ticks++;
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <SysTick_Handler+0x18>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	3301      	adds	r3, #1
 800033a:	4a03      	ldr	r2, [pc, #12]	; (8000348 <SysTick_Handler+0x18>)
 800033c:	6013      	str	r3, [r2, #0]
 }
 800033e:	bf00      	nop
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	2000015c 	.word	0x2000015c

0800034c <millis>:


inline uint32_t millis (void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
   return ticks;
 8000350:	4b03      	ldr	r3, [pc, #12]	; (8000360 <millis+0x14>)
 8000352:	681b      	ldr	r3, [r3, #0]
}
 8000354:	4618      	mov	r0, r3
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	2000015c 	.word	0x2000015c

08000364 <delay_ms>:




void delay_ms (uint32_t t)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  uint32_t start, end;
  start = millis();
 800036c:	f7ff ffee 	bl	800034c <millis>
 8000370:	60f8      	str	r0, [r7, #12]
  end = start + t;
 8000372:	68fa      	ldr	r2, [r7, #12]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4413      	add	r3, r2
 8000378:	60bb      	str	r3, [r7, #8]
  if (start < end) {
 800037a:	68fa      	ldr	r2, [r7, #12]
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	429a      	cmp	r2, r3
 8000380:	d20d      	bcs.n	800039e <delay_ms+0x3a>
  	while ((millis() >= start) && (millis() < end)) {
 8000382:	bf00      	nop
 8000384:	f7ff ffe2 	bl	800034c <millis>
 8000388:	4602      	mov	r2, r0
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	4293      	cmp	r3, r2
 800038e:	d813      	bhi.n	80003b8 <delay_ms+0x54>
 8000390:	f7ff ffdc 	bl	800034c <millis>
 8000394:	4602      	mov	r2, r0
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	4293      	cmp	r3, r2
 800039a:	d8f3      	bhi.n	8000384 <delay_ms+0x20>
      // do nothing
    };
  }


}
 800039c:	e00c      	b.n	80003b8 <delay_ms+0x54>
    while ((millis() >= start) || (millis() < end)) {
 800039e:	bf00      	nop
 80003a0:	f7ff ffd4 	bl	800034c <millis>
 80003a4:	4602      	mov	r2, r0
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d9f9      	bls.n	80003a0 <delay_ms+0x3c>
 80003ac:	f7ff ffce 	bl	800034c <millis>
 80003b0:	4602      	mov	r2, r0
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d8f3      	bhi.n	80003a0 <delay_ms+0x3c>
}
 80003b8:	bf00      	nop
 80003ba:	3710      	adds	r7, #16
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <GPIO_PeriClockControl>:
 * @Param2:					Enable or Disable macro
 * @Return:					-
 * @Note:					-
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnableDisable){
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	460b      	mov	r3, r1
 80003ca:	70fb      	strb	r3, [r7, #3]

	if (EnableDisable == ENABLE){
 80003cc:	78fb      	ldrb	r3, [r7, #3]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d14c      	bne.n	800046c <GPIO_PeriClockControl+0xac>
		if(pGPIOx == GPIOA){
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a4e      	ldr	r2, [pc, #312]	; (8000510 <GPIO_PeriClockControl+0x150>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d106      	bne.n	80003e8 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80003da:	4b4e      	ldr	r3, [pc, #312]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003de:	4a4d      	ldr	r2, [pc, #308]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}

	}
}
 80003e6:	e08d      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOB){
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a4b      	ldr	r2, [pc, #300]	; (8000518 <GPIO_PeriClockControl+0x158>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d106      	bne.n	80003fe <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003f0:	4b48      	ldr	r3, [pc, #288]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f4:	4a47      	ldr	r2, [pc, #284]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80003f6:	f043 0302 	orr.w	r3, r3, #2
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fc:	e082      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOC){
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a46      	ldr	r2, [pc, #280]	; (800051c <GPIO_PeriClockControl+0x15c>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000406:	4b43      	ldr	r3, [pc, #268]	; (8000514 <GPIO_PeriClockControl+0x154>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040a:	4a42      	ldr	r2, [pc, #264]	; (8000514 <GPIO_PeriClockControl+0x154>)
 800040c:	f043 0304 	orr.w	r3, r3, #4
 8000410:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000412:	e077      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOD){
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a42      	ldr	r2, [pc, #264]	; (8000520 <GPIO_PeriClockControl+0x160>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800041c:	4b3d      	ldr	r3, [pc, #244]	; (8000514 <GPIO_PeriClockControl+0x154>)
 800041e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000420:	4a3c      	ldr	r2, [pc, #240]	; (8000514 <GPIO_PeriClockControl+0x154>)
 8000422:	f043 0308 	orr.w	r3, r3, #8
 8000426:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000428:	e06c      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOE){
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a3d      	ldr	r2, [pc, #244]	; (8000524 <GPIO_PeriClockControl+0x164>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000432:	4b38      	ldr	r3, [pc, #224]	; (8000514 <GPIO_PeriClockControl+0x154>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	4a37      	ldr	r2, [pc, #220]	; (8000514 <GPIO_PeriClockControl+0x154>)
 8000438:	f043 0310 	orr.w	r3, r3, #16
 800043c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043e:	e061      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOF){
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a39      	ldr	r2, [pc, #228]	; (8000528 <GPIO_PeriClockControl+0x168>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000448:	4b32      	ldr	r3, [pc, #200]	; (8000514 <GPIO_PeriClockControl+0x154>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044c:	4a31      	ldr	r2, [pc, #196]	; (8000514 <GPIO_PeriClockControl+0x154>)
 800044e:	f043 0320 	orr.w	r3, r3, #32
 8000452:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000454:	e056      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOH){
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a2d      	ldr	r2, [pc, #180]	; (8000510 <GPIO_PeriClockControl+0x150>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d152      	bne.n	8000504 <GPIO_PeriClockControl+0x144>
			GPIOH_PCLK_EN();
 800045e:	4b2d      	ldr	r3, [pc, #180]	; (8000514 <GPIO_PeriClockControl+0x154>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	4a2c      	ldr	r2, [pc, #176]	; (8000514 <GPIO_PeriClockControl+0x154>)
 8000464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000468:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046a:	e04b      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		if(pGPIOx == GPIOA){
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a28      	ldr	r2, [pc, #160]	; (8000510 <GPIO_PeriClockControl+0x150>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d106      	bne.n	8000482 <GPIO_PeriClockControl+0xc2>
			GPIOA_PCLK_DI();
 8000474:	4b27      	ldr	r3, [pc, #156]	; (8000514 <GPIO_PeriClockControl+0x154>)
 8000476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000478:	4a26      	ldr	r2, [pc, #152]	; (8000514 <GPIO_PeriClockControl+0x154>)
 800047a:	f023 0301 	bic.w	r3, r3, #1
 800047e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000480:	e040      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOB){
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a24      	ldr	r2, [pc, #144]	; (8000518 <GPIO_PeriClockControl+0x158>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d106      	bne.n	8000498 <GPIO_PeriClockControl+0xd8>
			GPIOB_PCLK_DI();
 800048a:	4b22      	ldr	r3, [pc, #136]	; (8000514 <GPIO_PeriClockControl+0x154>)
 800048c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048e:	4a21      	ldr	r2, [pc, #132]	; (8000514 <GPIO_PeriClockControl+0x154>)
 8000490:	f023 0304 	bic.w	r3, r3, #4
 8000494:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000496:	e035      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOC){
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a20      	ldr	r2, [pc, #128]	; (800051c <GPIO_PeriClockControl+0x15c>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d106      	bne.n	80004ae <GPIO_PeriClockControl+0xee>
			GPIOC_PCLK_DI();
 80004a0:	4b1c      	ldr	r3, [pc, #112]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80004a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a4:	4a1b      	ldr	r2, [pc, #108]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80004a6:	f023 0308 	bic.w	r3, r3, #8
 80004aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ac:	e02a      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOD){
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4a1b      	ldr	r2, [pc, #108]	; (8000520 <GPIO_PeriClockControl+0x160>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d106      	bne.n	80004c4 <GPIO_PeriClockControl+0x104>
			GPIOD_PCLK_DI();
 80004b6:	4b17      	ldr	r3, [pc, #92]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80004b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ba:	4a16      	ldr	r2, [pc, #88]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80004bc:	f023 0310 	bic.w	r3, r3, #16
 80004c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c2:	e01f      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOE){
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4a17      	ldr	r2, [pc, #92]	; (8000524 <GPIO_PeriClockControl+0x164>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d106      	bne.n	80004da <GPIO_PeriClockControl+0x11a>
			GPIOE_PCLK_DI();
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80004ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d0:	4a10      	ldr	r2, [pc, #64]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80004d2:	f023 0320 	bic.w	r3, r3, #32
 80004d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d8:	e014      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOF){
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4a12      	ldr	r2, [pc, #72]	; (8000528 <GPIO_PeriClockControl+0x168>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d106      	bne.n	80004f0 <GPIO_PeriClockControl+0x130>
			GPIOF_PCLK_DI();
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80004e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ee:	e009      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOH){
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <GPIO_PeriClockControl+0x150>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d105      	bne.n	8000504 <GPIO_PeriClockControl+0x144>
			GPIOH_PCLK_DI();
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80004fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fc:	4a05      	ldr	r2, [pc, #20]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80004fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000502:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	40020000 	.word	0x40020000
 8000514:	40023800 	.word	0x40023800
 8000518:	40020400 	.word	0x40020400
 800051c:	40020800 	.word	0x40020800
 8000520:	40020c00 	.word	0x40020c00
 8000524:	40021000 	.word	0x40021000
 8000528:	40021400 	.word	0x40021400

0800052c <GPIO_Init>:
 * @Return:					-
 * @Note:					-
 */


void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]

	assert(IS_GPIO_PORT(pGPIOHandle->pGPIOX));
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a98      	ldr	r2, [pc, #608]	; (800079c <GPIO_Init+0x270>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d028      	beq.n	8000590 <GPIO_Init+0x64>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a97      	ldr	r2, [pc, #604]	; (80007a0 <GPIO_Init+0x274>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d023      	beq.n	8000590 <GPIO_Init+0x64>
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a95      	ldr	r2, [pc, #596]	; (80007a4 <GPIO_Init+0x278>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d01e      	beq.n	8000590 <GPIO_Init+0x64>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a94      	ldr	r2, [pc, #592]	; (80007a8 <GPIO_Init+0x27c>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d019      	beq.n	8000590 <GPIO_Init+0x64>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a92      	ldr	r2, [pc, #584]	; (80007ac <GPIO_Init+0x280>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d014      	beq.n	8000590 <GPIO_Init+0x64>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a91      	ldr	r2, [pc, #580]	; (80007b0 <GPIO_Init+0x284>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d00f      	beq.n	8000590 <GPIO_Init+0x64>
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a8f      	ldr	r2, [pc, #572]	; (80007b4 <GPIO_Init+0x288>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d00a      	beq.n	8000590 <GPIO_Init+0x64>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a87      	ldr	r2, [pc, #540]	; (800079c <GPIO_Init+0x270>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d005      	beq.n	8000590 <GPIO_Init+0x64>
 8000584:	4b8c      	ldr	r3, [pc, #560]	; (80007b8 <GPIO_Init+0x28c>)
 8000586:	4a8d      	ldr	r2, [pc, #564]	; (80007bc <GPIO_Init+0x290>)
 8000588:	2162      	movs	r1, #98	; 0x62
 800058a:	488d      	ldr	r0, [pc, #564]	; (80007c0 <GPIO_Init+0x294>)
 800058c:	f001 f98e 	bl	80018ac <__assert_func>
	assert(IS_GPIO_PIN(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d005      	beq.n	80005a4 <GPIO_Init+0x78>
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	0c1b      	lsrs	r3, r3, #16
 800059e:	041b      	lsls	r3, r3, #16
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d005      	beq.n	80005b0 <GPIO_Init+0x84>
 80005a4:	4b87      	ldr	r3, [pc, #540]	; (80007c4 <GPIO_Init+0x298>)
 80005a6:	4a85      	ldr	r2, [pc, #532]	; (80007bc <GPIO_Init+0x290>)
 80005a8:	2163      	movs	r1, #99	; 0x63
 80005aa:	4885      	ldr	r0, [pc, #532]	; (80007c0 <GPIO_Init+0x294>)
 80005ac:	f001 f97e 	bl	80018ac <__assert_func>
	assert(IS_GPIO_MODE(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode));
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	795b      	ldrb	r3, [r3, #5]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d01d      	beq.n	80005f4 <GPIO_Init+0xc8>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	795b      	ldrb	r3, [r3, #5]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d019      	beq.n	80005f4 <GPIO_Init+0xc8>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	795b      	ldrb	r3, [r3, #5]
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	d015      	beq.n	80005f4 <GPIO_Init+0xc8>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	795b      	ldrb	r3, [r3, #5]
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	d011      	beq.n	80005f4 <GPIO_Init+0xc8>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	795b      	ldrb	r3, [r3, #5]
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	d00d      	beq.n	80005f4 <GPIO_Init+0xc8>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	795b      	ldrb	r3, [r3, #5]
 80005dc:	2b05      	cmp	r3, #5
 80005de:	d009      	beq.n	80005f4 <GPIO_Init+0xc8>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	795b      	ldrb	r3, [r3, #5]
 80005e4:	2b06      	cmp	r3, #6
 80005e6:	d005      	beq.n	80005f4 <GPIO_Init+0xc8>
 80005e8:	4b77      	ldr	r3, [pc, #476]	; (80007c8 <GPIO_Init+0x29c>)
 80005ea:	4a74      	ldr	r2, [pc, #464]	; (80007bc <GPIO_Init+0x290>)
 80005ec:	2164      	movs	r1, #100	; 0x64
 80005ee:	4874      	ldr	r0, [pc, #464]	; (80007c0 <GPIO_Init+0x294>)
 80005f0:	f001 f95c 	bl	80018ac <__assert_func>
	assert(IS_GPIO_SPEED(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed));
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	799b      	ldrb	r3, [r3, #6]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d011      	beq.n	8000620 <GPIO_Init+0xf4>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	799b      	ldrb	r3, [r3, #6]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d00d      	beq.n	8000620 <GPIO_Init+0xf4>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	799b      	ldrb	r3, [r3, #6]
 8000608:	2b02      	cmp	r3, #2
 800060a:	d009      	beq.n	8000620 <GPIO_Init+0xf4>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	799b      	ldrb	r3, [r3, #6]
 8000610:	2b03      	cmp	r3, #3
 8000612:	d005      	beq.n	8000620 <GPIO_Init+0xf4>
 8000614:	4b6d      	ldr	r3, [pc, #436]	; (80007cc <GPIO_Init+0x2a0>)
 8000616:	4a69      	ldr	r2, [pc, #420]	; (80007bc <GPIO_Init+0x290>)
 8000618:	2165      	movs	r1, #101	; 0x65
 800061a:	4869      	ldr	r0, [pc, #420]	; (80007c0 <GPIO_Init+0x294>)
 800061c:	f001 f946 	bl	80018ac <__assert_func>
	assert(IS_GPIO_PULL(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl));
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	79db      	ldrb	r3, [r3, #7]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d00d      	beq.n	8000644 <GPIO_Init+0x118>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	79db      	ldrb	r3, [r3, #7]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d009      	beq.n	8000644 <GPIO_Init+0x118>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	79db      	ldrb	r3, [r3, #7]
 8000634:	2b02      	cmp	r3, #2
 8000636:	d005      	beq.n	8000644 <GPIO_Init+0x118>
 8000638:	4b65      	ldr	r3, [pc, #404]	; (80007d0 <GPIO_Init+0x2a4>)
 800063a:	4a60      	ldr	r2, [pc, #384]	; (80007bc <GPIO_Init+0x290>)
 800063c:	2166      	movs	r1, #102	; 0x66
 800063e:	4860      	ldr	r0, [pc, #384]	; (80007c0 <GPIO_Init+0x294>)
 8000640:	f001 f934 	bl	80018ac <__assert_func>

	GPIO_PeriClockControl(pGPIOHandle->pGPIOX, ENABLE);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2101      	movs	r1, #1
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff feb8 	bl	80003c0 <GPIO_PeriClockControl>


	uint32_t temp = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
	//Configure the mode
	//This first line tests if this is a interruption mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	795b      	ldrb	r3, [r3, #5]
 8000658:	2b03      	cmp	r3, #3
 800065a:	d814      	bhi.n	8000686 <GPIO_Init+0x15a>
	{
		temp |= ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode )<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Moder uses 2 bit for each position
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	795b      	ldrb	r3, [r3, #5]
 8000660:	461a      	mov	r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	fa02 f303 	lsl.w	r3, r2, r3
 800066c:	461a      	mov	r2, r3
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	4313      	orrs	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOX->MODER |= temp;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	6819      	ldr	r1, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	430a      	orrs	r2, r1
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	e0cd      	b.n	8000822 <GPIO_Init+0x2f6>
	}
	else
	{
		/* Interrupt Mode*/
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	795b      	ldrb	r3, [r3, #5]
 800068a:	2b05      	cmp	r3, #5
 800068c:	d117      	bne.n	80006be <GPIO_Init+0x192>
		{
			//1.Configure FTSR and clear RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //SET FTSR
 800068e:	4b51      	ldr	r3, [pc, #324]	; (80007d4 <GPIO_Init+0x2a8>)
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	7912      	ldrb	r2, [r2, #4]
 8000696:	4611      	mov	r1, r2
 8000698:	2201      	movs	r2, #1
 800069a:	408a      	lsls	r2, r1
 800069c:	4611      	mov	r1, r2
 800069e:	4a4d      	ldr	r2, [pc, #308]	; (80007d4 <GPIO_Init+0x2a8>)
 80006a0:	430b      	orrs	r3, r1
 80006a2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //RESET RTSR
 80006a4:	4b4b      	ldr	r3, [pc, #300]	; (80007d4 <GPIO_Init+0x2a8>)
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	7912      	ldrb	r2, [r2, #4]
 80006ac:	4611      	mov	r1, r2
 80006ae:	2201      	movs	r2, #1
 80006b0:	408a      	lsls	r2, r1
 80006b2:	43d2      	mvns	r2, r2
 80006b4:	4611      	mov	r1, r2
 80006b6:	4a47      	ldr	r2, [pc, #284]	; (80007d4 <GPIO_Init+0x2a8>)
 80006b8:	400b      	ands	r3, r1
 80006ba:	6093      	str	r3, [r2, #8]
 80006bc:	e035      	b.n	800072a <GPIO_Init+0x1fe>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795b      	ldrb	r3, [r3, #5]
 80006c2:	2b04      	cmp	r3, #4
 80006c4:	d117      	bne.n	80006f6 <GPIO_Init+0x1ca>
		{
			//1.Configure RTSR and clear FTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //SET RTSR
 80006c6:	4b43      	ldr	r3, [pc, #268]	; (80007d4 <GPIO_Init+0x2a8>)
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	7912      	ldrb	r2, [r2, #4]
 80006ce:	4611      	mov	r1, r2
 80006d0:	2201      	movs	r2, #1
 80006d2:	408a      	lsls	r2, r1
 80006d4:	4611      	mov	r1, r2
 80006d6:	4a3f      	ldr	r2, [pc, #252]	; (80007d4 <GPIO_Init+0x2a8>)
 80006d8:	430b      	orrs	r3, r1
 80006da:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //RESET FTSR
 80006dc:	4b3d      	ldr	r3, [pc, #244]	; (80007d4 <GPIO_Init+0x2a8>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	7912      	ldrb	r2, [r2, #4]
 80006e4:	4611      	mov	r1, r2
 80006e6:	2201      	movs	r2, #1
 80006e8:	408a      	lsls	r2, r1
 80006ea:	43d2      	mvns	r2, r2
 80006ec:	4611      	mov	r1, r2
 80006ee:	4a39      	ldr	r2, [pc, #228]	; (80007d4 <GPIO_Init+0x2a8>)
 80006f0:	400b      	ands	r3, r1
 80006f2:	60d3      	str	r3, [r2, #12]
 80006f4:	e019      	b.n	800072a <GPIO_Init+0x1fe>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	795b      	ldrb	r3, [r3, #5]
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	d115      	bne.n	800072a <GPIO_Init+0x1fe>
		{
			//1.configure FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //SET RTSR
 80006fe:	4b35      	ldr	r3, [pc, #212]	; (80007d4 <GPIO_Init+0x2a8>)
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	7912      	ldrb	r2, [r2, #4]
 8000706:	4611      	mov	r1, r2
 8000708:	2201      	movs	r2, #1
 800070a:	408a      	lsls	r2, r1
 800070c:	4611      	mov	r1, r2
 800070e:	4a31      	ldr	r2, [pc, #196]	; (80007d4 <GPIO_Init+0x2a8>)
 8000710:	430b      	orrs	r3, r1
 8000712:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //SET FTSR
 8000714:	4b2f      	ldr	r3, [pc, #188]	; (80007d4 <GPIO_Init+0x2a8>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	7912      	ldrb	r2, [r2, #4]
 800071c:	4611      	mov	r1, r2
 800071e:	2201      	movs	r2, #1
 8000720:	408a      	lsls	r2, r1
 8000722:	4611      	mov	r1, r2
 8000724:	4a2b      	ldr	r2, [pc, #172]	; (80007d4 <GPIO_Init+0x2a8>)
 8000726:	430b      	orrs	r3, r1
 8000728:	60d3      	str	r3, [r2, #12]
		}
		//2. Configure the GPIO port in the SYSCFG_EXTICR
		uint8_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4); //The division by 4 will identify each EXTICR register to use - 4 because each register uses 4 bits
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	791b      	ldrb	r3, [r3, #4]
 800072e:	089b      	lsrs	r3, r3, #2
 8000730:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4); //This will identify the position in the register
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	791b      	ldrb	r3, [r3, #4]
 8000736:	f003 0303 	and.w	r3, r3, #3
 800073a:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_PORT(pGPIOHandle->pGPIOX);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a16      	ldr	r2, [pc, #88]	; (800079c <GPIO_Init+0x270>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d050      	beq.n	80007e8 <GPIO_Init+0x2bc>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <GPIO_Init+0x274>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d049      	beq.n	80007e4 <GPIO_Init+0x2b8>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a13      	ldr	r2, [pc, #76]	; (80007a4 <GPIO_Init+0x278>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d042      	beq.n	80007e0 <GPIO_Init+0x2b4>
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <GPIO_Init+0x27c>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d03b      	beq.n	80007dc <GPIO_Init+0x2b0>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a10      	ldr	r2, [pc, #64]	; (80007ac <GPIO_Init+0x280>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d034      	beq.n	80007d8 <GPIO_Init+0x2ac>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <GPIO_Init+0x284>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d00f      	beq.n	8000798 <GPIO_Init+0x26c>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0d      	ldr	r2, [pc, #52]	; (80007b4 <GPIO_Init+0x288>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d008      	beq.n	8000794 <GPIO_Init+0x268>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a05      	ldr	r2, [pc, #20]	; (800079c <GPIO_Init+0x270>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d101      	bne.n	8000790 <GPIO_Init+0x264>
 800078c:	2307      	movs	r3, #7
 800078e:	e02c      	b.n	80007ea <GPIO_Init+0x2be>
 8000790:	2300      	movs	r3, #0
 8000792:	e02a      	b.n	80007ea <GPIO_Init+0x2be>
 8000794:	2306      	movs	r3, #6
 8000796:	e028      	b.n	80007ea <GPIO_Init+0x2be>
 8000798:	2305      	movs	r3, #5
 800079a:	e026      	b.n	80007ea <GPIO_Init+0x2be>
 800079c:	40020000 	.word	0x40020000
 80007a0:	40020400 	.word	0x40020400
 80007a4:	40020800 	.word	0x40020800
 80007a8:	40020c00 	.word	0x40020c00
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40021400 	.word	0x40021400
 80007b4:	40021800 	.word	0x40021800
 80007b8:	08003124 	.word	0x08003124
 80007bc:	08003260 	.word	0x08003260
 80007c0:	08003148 	.word	0x08003148
 80007c4:	08003174 	.word	0x08003174
 80007c8:	080031ac 	.word	0x080031ac
 80007cc:	080031e4 	.word	0x080031e4
 80007d0:	08003220 	.word	0x08003220
 80007d4:	40013c00 	.word	0x40013c00
 80007d8:	2304      	movs	r3, #4
 80007da:	e006      	b.n	80007ea <GPIO_Init+0x2be>
 80007dc:	2303      	movs	r3, #3
 80007de:	e004      	b.n	80007ea <GPIO_Init+0x2be>
 80007e0:	2302      	movs	r3, #2
 80007e2:	e002      	b.n	80007ea <GPIO_Init+0x2be>
 80007e4:	2301      	movs	r3, #1
 80007e6:	e000      	b.n	80007ea <GPIO_Init+0x2be>
 80007e8:	2300      	movs	r3, #0
 80007ea:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 80007ec:	4b65      	ldr	r3, [pc, #404]	; (8000984 <GPIO_Init+0x458>)
 80007ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f0:	4a64      	ldr	r2, [pc, #400]	; (8000984 <GPIO_Init+0x458>)
 80007f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f6:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = ( portcode << (temp2 * 4));
 80007f8:	7a7a      	ldrb	r2, [r7, #9]
 80007fa:	7abb      	ldrb	r3, [r7, #10]
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	fa02 f103 	lsl.w	r1, r2, r3
 8000802:	4a61      	ldr	r2, [pc, #388]	; (8000988 <GPIO_Init+0x45c>)
 8000804:	7afb      	ldrb	r3, [r7, #11]
 8000806:	3302      	adds	r3, #2
 8000808:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800080c:	4b5f      	ldr	r3, [pc, #380]	; (800098c <GPIO_Init+0x460>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	7912      	ldrb	r2, [r2, #4]
 8000814:	4611      	mov	r1, r2
 8000816:	2201      	movs	r2, #1
 8000818:	408a      	lsls	r2, r1
 800081a:	4611      	mov	r1, r2
 800081c:	4a5b      	ldr	r2, [pc, #364]	; (800098c <GPIO_Init+0x460>)
 800081e:	430b      	orrs	r3, r1
 8000820:	6013      	str	r3, [r2, #0]

	}
	temp = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]

	//Configure speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	799b      	ldrb	r3, [r3, #6]
 800082a:	461a      	mov	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	791b      	ldrb	r3, [r3, #4]
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOX->OSPEEDER &= ~(3ul << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	6899      	ldr	r1, [r3, #8]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	791b      	ldrb	r3, [r3, #4]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	2203      	movs	r2, #3
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43da      	mvns	r2, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	400a      	ands	r2, r1
 8000852:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOX->OSPEEDER |= temp; //setting
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	6899      	ldr	r1, [r3, #8]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	430a      	orrs	r2, r1
 8000862:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]

	//configure PuPd
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	79db      	ldrb	r3, [r3, #7]
 800086c:	461a      	mov	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	791b      	ldrb	r3, [r3, #4]
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOX->PUPDR &= ~(3ul << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	68d9      	ldr	r1, [r3, #12]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	791b      	ldrb	r3, [r3, #4]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	2203      	movs	r2, #3
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	43da      	mvns	r2, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	400a      	ands	r2, r1
 8000894:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOX->PUPDR |= temp;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	68d9      	ldr	r1, [r3, #12]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	430a      	orrs	r2, r1
 80008a4:	60da      	str	r2, [r3, #12]
	temp = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]

	// configure output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType) << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	7a1b      	ldrb	r3, [r3, #8]
 80008ae:	461a      	mov	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	791b      	ldrb	r3, [r3, #4]
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOX->OTYPER  &= ~(1ul << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	6859      	ldr	r1, [r3, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	791b      	ldrb	r3, [r3, #4]
 80008c4:	461a      	mov	r2, r3
 80008c6:	2301      	movs	r3, #1
 80008c8:	4093      	lsls	r3, r2
 80008ca:	43da      	mvns	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	400a      	ands	r2, r1
 80008d2:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOX->OTYPER |= temp;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	6859      	ldr	r1, [r3, #4]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	430a      	orrs	r2, r1
 80008e2:	605a      	str	r2, [r3, #4]
	temp = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]

	//alternate function
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	795b      	ldrb	r3, [r3, #5]
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d145      	bne.n	800097c <GPIO_Init+0x450>
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < GPIO_PIN_8){
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	2b07      	cmp	r3, #7
 80008f6:	d81f      	bhi.n	8000938 <GPIO_Init+0x40c>
			temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7a5b      	ldrb	r3, [r3, #9]
 80008fc:	461a      	mov	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	791b      	ldrb	r3, [r3, #4]
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOX->AFRL &= ~(15ul << ( 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	6a19      	ldr	r1, [r3, #32]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	791b      	ldrb	r3, [r3, #4]
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	220f      	movs	r2, #15
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	43da      	mvns	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	400a      	ands	r2, r1
 8000924:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOX->AFRL |= temp;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	6a19      	ldr	r1, [r3, #32]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	430a      	orrs	r2, r1
 8000934:	621a      	str	r2, [r3, #32]
 8000936:	e01f      	b.n	8000978 <GPIO_Init+0x44c>
		}
		else{
			temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7a5b      	ldrb	r3, [r3, #9]
 800093c:	461a      	mov	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	791b      	ldrb	r3, [r3, #4]
 8000942:	3b08      	subs	r3, #8
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOX->AFRH &= ~(15ul << ( 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	791b      	ldrb	r3, [r3, #4]
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	220f      	movs	r2, #15
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43da      	mvns	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	400a      	ands	r2, r1
 8000966:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOX->AFRH |= temp;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	430a      	orrs	r2, r1
 8000976:	625a      	str	r2, [r3, #36]	; 0x24
		}
		temp = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
	}

}
 800097c:	bf00      	nop
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	40013800 	.word	0x40013800
 800098c:	40013c00 	.word	0x40013c00

08000990 <GPIO_ReadFromInputPin>:
 * @Param1:					GPIOx base address
 * @Param2:					Pin number
 * @Return:					Pin value: SET OR RESET
 * @Note:					-
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	70fb      	strb	r3, [r7, #3]

	uint8_t value = (uint8_t)((pGPIOx->IDR >> PinNumber ) & 0x00000001);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	691a      	ldr	r2, [r3, #16]
 80009a0:	78fb      	ldrb	r3, [r7, #3]
 80009a2:	fa22 f303 	lsr.w	r3, r2, r3
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	f003 0301 	and.w	r3, r3, #1
 80009ac:	73fb      	strb	r3, [r7, #15]
	return value;
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <GPIO_WriteToOutputPin>:
 * @Param2:					Pin number
 * @Param3:					Value (SET or RESET)
 * @Return:					None
 * @Note:					-
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value){
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	460b      	mov	r3, r1
 80009c6:	70fb      	strb	r3, [r7, #3]
 80009c8:	4613      	mov	r3, r2
 80009ca:	70bb      	strb	r3, [r7, #2]

	if (Value == GPIO_PIN_SET){
 80009cc:	78bb      	ldrb	r3, [r7, #2]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d109      	bne.n	80009e6 <GPIO_WriteToOutputPin+0x2a>
		pGPIOx->BSSR |= (1 << PinNumber);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	78fa      	ldrb	r2, [r7, #3]
 80009d8:	2101      	movs	r1, #1
 80009da:	fa01 f202 	lsl.w	r2, r1, r2
 80009de:	431a      	orrs	r2, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	619a      	str	r2, [r3, #24]
	}
	else{
		pGPIOx->BSSR |= (1 << (PinNumber + 0x10));
	}

}
 80009e4:	e009      	b.n	80009fa <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->BSSR |= (1 << (PinNumber + 0x10));
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	78fa      	ldrb	r2, [r7, #3]
 80009ec:	3210      	adds	r2, #16
 80009ee:	2101      	movs	r1, #1
 80009f0:	fa01 f202 	lsl.w	r2, r1, r2
 80009f4:	431a      	orrs	r2, r3
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	619a      	str	r2, [r3, #24]
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <GPIO_ToggleOutputPin>:
 * @Param1:					GPIOx base address
 * @Param2:					Pin number
 * @Return:					None
 * @Note:					-
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	70fb      	strb	r3, [r7, #3]

	if (GPIO_ReadFromInputPin(pGPIOx, PinNumber) == SET )
 8000a12:	78fb      	ldrb	r3, [r7, #3]
 8000a14:	4619      	mov	r1, r3
 8000a16:	6878      	ldr	r0, [r7, #4]
 8000a18:	f7ff ffba 	bl	8000990 <GPIO_ReadFromInputPin>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d106      	bne.n	8000a30 <GPIO_ToggleOutputPin+0x2a>
	{
		GPIO_WriteToOutputPin(pGPIOx,PinNumber,GPIO_PIN_RESET);
 8000a22:	78fb      	ldrb	r3, [r7, #3]
 8000a24:	2200      	movs	r2, #0
 8000a26:	4619      	mov	r1, r3
 8000a28:	6878      	ldr	r0, [r7, #4]
 8000a2a:	f7ff ffc7 	bl	80009bc <GPIO_WriteToOutputPin>
	else
	{
		GPIO_WriteToOutputPin(pGPIOx,PinNumber,GPIO_PIN_SET);
	}

}
 8000a2e:	e005      	b.n	8000a3c <GPIO_ToggleOutputPin+0x36>
		GPIO_WriteToOutputPin(pGPIOx,PinNumber,GPIO_PIN_SET);
 8000a30:	78fb      	ldrb	r3, [r7, #3]
 8000a32:	2201      	movs	r2, #1
 8000a34:	4619      	mov	r1, r3
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff ffc0 	bl	80009bc <GPIO_WriteToOutputPin>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <GPIO_IRQInterruptConfig>:
 * @Param2:					IRQ priority
 * @Param3:					Enable or Disable
 * @Return:					None
 * @Note:					-
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnableDisable){
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	460a      	mov	r2, r1
 8000a4e:	71fb      	strb	r3, [r7, #7]
 8000a50:	4613      	mov	r3, r2
 8000a52:	71bb      	strb	r3, [r7, #6]

	if (EnableDisable == ENABLE)
 8000a54:	79bb      	ldrb	r3, [r7, #6]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d133      	bne.n	8000ac2 <GPIO_IRQInterruptConfig+0x7e>
	{
		if (IRQNumber < 32){
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b1f      	cmp	r3, #31
 8000a5e:	d80a      	bhi.n	8000a76 <GPIO_IRQInterruptConfig+0x32>
			//NVIC_ISER0
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000a60:	4b36      	ldr	r3, [pc, #216]	; (8000b3c <GPIO_IRQInterruptConfig+0xf8>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	79fa      	ldrb	r2, [r7, #7]
 8000a66:	2101      	movs	r1, #1
 8000a68:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6c:	4611      	mov	r1, r2
 8000a6e:	4a33      	ldr	r2, [pc, #204]	; (8000b3c <GPIO_IRQInterruptConfig+0xf8>)
 8000a70:	430b      	orrs	r3, r1
 8000a72:	6013      	str	r3, [r2, #0]
		else if (IRQNumber >= 64 && IRQNumber < 96){
			//NVIC_ICER2
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 8000a74:	e05c      	b.n	8000b30 <GPIO_IRQInterruptConfig+0xec>
		else if( IRQNumber >= 32 && IRQNumber < 64){
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	2b1f      	cmp	r3, #31
 8000a7a:	d90f      	bls.n	8000a9c <GPIO_IRQInterruptConfig+0x58>
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
 8000a7e:	2b3f      	cmp	r3, #63	; 0x3f
 8000a80:	d80c      	bhi.n	8000a9c <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000a82:	4b2f      	ldr	r3, [pc, #188]	; (8000b40 <GPIO_IRQInterruptConfig+0xfc>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	79fa      	ldrb	r2, [r7, #7]
 8000a88:	f002 021f 	and.w	r2, r2, #31
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a92:	4611      	mov	r1, r2
 8000a94:	4a2a      	ldr	r2, [pc, #168]	; (8000b40 <GPIO_IRQInterruptConfig+0xfc>)
 8000a96:	430b      	orrs	r3, r1
 8000a98:	6013      	str	r3, [r2, #0]
 8000a9a:	e049      	b.n	8000b30 <GPIO_IRQInterruptConfig+0xec>
		else if (IRQNumber >= 64 && IRQNumber < 96){
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	2b3f      	cmp	r3, #63	; 0x3f
 8000aa0:	d946      	bls.n	8000b30 <GPIO_IRQInterruptConfig+0xec>
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2b5f      	cmp	r3, #95	; 0x5f
 8000aa6:	d843      	bhi.n	8000b30 <GPIO_IRQInterruptConfig+0xec>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000aa8:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <GPIO_IRQInterruptConfig+0x100>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	79fa      	ldrb	r2, [r7, #7]
 8000aae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ab8:	4611      	mov	r1, r2
 8000aba:	4a22      	ldr	r2, [pc, #136]	; (8000b44 <GPIO_IRQInterruptConfig+0x100>)
 8000abc:	430b      	orrs	r3, r1
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	e036      	b.n	8000b30 <GPIO_IRQInterruptConfig+0xec>
	else if (EnableDisable == DISABLE){
 8000ac2:	79bb      	ldrb	r3, [r7, #6]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d133      	bne.n	8000b30 <GPIO_IRQInterruptConfig+0xec>
		if (IRQNumber < 32){
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	2b1f      	cmp	r3, #31
 8000acc:	d80a      	bhi.n	8000ae4 <GPIO_IRQInterruptConfig+0xa0>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000ace:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <GPIO_IRQInterruptConfig+0x104>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	79fa      	ldrb	r2, [r7, #7]
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ada:	4611      	mov	r1, r2
 8000adc:	4a1a      	ldr	r2, [pc, #104]	; (8000b48 <GPIO_IRQInterruptConfig+0x104>)
 8000ade:	430b      	orrs	r3, r1
 8000ae0:	6013      	str	r3, [r2, #0]
}
 8000ae2:	e025      	b.n	8000b30 <GPIO_IRQInterruptConfig+0xec>
		else if( IRQNumber >= 32 && IRQNumber < 64){
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	2b1f      	cmp	r3, #31
 8000ae8:	d90f      	bls.n	8000b0a <GPIO_IRQInterruptConfig+0xc6>
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	2b3f      	cmp	r3, #63	; 0x3f
 8000aee:	d80c      	bhi.n	8000b0a <GPIO_IRQInterruptConfig+0xc6>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <GPIO_IRQInterruptConfig+0x108>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	79fa      	ldrb	r2, [r7, #7]
 8000af6:	f002 021f 	and.w	r2, r2, #31
 8000afa:	2101      	movs	r1, #1
 8000afc:	fa01 f202 	lsl.w	r2, r1, r2
 8000b00:	4611      	mov	r1, r2
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <GPIO_IRQInterruptConfig+0x108>)
 8000b04:	430b      	orrs	r3, r1
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	e012      	b.n	8000b30 <GPIO_IRQInterruptConfig+0xec>
		else if (IRQNumber >= 64 && IRQNumber < 96){
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	2b3f      	cmp	r3, #63	; 0x3f
 8000b0e:	d90f      	bls.n	8000b30 <GPIO_IRQInterruptConfig+0xec>
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	2b5f      	cmp	r3, #95	; 0x5f
 8000b14:	d80c      	bhi.n	8000b30 <GPIO_IRQInterruptConfig+0xec>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <GPIO_IRQInterruptConfig+0x10c>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	79fa      	ldrb	r2, [r7, #7]
 8000b1c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b20:	2101      	movs	r1, #1
 8000b22:	fa01 f202 	lsl.w	r2, r1, r2
 8000b26:	4611      	mov	r1, r2
 8000b28:	4a09      	ldr	r2, [pc, #36]	; (8000b50 <GPIO_IRQInterruptConfig+0x10c>)
 8000b2a:	430b      	orrs	r3, r1
 8000b2c:	6013      	str	r3, [r2, #0]
}
 8000b2e:	e7ff      	b.n	8000b30 <GPIO_IRQInterruptConfig+0xec>
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000e104 	.word	0xe000e104
 8000b44:	e000e108 	.word	0xe000e108
 8000b48:	e000e180 	.word	0xe000e180
 8000b4c:	e000e184 	.word	0xe000e184
 8000b50:	e000e188 	.word	0xe000e188

08000b54 <GPIO_IRQPriorityConfig>:
	 *	each register is divided by 8 bits each IRQnumbers
	 *	To find which IPR register, divide by 4 (3 IRQ in each register)
 ************************************************************************/


void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority){
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	71fb      	strb	r3, [r7, #7]
 8000b60:	4613      	mov	r3, r2
 8000b62:	71bb      	strb	r3, [r7, #6]
		//Here we find the IPR register that needs to be configured
		uint8_t iprx = IRQNumber / 4;
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	089b      	lsrs	r3, r3, #2
 8000b68:	73fb      	strb	r3, [r7, #15]
		//because each register is divided in 4 different IRQ, we use the MOD 4
		uint8_t iprx_section = IRQNumber % 4;
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	f003 0303 	and.w	r3, r3, #3
 8000b70:	73bb      	strb	r3, [r7, #14]
		/*Each register is 32 bits so we multiply the register number by 4
		 * Notice the 4 lower bits are inaccessible, so we need to shift by 4
		 * to configure the 4 higher bits
		 */
		uint8_t shift_IRQ = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000b72:	7bbb      	ldrb	r3, [r7, #14]
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	3304      	adds	r3, #4
 8000b7a:	737b      	strb	r3, [r7, #13]
		*(NVIC_PR_BASEADDRESS + (iprx * 4)) = (IRQPriority << shift_IRQ);
 8000b7c:	79ba      	ldrb	r2, [r7, #6]
 8000b7e:	7b7b      	ldrb	r3, [r7, #13]
 8000b80:	409a      	lsls	r2, r3
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	011b      	lsls	r3, r3, #4
 8000b86:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000b8a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000b8e:	601a      	str	r2, [r3, #0]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <GPIO_Clear_Interrupt>:
 * @Return:					None
 * @Note:					-
 ************************************************************************/


void GPIO_Clear_Interrupt(uint8_t PinNumber){
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	71fb      	strb	r3, [r7, #7]
/*
 * Remember to use the correct implementation of the EXTI_IRQHandler
 * those functions are weak defined in Startup file
 */
	if( (EXTI->PR & (1 << PinNumber)) != 0){
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <GPIO_Clear_Interrupt+0x3c>)
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	79fa      	ldrb	r2, [r7, #7]
 8000bac:	2101      	movs	r1, #1
 8000bae:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d009      	beq.n	8000bcc <GPIO_Clear_Interrupt+0x30>
		EXTI->PR |= (1 << PinNumber); // PR register is cleared with setting 1.
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <GPIO_Clear_Interrupt+0x3c>)
 8000bba:	695b      	ldr	r3, [r3, #20]
 8000bbc:	79fa      	ldrb	r2, [r7, #7]
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc4:	4611      	mov	r1, r2
 8000bc6:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <GPIO_Clear_Interrupt+0x3c>)
 8000bc8:	430b      	orrs	r3, r1
 8000bca:	6153      	str	r3, [r2, #20]
	}
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	40013c00 	.word	0x40013c00

08000bdc <RCC_GetPCLK1>:
	HSE = 1,
	PLL = 2
} clocksource_t;

uint32_t RCC_GetPCLK1(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
	uint32_t pclk1 = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
	uint32_t ahbp = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
	uint32_t apb1p = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
	/*
	 * SYSTEM CLOCK
	 */
	clocksource_t clksource = ( (RCC->CFGR >> 2) & 0x3); //get RCC SW
 8000bee:	4b23      	ldr	r3, [pc, #140]	; (8000c7c <RCC_GetPCLK1+0xa0>)
 8000bf0:	689b      	ldr	r3, [r3, #8]
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	f003 0303 	and.w	r3, r3, #3
 8000bfa:	72fb      	strb	r3, [r7, #11]

	if (clksource == HSI)
 8000bfc:	7afb      	ldrb	r3, [r7, #11]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d102      	bne.n	8000c08 <RCC_GetPCLK1+0x2c>
	{
		pclk1 = 16000000;
 8000c02:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <RCC_GetPCLK1+0xa4>)
 8000c04:	617b      	str	r3, [r7, #20]
 8000c06:	e008      	b.n	8000c1a <RCC_GetPCLK1+0x3e>
	}
	else if (clksource == HSE)
 8000c08:	7afb      	ldrb	r3, [r7, #11]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d102      	bne.n	8000c14 <RCC_GetPCLK1+0x38>
	{
		pclk1 = EXTERNALCRISTAL;
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <RCC_GetPCLK1+0xa8>)
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	e002      	b.n	8000c1a <RCC_GetPCLK1+0x3e>
	}
	else
	{
		pclk1 = RCC_GetPLLOutputClock();
 8000c14:	f000 f896 	bl	8000d44 <RCC_GetPLLOutputClock>
 8000c18:	6178      	str	r0, [r7, #20]
	}

	/*
	 * AHB Prescaller
	 */
	uint32_t temp = (( RCC->CFGR >> 4) & 0xF);
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <RCC_GetPCLK1+0xa0>)
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	091b      	lsrs	r3, r3, #4
 8000c20:	f003 030f 	and.w	r3, r3, #15
 8000c24:	607b      	str	r3, [r7, #4]
	if (temp < 8)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b07      	cmp	r3, #7
 8000c2a:	d802      	bhi.n	8000c32 <RCC_GetPCLK1+0x56>
	{
		ahbp = 1;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	e005      	b.n	8000c3e <RCC_GetPCLK1+0x62>
	}
	else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	3b08      	subs	r3, #8
 8000c36:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <RCC_GetPCLK1+0xac>)
 8000c38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c3c:	613b      	str	r3, [r7, #16]
	}

	/*
	 * APB1 Prescaller
	 */
	temp = (( RCC->CFGR >> 10) & 0x7);
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <RCC_GetPCLK1+0xa0>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	0a9b      	lsrs	r3, r3, #10
 8000c44:	f003 0307 	and.w	r3, r3, #7
 8000c48:	607b      	str	r3, [r7, #4]
	if (temp < 4)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d802      	bhi.n	8000c56 <RCC_GetPCLK1+0x7a>
	{
		apb1p = 1;
 8000c50:	2301      	movs	r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	e004      	b.n	8000c60 <RCC_GetPCLK1+0x84>
	}
	else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	3b04      	subs	r3, #4
 8000c5a:	4a0c      	ldr	r2, [pc, #48]	; (8000c8c <RCC_GetPCLK1+0xb0>)
 8000c5c:	5cd3      	ldrb	r3, [r2, r3]
 8000c5e:	60fb      	str	r3, [r7, #12]
	}


	pclk1 =  (pclk1 / ahbp) /apb1p;
 8000c60:	697a      	ldr	r2, [r7, #20]
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	617b      	str	r3, [r7, #20]

	return pclk1;
 8000c70:	697b      	ldr	r3, [r7, #20]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3718      	adds	r7, #24
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800
 8000c80:	00f42400 	.word	0x00f42400
 8000c84:	007a1200 	.word	0x007a1200
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	20000010 	.word	0x20000010

08000c90 <RCC_GetPCLK2>:
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK2(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b086      	sub	sp, #24
 8000c94:	af00      	add	r7, sp, #0
	uint32_t pclk2 = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
	uint32_t ahbp = 0;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
	uint32_t apb2p = 0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
	/*
	 * SYSTEM CLOCK
	 */
	clocksource_t clksource = ( (RCC->CFGR >> 2) & 0x3); //get RCC SW
 8000ca2:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <RCC_GetPCLK2+0xa0>)
 8000ca4:	689b      	ldr	r3, [r3, #8]
 8000ca6:	089b      	lsrs	r3, r3, #2
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	f003 0303 	and.w	r3, r3, #3
 8000cae:	72fb      	strb	r3, [r7, #11]

	if (clksource == HSI)
 8000cb0:	7afb      	ldrb	r3, [r7, #11]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d102      	bne.n	8000cbc <RCC_GetPCLK2+0x2c>
	{
		pclk2 = 16000000;
 8000cb6:	4b1f      	ldr	r3, [pc, #124]	; (8000d34 <RCC_GetPCLK2+0xa4>)
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	e008      	b.n	8000cce <RCC_GetPCLK2+0x3e>
	}
	else if (clksource == HSE)
 8000cbc:	7afb      	ldrb	r3, [r7, #11]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d102      	bne.n	8000cc8 <RCC_GetPCLK2+0x38>
	{
		pclk2 = EXTERNALCRISTAL;
 8000cc2:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <RCC_GetPCLK2+0xa8>)
 8000cc4:	617b      	str	r3, [r7, #20]
 8000cc6:	e002      	b.n	8000cce <RCC_GetPCLK2+0x3e>
	}
	else
	{
		pclk2 = RCC_GetPLLOutputClock();
 8000cc8:	f000 f83c 	bl	8000d44 <RCC_GetPLLOutputClock>
 8000ccc:	6178      	str	r0, [r7, #20]
	}

	/*
	 * AHB Prescaller
	 */
	uint32_t temp = (( RCC->CFGR >> 4) & 0xF);
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <RCC_GetPCLK2+0xa0>)
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	091b      	lsrs	r3, r3, #4
 8000cd4:	f003 030f 	and.w	r3, r3, #15
 8000cd8:	607b      	str	r3, [r7, #4]
	if (temp < 8)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2b07      	cmp	r3, #7
 8000cde:	d802      	bhi.n	8000ce6 <RCC_GetPCLK2+0x56>
	{
		ahbp = 1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	e005      	b.n	8000cf2 <RCC_GetPCLK2+0x62>
	}
	else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3b08      	subs	r3, #8
 8000cea:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <RCC_GetPCLK2+0xac>)
 8000cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cf0:	613b      	str	r3, [r7, #16]
	}

	/*
	 * APB2 Prescaller
	 */
	temp = (( RCC->CFGR >> 13) & 0x7);
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	; (8000d30 <RCC_GetPCLK2+0xa0>)
 8000cf4:	689b      	ldr	r3, [r3, #8]
 8000cf6:	0b5b      	lsrs	r3, r3, #13
 8000cf8:	f003 0307 	and.w	r3, r3, #7
 8000cfc:	607b      	str	r3, [r7, #4]
	if (temp < 4)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	d802      	bhi.n	8000d0a <RCC_GetPCLK2+0x7a>
	{
		apb2p = 1;
 8000d04:	2301      	movs	r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	e004      	b.n	8000d14 <RCC_GetPCLK2+0x84>
	}
	else
	{
		apb2p = APB1_PreScaler[temp-4];
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	3b04      	subs	r3, #4
 8000d0e:	4a0c      	ldr	r2, [pc, #48]	; (8000d40 <RCC_GetPCLK2+0xb0>)
 8000d10:	5cd3      	ldrb	r3, [r2, r3]
 8000d12:	60fb      	str	r3, [r7, #12]
	}


	pclk2 =  (pclk2 / ahbp) /apb2p;
 8000d14:	697a      	ldr	r2, [r7, #20]
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d22:	617b      	str	r3, [r7, #20]

	return pclk2;
 8000d24:	697b      	ldr	r3, [r7, #20]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800
 8000d34:	00f42400 	.word	0x00f42400
 8000d38:	007a1200 	.word	0x007a1200
 8000d3c:	20000000 	.word	0x20000000
 8000d40:	20000010 	.word	0x20000010

08000d44 <RCC_GetPLLOutputClock>:



uint32_t  RCC_GetPLLOutputClock()
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

	//TODO: Implement
	return 0;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <SPI_PeripheralControl>:
* @see SPI_PeripheralControl

*******************************************************************************/

void SPI_PeripheralControl(SPI_RegDef_t *pSPIRegDef, uint8_t EnableDisable)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	70fb      	strb	r3, [r7, #3]
	if (EnableDisable == ENABLE)
 8000d60:	78fb      	ldrb	r3, [r7, #3]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d106      	bne.n	8000d74 <SPI_PeripheralControl+0x20>
	{
		pSPIRegDef->CR1 |= (1 << SPI_CR1_SPE);
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	601a      	str	r2, [r3, #0]
	else
	{
		pSPIRegDef->CR1 &= ~(1 << SPI_CR1_SPE);
	}

}
 8000d72:	e005      	b.n	8000d80 <SPI_PeripheralControl+0x2c>
		pSPIRegDef->CR1 &= ~(1 << SPI_CR1_SPE);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	601a      	str	r2, [r3, #0]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <SPI_GetFlagStatus>:

/*
 * FLAG Status
 */
FLAG_Status_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]

	if (pSPIx->SR & FlagName)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	689a      	ldr	r2, [r3, #8]
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e000      	b.n	8000da8 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000da6:	2300      	movs	r3, #0
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	370c      	adds	r7, #12
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <SPI_SendData>:
/*
 * Data send and Receive - Blocking mode
 */

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTXBuffer, uint32_t Lenght)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
	while (Lenght > 0)
 8000dc0:	e014      	b.n	8000dec <SPI_SendData+0x38>
	{
		//while( !( pSPIx->SR & (1 << SPI_SR_TXE) ) )  //This tests if the bit position is set
		while( SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET );
 8000dc2:	bf00      	nop
 8000dc4:	2102      	movs	r1, #2
 8000dc6:	68f8      	ldr	r0, [r7, #12]
 8000dc8:	f7ff ffe0 	bl	8000d8c <SPI_GetFlagStatus>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0f8      	beq.n	8000dc4 <SPI_SendData+0x10>

		//Verify the Frame format (8bits or 16 bits) using the CR1_DFF
		if ( (pSPIx->CR1 & (1 << SPI_CR1_DFF) ) == 1)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681b      	ldr	r3, [r3, #0]

		}
		else
		{
			//8bits
			pSPIx->DR = *(pTXBuffer);
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	60da      	str	r2, [r3, #12]
			pTXBuffer++;
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	3301      	adds	r3, #1
 8000de4:	60bb      	str	r3, [r7, #8]
		}
		Lenght--;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3b01      	subs	r3, #1
 8000dea:	607b      	str	r3, [r7, #4]
	while (Lenght > 0)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1e7      	bne.n	8000dc2 <SPI_SendData+0xe>
	}

}
 8000df2:	bf00      	nop
 8000df4:	3710      	adds	r7, #16
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <SPI_ReceiveData>:

/*
 * Receive data from SPI- Blocking mode
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRXBuffer, uint32_t Lenght)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b084      	sub	sp, #16
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	60f8      	str	r0, [r7, #12]
 8000e02:	60b9      	str	r1, [r7, #8]
 8000e04:	607a      	str	r2, [r7, #4]
	while (Lenght > 0)
 8000e06:	e014      	b.n	8000e32 <SPI_ReceiveData+0x38>
	{
		//while( !( pSPIx->SR & (1 << SPI_SR_TXE) ) )  //This tests if the bit position is set
		while( SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET );
 8000e08:	bf00      	nop
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	68f8      	ldr	r0, [r7, #12]
 8000e0e:	f7ff ffbd 	bl	8000d8c <SPI_GetFlagStatus>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d0f8      	beq.n	8000e0a <SPI_ReceiveData+0x10>

		//Verify the Frame format (8bits or 16 bits) using the CR1_DFF
		if ( (pSPIx->CR1 & (1 << SPI_CR1_DFF) ) == 1)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	681b      	ldr	r3, [r3, #0]

		}
		else
		{
			//8bits
			*((uint16_t*)pRXBuffer) = pSPIx->DR;
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	801a      	strh	r2, [r3, #0]
			pRXBuffer++;
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	60bb      	str	r3, [r7, #8]
		}
		Lenght--;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	607b      	str	r3, [r7, #4]
	while (Lenght > 0)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d1e7      	bne.n	8000e08 <SPI_ReceiveData+0xe>
	}

}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <UART_PeriClockControl>:

/*
 * Peripheral clock
 */
Status_t UART_PeriClockControl(UART_RegDef_t *pUARTx, uint8_t EnableDisable)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	70fb      	strb	r3, [r7, #3]
	if (EnableDisable == ENABLE)
 8000e4c:	78fb      	ldrb	r3, [r7, #3]
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d145      	bne.n	8000ede <UART_PeriClockControl+0x9e>
		{
			if (pUARTx == UART1)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4a4a      	ldr	r2, [pc, #296]	; (8000f80 <UART_PeriClockControl+0x140>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d106      	bne.n	8000e68 <UART_PeriClockControl+0x28>
			{
				UART1_PCLK_EN();
 8000e5a:	4b4a      	ldr	r3, [pc, #296]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5e:	4a49      	ldr	r2, [pc, #292]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000e60:	f043 0310 	orr.w	r3, r3, #16
 8000e64:	6453      	str	r3, [r2, #68]	; 0x44
 8000e66:	e038      	b.n	8000eda <UART_PeriClockControl+0x9a>
			}
			else if(pUARTx == UART2)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a47      	ldr	r2, [pc, #284]	; (8000f88 <UART_PeriClockControl+0x148>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d106      	bne.n	8000e7e <UART_PeriClockControl+0x3e>
			{
				UART2_PCLK_EN();
 8000e70:	4b44      	ldr	r3, [pc, #272]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e74:	4a43      	ldr	r2, [pc, #268]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000e76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7c:	e02d      	b.n	8000eda <UART_PeriClockControl+0x9a>
			}
			else if(pUARTx == UART3)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a42      	ldr	r2, [pc, #264]	; (8000f8c <UART_PeriClockControl+0x14c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d106      	bne.n	8000e94 <UART_PeriClockControl+0x54>
			{
				UART3_PCLK_EN();
 8000e86:	4b3f      	ldr	r3, [pc, #252]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	4a3e      	ldr	r2, [pc, #248]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e90:	6413      	str	r3, [r2, #64]	; 0x40
 8000e92:	e022      	b.n	8000eda <UART_PeriClockControl+0x9a>
			}
			else if(pUARTx == UART4)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4a3e      	ldr	r2, [pc, #248]	; (8000f90 <UART_PeriClockControl+0x150>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d106      	bne.n	8000eaa <UART_PeriClockControl+0x6a>
			{
				UART4_PCLK_EN();
 8000e9c:	4b39      	ldr	r3, [pc, #228]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	4a38      	ldr	r2, [pc, #224]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000ea2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea8:	e017      	b.n	8000eda <UART_PeriClockControl+0x9a>
			}
			else if(pUARTx == UART5)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a39      	ldr	r2, [pc, #228]	; (8000f94 <UART_PeriClockControl+0x154>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d106      	bne.n	8000ec0 <UART_PeriClockControl+0x80>
			{
				UART5_PCLK_EN();
 8000eb2:	4b34      	ldr	r3, [pc, #208]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	4a33      	ldr	r2, [pc, #204]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000eb8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebe:	e00c      	b.n	8000eda <UART_PeriClockControl+0x9a>
			}
			else if(pUARTx == UART6)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4a35      	ldr	r2, [pc, #212]	; (8000f98 <UART_PeriClockControl+0x158>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	d106      	bne.n	8000ed6 <UART_PeriClockControl+0x96>
			{
				UART6_PCLK_EN();
 8000ec8:	4b2e      	ldr	r3, [pc, #184]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ecc:	4a2d      	ldr	r2, [pc, #180]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000ece:	f043 0320 	orr.w	r3, r3, #32
 8000ed2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ed4:	e001      	b.n	8000eda <UART_PeriClockControl+0x9a>
			}
			else
			{
				return STATUS_ERROR;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e04b      	b.n	8000f72 <UART_PeriClockControl+0x132>
			}
			return STATUS_OK;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e049      	b.n	8000f72 <UART_PeriClockControl+0x132>
		}
	else if (EnableDisable == DISABLE)
 8000ede:	78fb      	ldrb	r3, [r7, #3]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d145      	bne.n	8000f70 <UART_PeriClockControl+0x130>
	{
		if (pUARTx == UART1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a26      	ldr	r2, [pc, #152]	; (8000f80 <UART_PeriClockControl+0x140>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d106      	bne.n	8000efa <UART_PeriClockControl+0xba>
		{
			UART1_PCLK_DI();
 8000eec:	4b25      	ldr	r3, [pc, #148]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef0:	4a24      	ldr	r2, [pc, #144]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000ef2:	f023 0310 	bic.w	r3, r3, #16
 8000ef6:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef8:	e038      	b.n	8000f6c <UART_PeriClockControl+0x12c>
		}
		else if(pUARTx == UART2)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a22      	ldr	r2, [pc, #136]	; (8000f88 <UART_PeriClockControl+0x148>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d106      	bne.n	8000f10 <UART_PeriClockControl+0xd0>
		{
			UART2_PCLK_DI();
 8000f02:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a1f      	ldr	r2, [pc, #124]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000f08:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0e:	e02d      	b.n	8000f6c <UART_PeriClockControl+0x12c>
		}
		else if(pUARTx == UART3)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a1e      	ldr	r2, [pc, #120]	; (8000f8c <UART_PeriClockControl+0x14c>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d106      	bne.n	8000f26 <UART_PeriClockControl+0xe6>
		{
			UART3_PCLK_DI();
 8000f18:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	4a19      	ldr	r2, [pc, #100]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f22:	6413      	str	r3, [r2, #64]	; 0x40
 8000f24:	e022      	b.n	8000f6c <UART_PeriClockControl+0x12c>
		}
		else if(pUARTx == UART4)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a19      	ldr	r2, [pc, #100]	; (8000f90 <UART_PeriClockControl+0x150>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d106      	bne.n	8000f3c <UART_PeriClockControl+0xfc>
		{
			UART4_PCLK_DI();
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000f34:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	e017      	b.n	8000f6c <UART_PeriClockControl+0x12c>
		}
		else if(pUARTx == UART5)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a15      	ldr	r2, [pc, #84]	; (8000f94 <UART_PeriClockControl+0x154>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d106      	bne.n	8000f52 <UART_PeriClockControl+0x112>
		{
			UART5_PCLK_DI();
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000f4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f50:	e00c      	b.n	8000f6c <UART_PeriClockControl+0x12c>
		}
		else if(pUARTx == UART6)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <UART_PeriClockControl+0x158>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d106      	bne.n	8000f68 <UART_PeriClockControl+0x128>
		{
			UART6_PCLK_DI();
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5e:	4a09      	ldr	r2, [pc, #36]	; (8000f84 <UART_PeriClockControl+0x144>)
 8000f60:	f023 0320 	bic.w	r3, r3, #32
 8000f64:	6453      	str	r3, [r2, #68]	; 0x44
 8000f66:	e001      	b.n	8000f6c <UART_PeriClockControl+0x12c>
		}
		else
		{
			return STATUS_ERROR;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e002      	b.n	8000f72 <UART_PeriClockControl+0x132>
		}
		return STATUS_OK;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e000      	b.n	8000f72 <UART_PeriClockControl+0x132>
	}
	else return STATUS_ERROR;
 8000f70:	2300      	movs	r3, #0

}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40011000 	.word	0x40011000
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40004400 	.word	0x40004400
 8000f8c:	40004800 	.word	0x40004800
 8000f90:	40004c00 	.word	0x40004c00
 8000f94:	40005000 	.word	0x40005000
 8000f98:	40011400 	.word	0x40011400

08000f9c <UART_Init>:

/*
 * Init and De-Init
 */
Status_t UART_Init(UART_Handle_t *pUARTHandle)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	UART_PeriClockControl(pUARTHandle->pUARTx, ENABLE);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2101      	movs	r1, #1
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff48 	bl	8000e40 <UART_PeriClockControl>

	uint32_t CR1temp = 0;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]
	uint32_t CR2temp = 0;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
	uint32_t CR3temp = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]

	//Mode
	if ( pUARTHandle->UARTConfig.USART_Mode == UART_MODE_TX)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d108      	bne.n	8000fd6 <UART_Init+0x3a>
	{
		CR1temp |= (1ul << UART_CR1_TE);
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	f043 0308 	orr.w	r3, r3, #8
 8000fca:	617b      	str	r3, [r7, #20]
		CR1temp &= ~(1ul << UART_CR1_RE);
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	f023 0304 	bic.w	r3, r3, #4
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	e01b      	b.n	800100e <UART_Init+0x72>
	}
	else if (pUARTHandle->UARTConfig.USART_Mode == UART_MODE_RX)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d108      	bne.n	8000ff0 <UART_Init+0x54>
	{
		CR1temp &= ~(1ul << UART_CR1_TE);
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f023 0308 	bic.w	r3, r3, #8
 8000fe4:	617b      	str	r3, [r7, #20]
		CR1temp |= (1ul << UART_CR1_RE);
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	617b      	str	r3, [r7, #20]
 8000fee:	e00e      	b.n	800100e <UART_Init+0x72>
	}
	else if (pUARTHandle->UARTConfig.USART_Mode == UART_MODE_TXRX)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d108      	bne.n	800100a <UART_Init+0x6e>
	{
		CR1temp |= (1ul << UART_CR1_TE);
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f043 0308 	orr.w	r3, r3, #8
 8000ffe:	617b      	str	r3, [r7, #20]
		CR1temp |= (1ul << UART_CR1_RE);
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	617b      	str	r3, [r7, #20]
 8001008:	e001      	b.n	800100e <UART_Init+0x72>
	}
	else return STATUS_ERROR;
 800100a:	2300      	movs	r3, #0
 800100c:	e0bb      	b.n	8001186 <UART_Init+0x1ea>

	//Wordlength
	if ( pUARTHandle->UARTConfig.USART_WordLength == UART_WORD_8BITS)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d104      	bne.n	8001020 <UART_Init+0x84>
	{
		CR1temp &= ~(1ul << UART_CR1_M);
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	e00a      	b.n	8001036 <UART_Init+0x9a>
	}
	else if (pUARTHandle->UARTConfig.USART_WordLength == UART_WORD_9BITS)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	691b      	ldr	r3, [r3, #16]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d104      	bne.n	8001032 <UART_Init+0x96>
	{
		CR1temp |= (1ul << UART_CR1_M);
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	e001      	b.n	8001036 <UART_Init+0x9a>
	}
	else return STATUS_ERROR;
 8001032:	2300      	movs	r3, #0
 8001034:	e0a7      	b.n	8001186 <UART_Init+0x1ea>

	//Parity
	if ( pUARTHandle->UARTConfig.USART_Parity == UART_PARITY_DISABLE)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	695b      	ldr	r3, [r3, #20]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d104      	bne.n	8001048 <UART_Init+0xac>
	{
		CR1temp &= ~(1ul << UART_CR1_PCE);
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001044:	617b      	str	r3, [r7, #20]
 8001046:	e01b      	b.n	8001080 <UART_Init+0xe4>
	}
	else if (pUARTHandle->UARTConfig.USART_Parity == UART_PARITY_EN_EVEN)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d108      	bne.n	8001062 <UART_Init+0xc6>
	{
		CR1temp |= (1ul << UART_CR1_PCE);
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001056:	617b      	str	r3, [r7, #20]
		CR1temp &= ~(1ul << UART_CR1_PS);
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	e00e      	b.n	8001080 <UART_Init+0xe4>
	}
	else if (pUARTHandle->UARTConfig.USART_Parity == UART_PARITY_EN_ODD)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	2b02      	cmp	r3, #2
 8001068:	d108      	bne.n	800107c <UART_Init+0xe0>
	{
		CR1temp |= (1ul << UART_CR1_PCE);
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001070:	617b      	str	r3, [r7, #20]
		CR1temp |= (1ul << UART_CR1_PS);
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001078:	617b      	str	r3, [r7, #20]
 800107a:	e001      	b.n	8001080 <UART_Init+0xe4>
	}
	else return STATUS_ERROR;
 800107c:	2300      	movs	r3, #0
 800107e:	e082      	b.n	8001186 <UART_Init+0x1ea>

	//Stopbits - default 1
	if (pUARTHandle->UARTConfig.USART_StopBits == UART_STOPBITS_1)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d104      	bne.n	8001092 <UART_Init+0xf6>
	{
		CR2temp &= ~(3ul << UART_CR2_STOP);
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	e01c      	b.n	80010cc <UART_Init+0x130>
	}
	else if (pUARTHandle->UARTConfig.USART_StopBits == UART_STOPBITS_HALF)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d104      	bne.n	80010a4 <UART_Init+0x108>
	{
		CR2temp |= (1ul << UART_CR2_STOP);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	e013      	b.n	80010cc <UART_Init+0x130>
	}
	else if (pUARTHandle->UARTConfig.USART_StopBits == UART_STOPBITS_2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d104      	bne.n	80010b6 <UART_Init+0x11a>
	{
		CR2temp |= (2ul << UART_CR2_STOP);
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	e00a      	b.n	80010cc <UART_Init+0x130>
	}
	else if (pUARTHandle->UARTConfig.USART_StopBits == UART_STOPBITS_1HALF)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	68db      	ldr	r3, [r3, #12]
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d104      	bne.n	80010c8 <UART_Init+0x12c>
	{
		CR2temp|= (3ul << UART_CR2_STOP);
 80010be:	693b      	ldr	r3, [r7, #16]
 80010c0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	e001      	b.n	80010cc <UART_Init+0x130>
	}
	else return STATUS_ERROR;
 80010c8:	2300      	movs	r3, #0
 80010ca:	e05c      	b.n	8001186 <UART_Init+0x1ea>



	//Flowcontrol
	if ( pUARTHandle->UARTConfig.USART_HWFlowControl == UART_FLOWCONTROL_NONE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d108      	bne.n	80010e6 <UART_Init+0x14a>
	{
		CR3temp &= ~(1ul << UART_CR3_CTSE);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80010da:	60fb      	str	r3, [r7, #12]
		CR3temp &= ~(1ul << UART_CR3_RTSE);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	e028      	b.n	8001138 <UART_Init+0x19c>
	}
	else if (pUARTHandle->UARTConfig.USART_HWFlowControl == UART_FLOWCONTROL_CTS)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d108      	bne.n	8001100 <UART_Init+0x164>
	{
		CR3temp |= (1ul << UART_CR3_CTSE);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f4:	60fb      	str	r3, [r7, #12]
		CR3temp &= ~(1ul << UART_CR3_RTSE);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	e01b      	b.n	8001138 <UART_Init+0x19c>
	}
	else if (pUARTHandle->UARTConfig.USART_HWFlowControl == UART_FLOWCONTROL_RTS)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d108      	bne.n	800111a <UART_Init+0x17e>
	{
		CR3temp &= ~(1ul << UART_CR3_CTSE);
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800110e:	60fb      	str	r3, [r7, #12]
		CR3temp |= (1ul << UART_CR3_RTSE);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	e00e      	b.n	8001138 <UART_Init+0x19c>
	}
	else if (pUARTHandle->UARTConfig.USART_HWFlowControl == UART_FLOWCONTROL_CTS_RTS)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	2b03      	cmp	r3, #3
 8001120:	d108      	bne.n	8001134 <UART_Init+0x198>
	{
		CR3temp |= (1ul << UART_CR3_CTSE);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001128:	60fb      	str	r3, [r7, #12]
		CR3temp |= (1ul << UART_CR3_RTSE);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	e001      	b.n	8001138 <UART_Init+0x19c>
	}
	else return STATUS_ERROR;
 8001134:	2300      	movs	r3, #0
 8001136:	e026      	b.n	8001186 <UART_Init+0x1ea>


	//baudrate
	if ( UART_SetBaudRate(pUARTHandle) == STATUS_ERROR)
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 f829 	bl	8001190 <UART_SetBaudRate>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d101      	bne.n	8001148 <UART_Init+0x1ac>
	{
		return STATUS_ERROR;
 8001144:	2300      	movs	r3, #0
 8001146:	e01e      	b.n	8001186 <UART_Init+0x1ea>
	}

	/*
	 * Using temporary functions to guarantee atomic functions
	 */
	pUARTHandle->pUARTx->CR1 |= CR1temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68d9      	ldr	r1, [r3, #12]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	430a      	orrs	r2, r1
 8001156:	60da      	str	r2, [r3, #12]
	pUARTHandle->pUARTx->CR2 |= CR2temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6919      	ldr	r1, [r3, #16]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	430a      	orrs	r2, r1
 8001166:	611a      	str	r2, [r3, #16]
	pUARTHandle->pUARTx->CR3 |= CR3temp;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6959      	ldr	r1, [r3, #20]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	430a      	orrs	r2, r1
 8001176:	615a      	str	r2, [r3, #20]


	UART_PeripheralControl(pUARTHandle->pUARTx, ENABLE);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2101      	movs	r1, #1
 800117e:	4618      	mov	r0, r3
 8001180:	f000 fa6c 	bl	800165c <UART_PeripheralControl>

	return STATUS_OK;
 8001184:	2301      	movs	r3, #1
}
 8001186:	4618      	mov	r0, r3
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <UART_SetBaudRate>:

}


Status_t UART_SetBaudRate(UART_Handle_t *pUARTHandle)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	; 0x28
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	 * UART_BRR
	 * Fraction - 4 bits
	 * Mantissa - 12 bits
	 * USARTDivider = fclk/ ( 8 * (2-over8) * BaudRate )
	 */
	uint32_t tempreg=0;
 8001198:	2300      	movs	r3, #0
 800119a:	61fb      	str	r3, [r7, #28]

	// USART_BaudRate;
	uint32_t UART_Div = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	61bb      	str	r3, [r7, #24]
	uint32_t UART_Clk = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t mantissa, fraction;

	uint32_t BaudRate = pUARTHandle->UARTConfig.USART_BaudRate;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	617b      	str	r3, [r7, #20]

	if ( (pUARTHandle->pUARTx == UART1) || (pUARTHandle->pUARTx == UART6))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a30      	ldr	r2, [pc, #192]	; (8001270 <UART_SetBaudRate+0xe0>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d004      	beq.n	80011be <UART_SetBaudRate+0x2e>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a2e      	ldr	r2, [pc, #184]	; (8001274 <UART_SetBaudRate+0xe4>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d103      	bne.n	80011c6 <UART_SetBaudRate+0x36>
	{
		UART_Clk = RCC_GetPCLK1();
 80011be:	f7ff fd0d 	bl	8000bdc <RCC_GetPCLK1>
 80011c2:	6278      	str	r0, [r7, #36]	; 0x24
 80011c4:	e002      	b.n	80011cc <UART_SetBaudRate+0x3c>
	}
	else
	{
		UART_Clk = RCC_GetPCLK2();
 80011c6:	f7ff fd63 	bl	8000c90 <RCC_GetPCLK2>
 80011ca:	6278      	str	r0, [r7, #36]	; 0x24
	}

	uint32_t OVER8 =  ((pUARTHandle->pUARTx->CR1 & (1 << UART_CR1_OVER8)) >> UART_CR1_OVER8);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	0bdb      	lsrs	r3, r3, #15
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	613b      	str	r3, [r7, #16]

	//Test OVER8
	UART_Div = (100 * UART_Clk)/(8 * (2 - OVER8) * BaudRate);
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	2264      	movs	r2, #100	; 0x64
 80011de:	fb02 f103 	mul.w	r1, r2, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4613      	mov	r3, r2
 80011e6:	075b      	lsls	r3, r3, #29
 80011e8:	1a9b      	subs	r3, r3, r2
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	3310      	adds	r3, #16
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	fb02 f303 	mul.w	r3, r2, r3
 80011f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80011f8:	61bb      	str	r3, [r7, #24]

	//Mantissa
	mantissa = UART_Div/100;
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	4a1e      	ldr	r2, [pc, #120]	; (8001278 <UART_SetBaudRate+0xe8>)
 80011fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001202:	095b      	lsrs	r3, r3, #5
 8001204:	60fb      	str	r3, [r7, #12]
	tempreg |= mantissa << 4;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	011b      	lsls	r3, r3, #4
 800120a:	69fa      	ldr	r2, [r7, #28]
 800120c:	4313      	orrs	r3, r2
 800120e:	61fb      	str	r3, [r7, #28]

	//Fraction
	fraction = (UART_Div - (mantissa* 100));
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2264      	movs	r2, #100	; 0x64
 8001214:	fb02 f303 	mul.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	623b      	str	r3, [r7, #32]

	if(pUARTHandle->pUARTx->CR1 & ( 1 << UART_CR1_OVER8))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d00a      	beq.n	8001242 <UART_SetBaudRate+0xb2>
	{
	  //OVER8 = 1 , DIV_Fraction3 bit is not considered and must be kept cleared
		fraction = ((( fraction * 8)+ 50) / 100)& ((uint8_t)0x07); //The 50 is a round up factor because we multiply by 100 (0,5*100).
 800122c:	6a3b      	ldr	r3, [r7, #32]
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	3332      	adds	r3, #50	; 0x32
 8001232:	4a11      	ldr	r2, [pc, #68]	; (8001278 <UART_SetBaudRate+0xe8>)
 8001234:	fba2 2303 	umull	r2, r3, r2, r3
 8001238:	095b      	lsrs	r3, r3, #5
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	623b      	str	r3, [r7, #32]
 8001240:	e009      	b.n	8001256 <UART_SetBaudRate+0xc6>

	}else
	{
	   //over sampling by 16
		fraction = ((( fraction * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	011b      	lsls	r3, r3, #4
 8001246:	3332      	adds	r3, #50	; 0x32
 8001248:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <UART_SetBaudRate+0xe8>)
 800124a:	fba2 2303 	umull	r2, r3, r2, r3
 800124e:	095b      	lsrs	r3, r3, #5
 8001250:	f003 030f 	and.w	r3, r3, #15
 8001254:	623b      	str	r3, [r7, #32]

	}
	tempreg |= fraction;
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	6a3b      	ldr	r3, [r7, #32]
 800125a:	4313      	orrs	r3, r2
 800125c:	61fb      	str	r3, [r7, #28]

	//copy the value of tempreg in to BRR register
	pUARTHandle->pUARTx->BRR = tempreg;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	69fa      	ldr	r2, [r7, #28]
 8001264:	609a      	str	r2, [r3, #8]


	return STATUS_OK;
 8001266:	2301      	movs	r3, #1
}
 8001268:	4618      	mov	r0, r3
 800126a:	3728      	adds	r7, #40	; 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40011000 	.word	0x40011000
 8001274:	40011400 	.word	0x40011400
 8001278:	51eb851f 	.word	0x51eb851f

0800127c <UART_SendData>:
 *  SEND / RECEIVE - BLOCKING
 *
 *********************************************************************/

void UART_SendData(UART_Handle_t *pUARTHandle)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	uint8_t *pTxBuffer =  pUARTHandle->pTxBuffer;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	69db      	ldr	r3, [r3, #28]
 8001288:	617b      	str	r3, [r7, #20]
	uint32_t Lenght = pUARTHandle->TxLen;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	60fb      	str	r3, [r7, #12]

	for(uint32_t i = 0 ; i < Lenght; ++i)
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	e02f      	b.n	80012f6 <UART_SendData+0x7a>
	{
		//Wait until TXE is set
		while( UART_GetFlagStatus(pUARTHandle->pUARTx,UART_TXE_FLAG) != FLAG_SET);
 8001296:	bf00      	nop
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2180      	movs	r1, #128	; 0x80
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f9c8 	bl	8001634 <UART_GetFlagStatus>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d1f6      	bne.n	8001298 <UART_SendData+0x1c>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUARTHandle->UARTConfig.USART_WordLength == UART_WORD_9BITS)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d116      	bne.n	80012e0 <UART_SendData+0x64>
		{
			//if 9BIT, DR is loaded with 2bytes masking the bits other than first 9 bits
			pUARTHandle->pUARTx->DR = ( *((uint16_t*)pTxBuffer) & ((uint16_t)0x01FF) );
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80012c0:	605a      	str	r2, [r3, #4]
			//Parity
			if(pUARTHandle->UARTConfig.USART_Parity == UART_PARITY_DISABLE)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d106      	bne.n	80012d8 <UART_SendData+0x5c>
			{
				//If no Parity we will transmitt 9bits of data
				pTxBuffer++;
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	3301      	adds	r3, #1
 80012ce:	617b      	str	r3, [r7, #20]
				pTxBuffer++;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	3301      	adds	r3, #1
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	e00b      	b.n	80012f0 <UART_SendData+0x74>
			}
			else
			{
				//Parity bit is used in this transfer so the 9th bit is the parity
				pTxBuffer++;
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	3301      	adds	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
 80012de:	e007      	b.n	80012f0 <UART_SendData+0x74>
			}
		}
		else
		{
			//8bits
			pUARTHandle->pUARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	781a      	ldrb	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
			pTxBuffer++;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3301      	adds	r3, #1
 80012ee:	617b      	str	r3, [r7, #20]
	for(uint32_t i = 0 ; i < Lenght; ++i)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	3301      	adds	r3, #1
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d3cb      	bcc.n	8001296 <UART_SendData+0x1a>
		}
	}
	//wait till TC flag is set
	while( UART_GetFlagStatus(pUARTHandle->pUARTx,UART_TC_FLAG) != FLAG_SET);
 80012fe:	bf00      	nop
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2140      	movs	r1, #64	; 0x40
 8001306:	4618      	mov	r0, r3
 8001308:	f000 f994 	bl	8001634 <UART_GetFlagStatus>
 800130c:	4603      	mov	r3, r0
 800130e:	2b01      	cmp	r3, #1
 8001310:	d1f6      	bne.n	8001300 <UART_SendData+0x84>
}
 8001312:	bf00      	nop
 8001314:	3718      	adds	r7, #24
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <UART_ReceiveDataString>:
}



void UART_ReceiveDataString(UART_Handle_t *pUARTHandle, uint8_t *pRxBuffer)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b084      	sub	sp, #16
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	6039      	str	r1, [r7, #0]
	uint32_t Length = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
	uint8_t temp;

	do
	{
		//Wait until RXNE is set
		while( UART_GetFlagStatus(pUARTHandle->pUARTx,UART_RXNE_FLAG) != FLAG_SET);
 8001328:	bf00      	nop
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2120      	movs	r1, #32
 8001330:	4618      	mov	r0, r3
 8001332:	f000 f97f 	bl	8001634 <UART_GetFlagStatus>
 8001336:	4603      	mov	r3, r0
 8001338:	2b01      	cmp	r3, #1
 800133a:	d1f6      	bne.n	800132a <UART_ReceiveDataString+0x10>

         // USART_WordLength for 9BIT or 8BIT in a frame
		if(pUARTHandle->UARTConfig.USART_WordLength == UART_WORD_9BITS)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	691b      	ldr	r3, [r3, #16]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d11d      	bne.n	8001380 <UART_ReceiveDataString+0x66>
		{
			//USART_ParityControl
			if(pUARTHandle->UARTConfig.USART_Parity == UART_PARITY_DISABLE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d10f      	bne.n	800136c <UART_ReceiveDataString+0x52>
			{
				//read  first 9 bits -  DR with 0x01FF
				*((uint16_t*) pRxBuffer) = (pUARTHandle->pUARTx->DR  & (uint16_t)0x01FF);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	b29b      	uxth	r3, r3
 8001354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001358:	b29a      	uxth	r2, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	801a      	strh	r2, [r3, #0]
				pRxBuffer++;
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	603b      	str	r3, [r7, #0]
				pRxBuffer++;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	3301      	adds	r3, #1
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	e020      	b.n	80013ae <UART_ReceiveDataString+0x94>
			}
			else
			{
				 *pRxBuffer = (pUARTHandle->pUARTx->DR  & (uint8_t)0xFF);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	701a      	strb	r2, [r3, #0]
				 pRxBuffer++;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	603b      	str	r3, [r7, #0]
 800137e:	e016      	b.n	80013ae <UART_ReceiveDataString+0x94>
		}
		else
		{
			//8bits
			//USART_ParityControl control
			if(pUARTHandle->UARTConfig.USART_Parity == UART_PARITY_DISABLE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d106      	bne.n	8001396 <UART_ReceiveDataString+0x7c>
			{

				//read 8 bits from DR
				 *pRxBuffer = (uint8_t) (pUARTHandle->pUARTx->DR  & (uint8_t)0xFF);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	e008      	b.n	80013a8 <UART_ReceiveDataString+0x8e>

			else
			{
				//Parity is used
				//read only 7 bits
				 *pRxBuffer = (uint8_t) (pUARTHandle->pUARTx->DR  & (uint8_t)0x7F);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	701a      	strb	r2, [r3, #0]
			}
			pRxBuffer++;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	3301      	adds	r3, #1
 80013ac:	603b      	str	r3, [r7, #0]
		}
		Length++;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3301      	adds	r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
		temp = *(pRxBuffer-1);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80013ba:	72fb      	strb	r3, [r7, #11]
	}
	while (temp != '\n');
 80013bc:	7afb      	ldrb	r3, [r7, #11]
 80013be:	2b0a      	cmp	r3, #10
 80013c0:	d1b2      	bne.n	8001328 <UART_ReceiveDataString+0xe>


	pUARTHandle->pRxBuffer = (pRxBuffer - Length);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	425b      	negs	r3, r3
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	441a      	add	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	621a      	str	r2, [r3, #32]
	pUARTHandle->RxLen = Length;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <UART_IRQInterruptConfig>:
 *  INTERRUPT
 *
 *********************************************************************/

void UART_IRQInterruptConfig(IRQn_Type IRQNumber, uint8_t EnableDisable)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	460a      	mov	r2, r1
 80013e6:	71fb      	strb	r3, [r7, #7]
 80013e8:	4613      	mov	r3, r2
 80013ea:	71bb      	strb	r3, [r7, #6]

	if (EnableDisable == ENABLE)
 80013ec:	79bb      	ldrb	r3, [r7, #6]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d145      	bne.n	800147e <UART_IRQInterruptConfig+0xa2>
	{
		if (IRQNumber < 32){
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	2b1f      	cmp	r3, #31
 80013f8:	dc0b      	bgt.n	8001412 <UART_IRQInterruptConfig+0x36>
			//NVIC_ISER0
			*NVIC_ISER0 |= (1 << IRQNumber);
 80013fa:	4b48      	ldr	r3, [pc, #288]	; (800151c <UART_IRQInterruptConfig+0x140>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001402:	2101      	movs	r1, #1
 8001404:	fa01 f202 	lsl.w	r2, r1, r2
 8001408:	4611      	mov	r1, r2
 800140a:	4a44      	ldr	r2, [pc, #272]	; (800151c <UART_IRQInterruptConfig+0x140>)
 800140c:	430b      	orrs	r3, r1
 800140e:	6013      	str	r3, [r2, #0]
			//NVIC_ICER2
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}

}
 8001410:	e07e      	b.n	8001510 <UART_IRQInterruptConfig+0x134>
		else if( IRQNumber >= 32 && IRQNumber < 64){
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	2b1f      	cmp	r3, #31
 8001418:	dd16      	ble.n	8001448 <UART_IRQInterruptConfig+0x6c>
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	2b3f      	cmp	r3, #63	; 0x3f
 8001420:	dc12      	bgt.n	8001448 <UART_IRQInterruptConfig+0x6c>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8001422:	4b3f      	ldr	r3, [pc, #252]	; (8001520 <UART_IRQInterruptConfig+0x144>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	4259      	negs	r1, r3
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	f001 011f 	and.w	r1, r1, #31
 8001434:	bf58      	it	pl
 8001436:	424b      	negpl	r3, r1
 8001438:	b25b      	sxtb	r3, r3
 800143a:	4619      	mov	r1, r3
 800143c:	2301      	movs	r3, #1
 800143e:	408b      	lsls	r3, r1
 8001440:	4937      	ldr	r1, [pc, #220]	; (8001520 <UART_IRQInterruptConfig+0x144>)
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]
 8001446:	e063      	b.n	8001510 <UART_IRQInterruptConfig+0x134>
		else if (IRQNumber >= 64 && IRQNumber < 96){
 8001448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144c:	2b3f      	cmp	r3, #63	; 0x3f
 800144e:	dd5f      	ble.n	8001510 <UART_IRQInterruptConfig+0x134>
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	2b5f      	cmp	r3, #95	; 0x5f
 8001456:	dc5b      	bgt.n	8001510 <UART_IRQInterruptConfig+0x134>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8001458:	4b32      	ldr	r3, [pc, #200]	; (8001524 <UART_IRQInterruptConfig+0x148>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	4259      	negs	r1, r3
 8001462:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001466:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800146a:	bf58      	it	pl
 800146c:	424b      	negpl	r3, r1
 800146e:	b25b      	sxtb	r3, r3
 8001470:	4619      	mov	r1, r3
 8001472:	2301      	movs	r3, #1
 8001474:	408b      	lsls	r3, r1
 8001476:	492b      	ldr	r1, [pc, #172]	; (8001524 <UART_IRQInterruptConfig+0x148>)
 8001478:	4313      	orrs	r3, r2
 800147a:	600b      	str	r3, [r1, #0]
}
 800147c:	e048      	b.n	8001510 <UART_IRQInterruptConfig+0x134>
	else if (EnableDisable == DISABLE)
 800147e:	79bb      	ldrb	r3, [r7, #6]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d145      	bne.n	8001510 <UART_IRQInterruptConfig+0x134>
		if (IRQNumber < 32){
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	2b1f      	cmp	r3, #31
 800148a:	dc0b      	bgt.n	80014a4 <UART_IRQInterruptConfig+0xc8>
			*NVIC_ICER0 |= (1 << IRQNumber);
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <UART_IRQInterruptConfig+0x14c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001494:	2101      	movs	r1, #1
 8001496:	fa01 f202 	lsl.w	r2, r1, r2
 800149a:	4611      	mov	r1, r2
 800149c:	4a22      	ldr	r2, [pc, #136]	; (8001528 <UART_IRQInterruptConfig+0x14c>)
 800149e:	430b      	orrs	r3, r1
 80014a0:	6013      	str	r3, [r2, #0]
}
 80014a2:	e035      	b.n	8001510 <UART_IRQInterruptConfig+0x134>
		else if( IRQNumber >= 32 && IRQNumber < 64){
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	2b1f      	cmp	r3, #31
 80014aa:	dd16      	ble.n	80014da <UART_IRQInterruptConfig+0xfe>
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	2b3f      	cmp	r3, #63	; 0x3f
 80014b2:	dc12      	bgt.n	80014da <UART_IRQInterruptConfig+0xfe>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80014b4:	4b1d      	ldr	r3, [pc, #116]	; (800152c <UART_IRQInterruptConfig+0x150>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	4259      	negs	r1, r3
 80014be:	f003 031f 	and.w	r3, r3, #31
 80014c2:	f001 011f 	and.w	r1, r1, #31
 80014c6:	bf58      	it	pl
 80014c8:	424b      	negpl	r3, r1
 80014ca:	b25b      	sxtb	r3, r3
 80014cc:	4619      	mov	r1, r3
 80014ce:	2301      	movs	r3, #1
 80014d0:	408b      	lsls	r3, r1
 80014d2:	4916      	ldr	r1, [pc, #88]	; (800152c <UART_IRQInterruptConfig+0x150>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	600b      	str	r3, [r1, #0]
 80014d8:	e01a      	b.n	8001510 <UART_IRQInterruptConfig+0x134>
		else if (IRQNumber >= 64 && IRQNumber < 96){
 80014da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014de:	2b3f      	cmp	r3, #63	; 0x3f
 80014e0:	dd16      	ble.n	8001510 <UART_IRQInterruptConfig+0x134>
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	2b5f      	cmp	r3, #95	; 0x5f
 80014e8:	dc12      	bgt.n	8001510 <UART_IRQInterruptConfig+0x134>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <UART_IRQInterruptConfig+0x154>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	4259      	negs	r1, r3
 80014f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014f8:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80014fc:	bf58      	it	pl
 80014fe:	424b      	negpl	r3, r1
 8001500:	b25b      	sxtb	r3, r3
 8001502:	4619      	mov	r1, r3
 8001504:	2301      	movs	r3, #1
 8001506:	408b      	lsls	r3, r1
 8001508:	4909      	ldr	r1, [pc, #36]	; (8001530 <UART_IRQInterruptConfig+0x154>)
 800150a:	4313      	orrs	r3, r2
 800150c:	600b      	str	r3, [r1, #0]
}
 800150e:	e7ff      	b.n	8001510 <UART_IRQInterruptConfig+0x134>
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	e000e100 	.word	0xe000e100
 8001520:	e000e104 	.word	0xe000e104
 8001524:	e000e108 	.word	0xe000e108
 8001528:	e000e180 	.word	0xe000e180
 800152c:	e000e184 	.word	0xe000e184
 8001530:	e000e188 	.word	0xe000e188

08001534 <UART_IRQPriorityConfig>:

void UART_IRQPriorityConfig(IRQn_Type IRQNumber,uint32_t IRQPriority)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]

	uint8_t iprx = IRQNumber / 4;
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	da00      	bge.n	800154a <UART_IRQPriorityConfig+0x16>
 8001548:	3303      	adds	r3, #3
 800154a:	109b      	asrs	r3, r3, #2
 800154c:	b25b      	sxtb	r3, r3
 800154e:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	425a      	negs	r2, r3
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	f002 0203 	and.w	r2, r2, #3
 800155e:	bf58      	it	pl
 8001560:	4253      	negpl	r3, r2
 8001562:	b25b      	sxtb	r3, r3
 8001564:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_IRQ = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8001566:	7bbb      	ldrb	r3, [r7, #14]
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	b2db      	uxtb	r3, r3
 800156c:	3304      	adds	r3, #4
 800156e:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASEADDRESS + (iprx * 4)) = (IRQPriority << shift_IRQ);
 8001570:	7b7a      	ldrb	r2, [r7, #13]
 8001572:	7bfb      	ldrb	r3, [r7, #15]
 8001574:	011b      	lsls	r3, r3, #4
 8001576:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800157a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800157e:	6839      	ldr	r1, [r7, #0]
 8001580:	fa01 f202 	lsl.w	r2, r1, r2
 8001584:	601a      	str	r2, [r3, #0]

}
 8001586:	bf00      	nop
 8001588:	3714      	adds	r7, #20
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <UART_IRQ_Control>:




__inline void UART_IRQ_Control(UART_Handle_t *pUARTHandle, uint8_t CR1IRQbit, uint8_t CMD)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	460b      	mov	r3, r1
 800159c:	70fb      	strb	r3, [r7, #3]
 800159e:	4613      	mov	r3, r2
 80015a0:	70bb      	strb	r3, [r7, #2]
	if (CMD == ENABLE)
 80015a2:	78bb      	ldrb	r3, [r7, #2]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d10c      	bne.n	80015c2 <UART_IRQ_Control+0x30>
	{
		pUARTHandle->pUARTx->CR1 |= (1 << CR1IRQbit);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	68da      	ldr	r2, [r3, #12]
 80015ae:	78fb      	ldrb	r3, [r7, #3]
 80015b0:	2101      	movs	r1, #1
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	4619      	mov	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	430a      	orrs	r2, r1
 80015be:	60da      	str	r2, [r3, #12]
	}
	else
	{
		pUARTHandle->pUARTx->CR1 &= ~(1 << CR1IRQbit);
	}
}
 80015c0:	e00c      	b.n	80015dc <UART_IRQ_Control+0x4a>
		pUARTHandle->pUARTx->CR1 &= ~(1 << CR1IRQbit);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	78fb      	ldrb	r3, [r7, #3]
 80015ca:	2101      	movs	r1, #1
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	43db      	mvns	r3, r3
 80015d2:	4619      	mov	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	400a      	ands	r2, r1
 80015da:	60da      	str	r2, [r3, #12]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr

080015e8 <UART_SendDataBlockIT>:


UART_States_t UART_SendDataBlockIT(UART_Handle_t *pUARTHandle,uint8_t *pTxBuffer, uint32_t Lenght)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
	UART_States_t txstate = pUARTHandle->TxState;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80015fa:	75fb      	strb	r3, [r7, #23]

	if(txstate != USART_BUSY_TX)
 80015fc:	7dfb      	ldrb	r3, [r7, #23]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d013      	beq.n	800162a <UART_SendDataBlockIT+0x42>
	{
		pUARTHandle->TxLen = Lenght;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	625a      	str	r2, [r3, #36]	; 0x24
		pUARTHandle->pTxBuffer = pTxBuffer;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	61da      	str	r2, [r3, #28]
		pUARTHandle->TxState = USART_BUSY_TX;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2202      	movs	r2, #2
 8001612:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

		//Enable TXE
		UART_IRQ_Control(pUARTHandle,UART_CR1_TXEIE,ENABLE);
 8001616:	2201      	movs	r2, #1
 8001618:	2107      	movs	r1, #7
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f7ff ffb9 	bl	8001592 <UART_IRQ_Control>

		//EnableTC
		UART_IRQ_Control(pUARTHandle,UART_CR1_TCIE,ENABLE);
 8001620:	2201      	movs	r2, #1
 8001622:	2106      	movs	r1, #6
 8001624:	68f8      	ldr	r0, [r7, #12]
 8001626:	f7ff ffb4 	bl	8001592 <UART_IRQ_Control>
	}
	return txstate;
 800162a:	7dfb      	ldrb	r3, [r7, #23]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}

08001634 <UART_GetFlagStatus>:

/*
 * Peripheral Status
 */
FLAG_Status_t UART_GetFlagStatus(UART_RegDef_t *pUARTx, uint32_t FlagName)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
	if ( pUARTx->SR & FlagName )
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	4013      	ands	r3, r2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <UART_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800164a:	2301      	movs	r3, #1
 800164c:	e000      	b.n	8001650 <UART_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <UART_PeripheralControl>:
}



void UART_PeripheralControl(UART_RegDef_t *pUARTx, uint32_t EnDis)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]

	if(EnDis == ENABLE)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d106      	bne.n	800167a <UART_PeripheralControl+0x1e>
	{
		pUARTx->CR1 |= (1 << 13);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	60da      	str	r2, [r3, #12]
	}else
	{
		pUARTx->CR1 &= ~(1 << 13);
	}

}
 8001678:	e005      	b.n	8001686 <UART_PeripheralControl+0x2a>
		pUARTx->CR1 &= ~(1 << 13);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	60da      	str	r2, [r3, #12]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <UART_IRQHandling>:
 * @Note              -

 */

void UART_IRQHandling(UART_Handle_t *pUARTHandle)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
	uint16_t *pbuffer;

	uint32_t SRreg = pUARTHandle->pUARTx->SR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	617b      	str	r3, [r7, #20]
	uint32_t CR1reg = pUARTHandle->pUARTx->CR1;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	613b      	str	r3, [r7, #16]
	uint32_t CR3reg = pUARTHandle->pUARTx->CR3;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	695b      	ldr	r3, [r3, #20]
 80016b0:	60fb      	str	r3, [r7, #12]

	//Check the state of TC and TCEIE
	if ( (SRreg & (1ul << UART_SR_TC)) && (CR1reg & (1ul << UART_CR1_TCIE) ) )
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d023      	beq.n	8001704 <UART_IRQHandling+0x72>
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d01e      	beq.n	8001704 <UART_IRQHandling+0x72>
	{
		//close transmission and call application callback if TxLen is zero
		if ( pUARTHandle->TxState == USART_BUSY_TX)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d119      	bne.n	8001704 <UART_IRQHandling+0x72>
		{
			if(! pUARTHandle->TxLen )
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d115      	bne.n	8001704 <UART_IRQHandling+0x72>
			{
				pUARTHandle->pUARTx->SR &= ~( 1 << UART_SR_TC);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016e6:	601a      	str	r2, [r3, #0]

				pUARTHandle->TxState = UART_READY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				pUARTHandle->pTxBuffer = NULL;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
				pUARTHandle->TxLen = 0;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	625a      	str	r2, [r3, #36]	; 0x24

				UART_EventCallback(pUARTHandle,UART_EVENT_TC);
 80016fc:	2100      	movs	r1, #0
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f8c7 	bl	8001892 <UART_EventCallback>
			}
		}
	}

	//Check the state of TXE and TXEIE
	if ( (SRreg & (1ul << UART_SR_TXE)) && (CR1reg & (1ul << UART_CR1_TXEIE) ) )
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800170a:	2b00      	cmp	r3, #0
 800170c:	d057      	beq.n	80017be <UART_IRQHandling+0x12c>
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001714:	2b00      	cmp	r3, #0
 8001716:	d052      	beq.n	80017be <UART_IRQHandling+0x12c>
	{
		if(pUARTHandle->TxState == USART_BUSY_TX)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800171e:	2b02      	cmp	r3, #2
 8001720:	d14d      	bne.n	80017be <UART_IRQHandling+0x12c>
		{
			//Keep sending data until Txlen == 0
			if(pUARTHandle->TxLen > 0)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	2b00      	cmp	r3, #0
 8001728:	d03d      	beq.n	80017a6 <UART_IRQHandling+0x114>
			{
				//9BIT or 8BIT in a frame
				if(pUARTHandle->UARTConfig.USART_WordLength == UART_WORD_9BITS)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d129      	bne.n	8001786 <UART_IRQHandling+0xf4>
				{
					pbuffer = (uint16_t*) pUARTHandle->pTxBuffer;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	60bb      	str	r3, [r7, #8]
					pUARTHandle->pUARTx->DR = (*pbuffer & (uint16_t)0x01FF);
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001746:	605a      	str	r2, [r3, #4]

					//Parity
					if(pUARTHandle->UARTConfig.USART_Parity == UART_PARITY_DISABLE)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d10f      	bne.n	8001770 <UART_IRQHandling+0xde>
					{
						pUARTHandle->pTxBuffer++;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	1c5a      	adds	r2, r3, #1
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	61da      	str	r2, [r3, #28]
						pUARTHandle->pTxBuffer++;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	1c5a      	adds	r2, r3, #1
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	61da      	str	r2, [r3, #28]
						pUARTHandle->TxLen -= 2;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001768:	1e9a      	subs	r2, r3, #2
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	625a      	str	r2, [r3, #36]	; 0x24
 800176e:	e01a      	b.n	80017a6 <UART_IRQHandling+0x114>
					}
					else
					{
						pUARTHandle->pTxBuffer++;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	1c5a      	adds	r2, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	61da      	str	r2, [r3, #28]
						pUARTHandle->TxLen-=1;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177e:	1e5a      	subs	r2, r3, #1
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	625a      	str	r2, [r3, #36]	; 0x24
 8001784:	e00f      	b.n	80017a6 <UART_IRQHandling+0x114>
					}
				}
				else
				{
					//8bit data transfer
					pUARTHandle->pUARTx->DR = (*pUARTHandle->pTxBuffer  & (uint8_t)0xFF);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	781a      	ldrb	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]

					pUARTHandle->pTxBuffer++;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	1c5a      	adds	r2, r3, #1
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	61da      	str	r2, [r3, #28]
					pUARTHandle->TxLen-=1;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	1e5a      	subs	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
			if (pUARTHandle->TxLen == 0 )
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d107      	bne.n	80017be <UART_IRQHandling+0x12c>
			{
				//TxLen is zero - ClearFLAG
				pUARTHandle->pUARTx->CR1 &= ~( 1 << UART_CR1_TXEIE);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017bc:	60da      	str	r2, [r3, #12]
		}
	}


	//Check the state of RXE and RXEIE
	if ( (SRreg & (1ul << UART_SR_RXNE)) && (CR1reg & (1ul << UART_CR1_RXNEIE) ) )
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f003 0320 	and.w	r3, r3, #32
 80017c4:	2b00      	cmp	r3, #0
	{

	}

	//CTS - Check the state of CTS, CTSE and CTSIE
	if ( (SRreg & (1ul << UART_SR_CTS)) && (CR1reg & (1ul << UART_CR3_CTSIE) ) )
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d010      	beq.n	80017f2 <UART_IRQHandling+0x160>
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d00b      	beq.n	80017f2 <UART_IRQHandling+0x160>
	{
		pUARTHandle->pUARTx->SR &=  ~( 1 << UART_SR_CTS);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017e8:	601a      	str	r2, [r3, #0]
		UART_EventCallback(pUARTHandle,UART_EVENT_CTS);
 80017ea:	2103      	movs	r1, #3
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f850 	bl	8001892 <UART_EventCallback>
	}

	//IDLE - Check the state of IDLE and IDLEIE
	if ( (SRreg & (1ul << UART_SR_TC)) && (CR1reg & (1ul << UART_CR1_TCIE) ) )
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d010      	beq.n	800181e <UART_IRQHandling+0x18c>
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00b      	beq.n	800181e <UART_IRQHandling+0x18c>
	{
		pUARTHandle->pUARTx->SR &=  ~( 1 << UART_SR_IDLE);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0210 	bic.w	r2, r2, #16
 8001814:	601a      	str	r2, [r3, #0]
		UART_EventCallback(pUARTHandle,UART_EVENT_IDLE);
 8001816:	2104      	movs	r1, #4
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f83a 	bl	8001892 <UART_EventCallback>
	}

	//OVERUN - Check the state of ORE and RXNEIE
	if ( (SRreg & (1ul << UART_SR_TC)) && (CR1reg & (1ul << UART_CR1_TCIE) ) )
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001824:	2b00      	cmp	r3, #0
 8001826:	d010      	beq.n	800184a <UART_IRQHandling+0x1b8>
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <UART_IRQHandling+0x1b8>
	{
		pUARTHandle->pUARTx->SR &=  ~( 1 << UART_SR_ORE);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f022 0208 	bic.w	r2, r2, #8
 8001840:	601a      	str	r2, [r3, #0]
		UART_EventCallback(pUARTHandle,UART_EVENT_ORE);
 8001842:	2105      	movs	r1, #5
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f824 	bl	8001892 <UART_EventCallback>
	}

	//ERROR - Noise Flag, Overrun error and Framing Error

	if( CR3reg & ( 1 << UART_CR3_EIE) )
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b00      	cmp	r3, #0
 8001852:	d01a      	beq.n	800188a <UART_IRQHandling+0x1f8>
	{
		if( SRreg & ( 1 << UART_SR_FE))
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <UART_IRQHandling+0x1d4>
		{
			UART_EventCallback(pUARTHandle,UART_EVENT_FE);
 800185e:	2106      	movs	r1, #6
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f816 	bl	8001892 <UART_EventCallback>
		}

		if( SRreg & ( 1 << UART_SR_NF) )
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <UART_IRQHandling+0x1e6>
		{
			UART_EventCallback(pUARTHandle,UART_EVENT_NF);
 8001870:	2108      	movs	r1, #8
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f80d 	bl	8001892 <UART_EventCallback>
		}

		if(SRreg & ( 1 << UART_SR_ORE) )
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	f003 0308 	and.w	r3, r3, #8
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <UART_IRQHandling+0x1f8>
		{
			UART_EventCallback(pUARTHandle,UART_EVENT_ORE);
 8001882:	2105      	movs	r1, #5
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f000 f804 	bl	8001892 <UART_EventCallback>
		}
	}


}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <UART_EventCallback>:
 *
 * @Note              -

 */
__weak void UART_EventCallback(UART_Handle_t *pUARTHandle, UART_Events_t Event)
{
 8001892:	b480      	push	{r7}
 8001894:	b083      	sub	sp, #12
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
 800189a:	460b      	mov	r3, r1
 800189c:	70fb      	strb	r3, [r7, #3]
	__NOP();
 800189e:	bf00      	nop

}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <__assert_func>:

void
__attribute__((noreturn))
__assert_func (const char *file, int line, const char *func,
               const char *failedexpr)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af02      	add	r7, sp, #8
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	603b      	str	r3, [r7, #0]
#define SEMIHOSTING
#ifdef SEMIHOSTING
	printf("assertion \"%s\" failed: file \"%s\", line %d%s%s\n",
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <__assert_func+0x18>
 80018c0:	4a09      	ldr	r2, [pc, #36]	; (80018e8 <__assert_func+0x3c>)
 80018c2:	e000      	b.n	80018c6 <__assert_func+0x1a>
 80018c4:	4a09      	ldr	r2, [pc, #36]	; (80018ec <__assert_func+0x40>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <__assert_func+0x24>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	e000      	b.n	80018d2 <__assert_func+0x26>
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <__assert_func+0x40>)
 80018d2:	9301      	str	r3, [sp, #4]
 80018d4:	9200      	str	r2, [sp, #0]
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	6839      	ldr	r1, [r7, #0]
 80018dc:	4804      	ldr	r0, [pc, #16]	; (80018f0 <__assert_func+0x44>)
 80018de:	f000 fda3 	bl	8002428 <iprintf>
                failedexpr, file, line, func ? ", function: " : "",
                func ? func : "");
#endif


	abort ();
 80018e2:	f000 fc43 	bl	800216c <abort>
 80018e6:	bf00      	nop
 80018e8:	0800326c 	.word	0x0800326c
 80018ec:	0800327c 	.word	0x0800327c
 80018f0:	08003280 	.word	0x08003280

080018f4 <main>:

/*
 * START PROGRAM
 */
int main()
{
 80018f4:	b598      	push	{r3, r4, r7, lr}
 80018f6:	af00      	add	r7, sp, #0


	initialise_monitor_handles();
 80018f8:	f000 fbbe 	bl	8002078 <initialise_monitor_handles>

	printf("Program starting\n");
 80018fc:	4825      	ldr	r0, [pc, #148]	; (8001994 <main+0xa0>)
 80018fe:	f000 fe07 	bl	8002510 <puts>

	SysTickInit();
 8001902:	f7fe fcdd 	bl	80002c0 <SysTickInit>
	GPIO_Conf();
 8001906:	f000 f905 	bl	8001b14 <GPIO_Conf>
	SPI_Conf();
 800190a:	f000 f8fb 	bl	8001b04 <SPI_Conf>
	UART_Conf(&pUART2);
 800190e:	4822      	ldr	r0, [pc, #136]	; (8001998 <main+0xa4>)
 8001910:	f000 f8b8 	bl	8001a84 <UART_Conf>


	pUART2.pTxBuffer = (uint8_t*)"Program Starting\r\n";
 8001914:	4b20      	ldr	r3, [pc, #128]	; (8001998 <main+0xa4>)
 8001916:	4a21      	ldr	r2, [pc, #132]	; (800199c <main+0xa8>)
 8001918:	61da      	str	r2, [r3, #28]
	pUART2.TxLen = strlen((char*)pUART2.pTxBuffer);
 800191a:	4b1f      	ldr	r3, [pc, #124]	; (8001998 <main+0xa4>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fc76 	bl	8000210 <strlen>
 8001924:	4602      	mov	r2, r0
 8001926:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <main+0xa4>)
 8001928:	625a      	str	r2, [r3, #36]	; 0x24
	UART_SendData(&pUART2);
 800192a:	481b      	ldr	r0, [pc, #108]	; (8001998 <main+0xa4>)
 800192c:	f7ff fca6 	bl	800127c <UART_SendData>

	UART_IRQInterruptConfig(USART2_IRQn, ENABLE);
 8001930:	2101      	movs	r1, #1
 8001932:	2026      	movs	r0, #38	; 0x26
 8001934:	f7ff fd52 	bl	80013dc <UART_IRQInterruptConfig>
	UART_IRQPriorityConfig(USART2_IRQn,0);
 8001938:	2100      	movs	r1, #0
 800193a:	2026      	movs	r0, #38	; 0x26
 800193c:	f7ff fdfa 	bl	8001534 <UART_IRQPriorityConfig>

	UART_SendDataBlockIT(&pUART2,TxData, strlen((char*)TxData));
 8001940:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <main+0xac>)
 8001942:	681c      	ldr	r4, [r3, #0]
 8001944:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <main+0xac>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fc61 	bl	8000210 <strlen>
 800194e:	4603      	mov	r3, r0
 8001950:	461a      	mov	r2, r3
 8001952:	4621      	mov	r1, r4
 8001954:	4810      	ldr	r0, [pc, #64]	; (8001998 <main+0xa4>)
 8001956:	f7ff fe47 	bl	80015e8 <UART_SendDataBlockIT>


	while(1)
	{
		//UART_ReceiveBlockDataIT(&pUART2, RxData, strlen((char*)RxData));
		UART_ReceiveDataString(&pUART2, RxData);
 800195a:	4912      	ldr	r1, [pc, #72]	; (80019a4 <main+0xb0>)
 800195c:	480e      	ldr	r0, [pc, #56]	; (8001998 <main+0xa4>)
 800195e:	f7ff fcdc 	bl	800131a <UART_ReceiveDataString>
		TxData = RxData;
 8001962:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <main+0xac>)
 8001964:	4a0f      	ldr	r2, [pc, #60]	; (80019a4 <main+0xb0>)
 8001966:	601a      	str	r2, [r3, #0]
		UART_SendDataBlockIT(&pUART2,TxData, strlen((char*)TxData));
 8001968:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <main+0xac>)
 800196a:	681c      	ldr	r4, [r3, #0]
 800196c:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <main+0xac>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fc4d 	bl	8000210 <strlen>
 8001976:	4603      	mov	r3, r0
 8001978:	461a      	mov	r2, r3
 800197a:	4621      	mov	r1, r4
 800197c:	4806      	ldr	r0, [pc, #24]	; (8001998 <main+0xa4>)
 800197e:	f7ff fe33 	bl	80015e8 <UART_SendDataBlockIT>
		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_5);
 8001982:	2105      	movs	r1, #5
 8001984:	4808      	ldr	r0, [pc, #32]	; (80019a8 <main+0xb4>)
 8001986:	f7ff f83e 	bl	8000a06 <GPIO_ToggleOutputPin>
		delay_ms(100);
 800198a:	2064      	movs	r0, #100	; 0x64
 800198c:	f7fe fcea 	bl	8000364 <delay_ms>
		UART_ReceiveDataString(&pUART2, RxData);
 8001990:	e7e3      	b.n	800195a <main+0x66>
 8001992:	bf00      	nop
 8001994:	080032c0 	.word	0x080032c0
 8001998:	20000160 	.word	0x20000160
 800199c:	080032d4 	.word	0x080032d4
 80019a0:	20000014 	.word	0x20000014
 80019a4:	20000190 	.word	0x20000190
 80019a8:	40020000 	.word	0x40020000

080019ac <USART2_IRQHandler>:
	return 0;
}


void USART2_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
	UART_IRQHandling(&pUART2);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <USART2_IRQHandler+0x10>)
 80019b2:	f7ff fe6e 	bl	8001692 <UART_IRQHandling>
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000160 	.word	0x20000160

080019c0 <EXTI15_10_IRQHandler>:

/*
 * EXTI Handler
 */
void EXTI15_10_IRQHandler(void){
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
	uint8_t CMDCode = COMMAND_LED_CTRL;
 80019c6:	2350      	movs	r3, #80	; 0x50
 80019c8:	71bb      	strb	r3, [r7, #6]
	uint8_t Ack_byte = 0;
 80019ca:	2300      	movs	r3, #0
 80019cc:	717b      	strb	r3, [r7, #5]
	uint8_t Dummy_Read = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	713b      	strb	r3, [r7, #4]
	uint8_t Dummy_Write = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	71fb      	strb	r3, [r7, #7]
	uint8_t args[2] = {0};
 80019d6:	2300      	movs	r3, #0
 80019d8:	803b      	strh	r3, [r7, #0]

	GPIO_Clear_Interrupt(GPIO_PIN_13);
 80019da:	200d      	movs	r0, #13
 80019dc:	f7ff f8de 	bl	8000b9c <GPIO_Clear_Interrupt>

	SPI_PeripheralControl(ARDUINO_SPI, ENABLE);
 80019e0:	2101      	movs	r1, #1
 80019e2:	4825      	ldr	r0, [pc, #148]	; (8001a78 <EXTI15_10_IRQHandler+0xb8>)
 80019e4:	f7ff f9b6 	bl	8000d54 <SPI_PeripheralControl>

	//Send the command
	SPI_SendData(ARDUINO_SPI, &CMDCode, 1);
 80019e8:	1dbb      	adds	r3, r7, #6
 80019ea:	2201      	movs	r2, #1
 80019ec:	4619      	mov	r1, r3
 80019ee:	4822      	ldr	r0, [pc, #136]	; (8001a78 <EXTI15_10_IRQHandler+0xb8>)
 80019f0:	f7ff f9e0 	bl	8000db4 <SPI_SendData>
	printf("SPI SEND: %d\n",CMDCode);
 80019f4:	79bb      	ldrb	r3, [r7, #6]
 80019f6:	4619      	mov	r1, r3
 80019f8:	4820      	ldr	r0, [pc, #128]	; (8001a7c <EXTI15_10_IRQHandler+0xbc>)
 80019fa:	f000 fd15 	bl	8002428 <iprintf>
	//Dummy read to clean
	SPI_ReceiveData(ARDUINO_SPI, &Dummy_Read, 1);
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	2201      	movs	r2, #1
 8001a02:	4619      	mov	r1, r3
 8001a04:	481c      	ldr	r0, [pc, #112]	; (8001a78 <EXTI15_10_IRQHandler+0xb8>)
 8001a06:	f7ff f9f8 	bl	8000dfa <SPI_ReceiveData>
	printf("SPI Receive: %d\n",Dummy_Read);
 8001a0a:	793b      	ldrb	r3, [r7, #4]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	481c      	ldr	r0, [pc, #112]	; (8001a80 <EXTI15_10_IRQHandler+0xc0>)
 8001a10:	f000 fd0a 	bl	8002428 <iprintf>
	//Send the Dummy byte to shift
	SPI_SendData(ARDUINO_SPI, Dummy_Write, 1);
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	2201      	movs	r2, #1
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4817      	ldr	r0, [pc, #92]	; (8001a78 <EXTI15_10_IRQHandler+0xb8>)
 8001a1c:	f7ff f9ca 	bl	8000db4 <SPI_SendData>
	printf("SPI SEND: %d\n",Dummy_Write);
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	4619      	mov	r1, r3
 8001a24:	4815      	ldr	r0, [pc, #84]	; (8001a7c <EXTI15_10_IRQHandler+0xbc>)
 8001a26:	f000 fcff 	bl	8002428 <iprintf>
	//get the ACK
	SPI_ReceiveData(ARDUINO_SPI, &Ack_byte, 1);
 8001a2a:	1d7b      	adds	r3, r7, #5
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4811      	ldr	r0, [pc, #68]	; (8001a78 <EXTI15_10_IRQHandler+0xb8>)
 8001a32:	f7ff f9e2 	bl	8000dfa <SPI_ReceiveData>
	if ( Ack_byte == ACK)
 8001a36:	797b      	ldrb	r3, [r7, #5]
 8001a38:	2bf5      	cmp	r3, #245	; 0xf5
 8001a3a:	d10d      	bne.n	8001a58 <EXTI15_10_IRQHandler+0x98>
	{
		args[0] = 9;
 8001a3c:	2309      	movs	r3, #9
 8001a3e:	703b      	strb	r3, [r7, #0]
		args[1] = 1;
 8001a40:	2301      	movs	r3, #1
 8001a42:	707b      	strb	r3, [r7, #1]
		SPI_SendData(ARDUINO_SPI, &args, (uint32_t)strlen(args));
 8001a44:	463b      	mov	r3, r7
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7fe fbe2 	bl	8000210 <strlen>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	463b      	mov	r3, r7
 8001a50:	4619      	mov	r1, r3
 8001a52:	4809      	ldr	r0, [pc, #36]	; (8001a78 <EXTI15_10_IRQHandler+0xb8>)
 8001a54:	f7ff f9ae 	bl	8000db4 <SPI_SendData>
	}


	while(SPI_GetFlagStatus(ARDUINO_SPI, SPI_BSY_FLAG) );
 8001a58:	bf00      	nop
 8001a5a:	2180      	movs	r1, #128	; 0x80
 8001a5c:	4806      	ldr	r0, [pc, #24]	; (8001a78 <EXTI15_10_IRQHandler+0xb8>)
 8001a5e:	f7ff f995 	bl	8000d8c <SPI_GetFlagStatus>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f8      	bne.n	8001a5a <EXTI15_10_IRQHandler+0x9a>
	SPI_PeripheralControl(ARDUINO_SPI, DISABLE);
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4803      	ldr	r0, [pc, #12]	; (8001a78 <EXTI15_10_IRQHandler+0xb8>)
 8001a6c:	f7ff f972 	bl	8000d54 <SPI_PeripheralControl>

}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40013000 	.word	0x40013000
 8001a7c:	080032e8 	.word	0x080032e8
 8001a80:	080032f8 	.word	0x080032f8

08001a84 <UART_Conf>:

void UART_Conf(UART_Handle_t* _UART2Handler)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	 * Usart2
	 * TX - PA2
	 * RX - PA3
	 */
	GPIO_Handle_t _UART_Pins;
	_UART_Pins.pGPIOX = USART2_PORT;
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <UART_Conf+0x78>)
 8001a8e:	60fb      	str	r3, [r7, #12]
	_UART_Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001a90:	2302      	movs	r3, #2
 8001a92:	747b      	strb	r3, [r7, #17]
	_UART_Pins.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_AF7;
 8001a94:	2307      	movs	r3, #7
 8001a96:	757b      	strb	r3, [r7, #21]
	_UART_Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	753b      	strb	r3, [r7, #20]
	_UART_Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	74fb      	strb	r3, [r7, #19]
	_UART_Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	74bb      	strb	r3, [r7, #18]

	_UART_Pins.GPIO_PinConfig.GPIO_PinNumber = USART2_TX_PIN;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&_UART_Pins);
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fd3d 	bl	800052c <GPIO_Init>

	_UART_Pins.GPIO_PinConfig.GPIO_PinNumber = USART2_RX_PIN;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&_UART_Pins);
 8001ab6:	f107 030c 	add.w	r3, r7, #12
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fd36 	bl	800052c <GPIO_Init>


	_UART2Handler->pUARTx = UART2;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <UART_Conf+0x7c>)
 8001ac4:	601a      	str	r2, [r3, #0]
	_UART2Handler->UARTConfig.USART_BaudRate = UART_BAUDRATE_9600;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001acc:	609a      	str	r2, [r3, #8]
	_UART2Handler->UARTConfig.USART_HWFlowControl = UART_FLOWCONTROL_NONE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	619a      	str	r2, [r3, #24]
	_UART2Handler->UARTConfig.USART_Mode = UART_MODE_TXRX;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	605a      	str	r2, [r3, #4]
	_UART2Handler->UARTConfig.USART_Parity = UART_PARITY_DISABLE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	615a      	str	r2, [r3, #20]
	_UART2Handler->UARTConfig.USART_StopBits = UART_STOPBITS_1;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
	_UART2Handler->UARTConfig.USART_WordLength = UART_FLOWCONTROL_NONE;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
	UART_Init(_UART2Handler);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f7ff fa55 	bl	8000f9c <UART_Init>





}
 8001af2:	bf00      	nop
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40020000 	.word	0x40020000
 8001b00:	40004400 	.word	0x40004400

08001b04 <SPI_Conf>:

void SPI_Conf(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
	 */
	SPI_Config_SSOE(SPI1,ENABLE);

#endif

}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <GPIO_Conf>:



void GPIO_Conf(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
	/*
	 * Configure LED
	 * **If SPI is ON PA5 isn't available
	 */

	_GPIOA.pGPIOX = GPIOA;
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <GPIO_Conf+0x60>)
 8001b1c:	60fb      	str	r3, [r7, #12]
	_GPIOA.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8001b1e:	2305      	movs	r3, #5
 8001b20:	743b      	strb	r3, [r7, #16]
	_GPIOA.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001b22:	2301      	movs	r3, #1
 8001b24:	747b      	strb	r3, [r7, #17]
	_GPIOA.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	74bb      	strb	r3, [r7, #18]
	_GPIOA.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	753b      	strb	r3, [r7, #20]
	_GPIOA.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	74fb      	strb	r3, [r7, #19]
	//GPIO_PeriClockControl(GPIOA, ENABLE);
	GPIO_Init(&_GPIOA);
 8001b32:	f107 030c 	add.w	r3, r7, #12
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fcf8 	bl	800052c <GPIO_Init>
#endif
	/*
	 * Configure Button
	 */
	_GPIOC.pGPIOX = GPIOC;
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <GPIO_Conf+0x64>)
 8001b3e:	603b      	str	r3, [r7, #0]
	_GPIOC.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8001b40:	230d      	movs	r3, #13
 8001b42:	713b      	strb	r3, [r7, #4]
	_GPIOC.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8001b44:	2305      	movs	r3, #5
 8001b46:	717b      	strb	r3, [r7, #5]
	_GPIOC.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	71bb      	strb	r3, [r7, #6]
	_GPIOC.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	723b      	strb	r3, [r7, #8]
	_GPIOC.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001b50:	2300      	movs	r3, #0
 8001b52:	71fb      	strb	r3, [r7, #7]
	//GPIO_PeriClockControl(GPIOC, ENABLE);
	GPIO_Init(&_GPIOC);
 8001b54:	463b      	mov	r3, r7
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fce8 	bl	800052c <GPIO_Init>

	//Button interrupt
	GPIO_IRQInterruptConfig(EXTI15_10_IRQn,ENABLE);
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	2028      	movs	r0, #40	; 0x28
 8001b60:	f7fe ff70 	bl	8000a44 <GPIO_IRQInterruptConfig>
	GPIO_IRQPriorityConfig(EXTI15_10_IRQn,1);
 8001b64:	2101      	movs	r1, #1
 8001b66:	2028      	movs	r0, #40	; 0x28
 8001b68:	f7fe fff4 	bl	8000b54 <GPIO_IRQPriorityConfig>




}
 8001b6c:	bf00      	nop
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40020800 	.word	0x40020800

08001b7c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b7c:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b7e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b80:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b82:	490e      	ldr	r1, [pc, #56]	; (8001bbc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b84:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <LoopForever+0xe>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b88:	e002      	b.n	8001b90 <LoopCopyDataInit>

08001b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8e:	3304      	adds	r3, #4

08001b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b94:	d3f9      	bcc.n	8001b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b96:	4a0b      	ldr	r2, [pc, #44]	; (8001bc4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b98:	4c0b      	ldr	r4, [pc, #44]	; (8001bc8 <LoopForever+0x16>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b9c:	e001      	b.n	8001ba2 <LoopFillZerobss>

08001b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba0:	3204      	adds	r2, #4

08001ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba4:	d3fb      	bcc.n	8001b9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001ba6:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001baa:	f000 fbb7 	bl	800231c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bae:	f7ff fea1 	bl	80018f4 <main>

08001bb2 <LoopForever>:

LoopForever:
    b LoopForever
 8001bb2:	e7fe      	b.n	8001bb2 <LoopForever>
  ldr   r0, =_estack
 8001bb4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bbc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001bc0:	080033c4 	.word	0x080033c4
  ldr r2, =_sbss
 8001bc4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001bc8:	200001f8 	.word	0x200001f8

08001bcc <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bcc:	e7fe      	b.n	8001bcc <ADC_IRQHandler>
	...

08001bd0 <findslot>:
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	; (8001bfc <findslot+0x2c>)
 8001bd2:	b510      	push	{r4, lr}
 8001bd4:	4604      	mov	r4, r0
 8001bd6:	6818      	ldr	r0, [r3, #0]
 8001bd8:	b118      	cbz	r0, 8001be2 <findslot+0x12>
 8001bda:	6983      	ldr	r3, [r0, #24]
 8001bdc:	b90b      	cbnz	r3, 8001be2 <findslot+0x12>
 8001bde:	f000 fb13 	bl	8002208 <__sinit>
 8001be2:	2c13      	cmp	r4, #19
 8001be4:	d807      	bhi.n	8001bf6 <findslot+0x26>
 8001be6:	4806      	ldr	r0, [pc, #24]	; (8001c00 <findslot+0x30>)
 8001be8:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001bec:	3301      	adds	r3, #1
 8001bee:	d002      	beq.n	8001bf6 <findslot+0x26>
 8001bf0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001bf4:	bd10      	pop	{r4, pc}
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	e7fc      	b.n	8001bf4 <findslot+0x24>
 8001bfa:	bf00      	nop
 8001bfc:	20000024 	.word	0x20000024
 8001c00:	200000b4 	.word	0x200000b4

08001c04 <checkerror>:
 8001c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c06:	1c43      	adds	r3, r0, #1
 8001c08:	4605      	mov	r5, r0
 8001c0a:	d109      	bne.n	8001c20 <checkerror+0x1c>
 8001c0c:	f000 fab6 	bl	800217c <__errno>
 8001c10:	2413      	movs	r4, #19
 8001c12:	4606      	mov	r6, r0
 8001c14:	2700      	movs	r7, #0
 8001c16:	4620      	mov	r0, r4
 8001c18:	4639      	mov	r1, r7
 8001c1a:	beab      	bkpt	0x00ab
 8001c1c:	4604      	mov	r4, r0
 8001c1e:	6034      	str	r4, [r6, #0]
 8001c20:	4628      	mov	r0, r5
 8001c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001c24 <error>:
 8001c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c26:	4605      	mov	r5, r0
 8001c28:	f000 faa8 	bl	800217c <__errno>
 8001c2c:	2413      	movs	r4, #19
 8001c2e:	4606      	mov	r6, r0
 8001c30:	2700      	movs	r7, #0
 8001c32:	4620      	mov	r0, r4
 8001c34:	4639      	mov	r1, r7
 8001c36:	beab      	bkpt	0x00ab
 8001c38:	4604      	mov	r4, r0
 8001c3a:	6034      	str	r4, [r6, #0]
 8001c3c:	4628      	mov	r0, r5
 8001c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001c40 <_swiread>:
 8001c40:	b530      	push	{r4, r5, lr}
 8001c42:	b085      	sub	sp, #20
 8001c44:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001c48:	9203      	str	r2, [sp, #12]
 8001c4a:	2406      	movs	r4, #6
 8001c4c:	ad01      	add	r5, sp, #4
 8001c4e:	4620      	mov	r0, r4
 8001c50:	4629      	mov	r1, r5
 8001c52:	beab      	bkpt	0x00ab
 8001c54:	4604      	mov	r4, r0
 8001c56:	4620      	mov	r0, r4
 8001c58:	f7ff ffd4 	bl	8001c04 <checkerror>
 8001c5c:	b005      	add	sp, #20
 8001c5e:	bd30      	pop	{r4, r5, pc}

08001c60 <_read>:
 8001c60:	b570      	push	{r4, r5, r6, lr}
 8001c62:	460e      	mov	r6, r1
 8001c64:	4615      	mov	r5, r2
 8001c66:	f7ff ffb3 	bl	8001bd0 <findslot>
 8001c6a:	4604      	mov	r4, r0
 8001c6c:	b930      	cbnz	r0, 8001c7c <_read+0x1c>
 8001c6e:	f000 fa85 	bl	800217c <__errno>
 8001c72:	2309      	movs	r3, #9
 8001c74:	6003      	str	r3, [r0, #0]
 8001c76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c7a:	bd70      	pop	{r4, r5, r6, pc}
 8001c7c:	462a      	mov	r2, r5
 8001c7e:	4631      	mov	r1, r6
 8001c80:	6800      	ldr	r0, [r0, #0]
 8001c82:	f7ff ffdd 	bl	8001c40 <_swiread>
 8001c86:	1c43      	adds	r3, r0, #1
 8001c88:	bf1f      	itttt	ne
 8001c8a:	6863      	ldrne	r3, [r4, #4]
 8001c8c:	1a28      	subne	r0, r5, r0
 8001c8e:	181b      	addne	r3, r3, r0
 8001c90:	6063      	strne	r3, [r4, #4]
 8001c92:	e7f2      	b.n	8001c7a <_read+0x1a>

08001c94 <_swilseek>:
 8001c94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c96:	460c      	mov	r4, r1
 8001c98:	4616      	mov	r6, r2
 8001c9a:	f7ff ff99 	bl	8001bd0 <findslot>
 8001c9e:	4605      	mov	r5, r0
 8001ca0:	b940      	cbnz	r0, 8001cb4 <_swilseek+0x20>
 8001ca2:	f000 fa6b 	bl	800217c <__errno>
 8001ca6:	2309      	movs	r3, #9
 8001ca8:	6003      	str	r3, [r0, #0]
 8001caa:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001cae:	4620      	mov	r0, r4
 8001cb0:	b003      	add	sp, #12
 8001cb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cb4:	2e02      	cmp	r6, #2
 8001cb6:	d903      	bls.n	8001cc0 <_swilseek+0x2c>
 8001cb8:	f000 fa60 	bl	800217c <__errno>
 8001cbc:	2316      	movs	r3, #22
 8001cbe:	e7f3      	b.n	8001ca8 <_swilseek+0x14>
 8001cc0:	2e01      	cmp	r6, #1
 8001cc2:	d112      	bne.n	8001cea <_swilseek+0x56>
 8001cc4:	6843      	ldr	r3, [r0, #4]
 8001cc6:	18e4      	adds	r4, r4, r3
 8001cc8:	d4f6      	bmi.n	8001cb8 <_swilseek+0x24>
 8001cca:	682b      	ldr	r3, [r5, #0]
 8001ccc:	260a      	movs	r6, #10
 8001cce:	e9cd 3400 	strd	r3, r4, [sp]
 8001cd2:	466f      	mov	r7, sp
 8001cd4:	4630      	mov	r0, r6
 8001cd6:	4639      	mov	r1, r7
 8001cd8:	beab      	bkpt	0x00ab
 8001cda:	4606      	mov	r6, r0
 8001cdc:	4630      	mov	r0, r6
 8001cde:	f7ff ff91 	bl	8001c04 <checkerror>
 8001ce2:	2800      	cmp	r0, #0
 8001ce4:	dbe1      	blt.n	8001caa <_swilseek+0x16>
 8001ce6:	606c      	str	r4, [r5, #4]
 8001ce8:	e7e1      	b.n	8001cae <_swilseek+0x1a>
 8001cea:	2e02      	cmp	r6, #2
 8001cec:	d1ed      	bne.n	8001cca <_swilseek+0x36>
 8001cee:	af02      	add	r7, sp, #8
 8001cf0:	6803      	ldr	r3, [r0, #0]
 8001cf2:	f847 3d08 	str.w	r3, [r7, #-8]!
 8001cf6:	260c      	movs	r6, #12
 8001cf8:	4630      	mov	r0, r6
 8001cfa:	4639      	mov	r1, r7
 8001cfc:	beab      	bkpt	0x00ab
 8001cfe:	4606      	mov	r6, r0
 8001d00:	4630      	mov	r0, r6
 8001d02:	f7ff ff7f 	bl	8001c04 <checkerror>
 8001d06:	1c43      	adds	r3, r0, #1
 8001d08:	d0cf      	beq.n	8001caa <_swilseek+0x16>
 8001d0a:	4404      	add	r4, r0
 8001d0c:	e7dd      	b.n	8001cca <_swilseek+0x36>

08001d0e <_lseek>:
 8001d0e:	f7ff bfc1 	b.w	8001c94 <_swilseek>

08001d12 <_swiwrite>:
 8001d12:	b530      	push	{r4, r5, lr}
 8001d14:	b085      	sub	sp, #20
 8001d16:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001d1a:	9203      	str	r2, [sp, #12]
 8001d1c:	2405      	movs	r4, #5
 8001d1e:	ad01      	add	r5, sp, #4
 8001d20:	4620      	mov	r0, r4
 8001d22:	4629      	mov	r1, r5
 8001d24:	beab      	bkpt	0x00ab
 8001d26:	4604      	mov	r4, r0
 8001d28:	4620      	mov	r0, r4
 8001d2a:	f7ff ff6b 	bl	8001c04 <checkerror>
 8001d2e:	b005      	add	sp, #20
 8001d30:	bd30      	pop	{r4, r5, pc}

08001d32 <_write>:
 8001d32:	b570      	push	{r4, r5, r6, lr}
 8001d34:	460e      	mov	r6, r1
 8001d36:	4615      	mov	r5, r2
 8001d38:	f7ff ff4a 	bl	8001bd0 <findslot>
 8001d3c:	4604      	mov	r4, r0
 8001d3e:	b930      	cbnz	r0, 8001d4e <_write+0x1c>
 8001d40:	f000 fa1c 	bl	800217c <__errno>
 8001d44:	2309      	movs	r3, #9
 8001d46:	6003      	str	r3, [r0, #0]
 8001d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d4c:	bd70      	pop	{r4, r5, r6, pc}
 8001d4e:	462a      	mov	r2, r5
 8001d50:	4631      	mov	r1, r6
 8001d52:	6800      	ldr	r0, [r0, #0]
 8001d54:	f7ff ffdd 	bl	8001d12 <_swiwrite>
 8001d58:	1e02      	subs	r2, r0, #0
 8001d5a:	dbf5      	blt.n	8001d48 <_write+0x16>
 8001d5c:	6863      	ldr	r3, [r4, #4]
 8001d5e:	1aa8      	subs	r0, r5, r2
 8001d60:	4403      	add	r3, r0
 8001d62:	42aa      	cmp	r2, r5
 8001d64:	6063      	str	r3, [r4, #4]
 8001d66:	d1f1      	bne.n	8001d4c <_write+0x1a>
 8001d68:	2000      	movs	r0, #0
 8001d6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001d6e:	f7ff bf59 	b.w	8001c24 <error>

08001d72 <_swiclose>:
 8001d72:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001d74:	ad02      	add	r5, sp, #8
 8001d76:	2402      	movs	r4, #2
 8001d78:	f845 0d04 	str.w	r0, [r5, #-4]!
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	4629      	mov	r1, r5
 8001d80:	beab      	bkpt	0x00ab
 8001d82:	4604      	mov	r4, r0
 8001d84:	4620      	mov	r0, r4
 8001d86:	f7ff ff3d 	bl	8001c04 <checkerror>
 8001d8a:	b003      	add	sp, #12
 8001d8c:	bd30      	pop	{r4, r5, pc}
	...

08001d90 <_close>:
 8001d90:	b538      	push	{r3, r4, r5, lr}
 8001d92:	4605      	mov	r5, r0
 8001d94:	f7ff ff1c 	bl	8001bd0 <findslot>
 8001d98:	4604      	mov	r4, r0
 8001d9a:	b930      	cbnz	r0, 8001daa <_close+0x1a>
 8001d9c:	f000 f9ee 	bl	800217c <__errno>
 8001da0:	2309      	movs	r3, #9
 8001da2:	6003      	str	r3, [r0, #0]
 8001da4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001da8:	bd38      	pop	{r3, r4, r5, pc}
 8001daa:	3d01      	subs	r5, #1
 8001dac:	2d01      	cmp	r5, #1
 8001dae:	d809      	bhi.n	8001dc4 <_close+0x34>
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <_close+0x48>)
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d104      	bne.n	8001dc4 <_close+0x34>
 8001dba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dbe:	6003      	str	r3, [r0, #0]
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	e7f1      	b.n	8001da8 <_close+0x18>
 8001dc4:	6820      	ldr	r0, [r4, #0]
 8001dc6:	f7ff ffd4 	bl	8001d72 <_swiclose>
 8001dca:	2800      	cmp	r0, #0
 8001dcc:	d1ec      	bne.n	8001da8 <_close+0x18>
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dd2:	6023      	str	r3, [r4, #0]
 8001dd4:	e7e8      	b.n	8001da8 <_close+0x18>
 8001dd6:	bf00      	nop
 8001dd8:	200000b4 	.word	0x200000b4

08001ddc <_getpid>:
 8001ddc:	2001      	movs	r0, #1
 8001dde:	4770      	bx	lr

08001de0 <_sbrk>:
 8001de0:	4b0d      	ldr	r3, [pc, #52]	; (8001e18 <_sbrk+0x38>)
 8001de2:	6819      	ldr	r1, [r3, #0]
 8001de4:	b510      	push	{r4, lr}
 8001de6:	4602      	mov	r2, r0
 8001de8:	b909      	cbnz	r1, 8001dee <_sbrk+0xe>
 8001dea:	490c      	ldr	r1, [pc, #48]	; (8001e1c <_sbrk+0x3c>)
 8001dec:	6019      	str	r1, [r3, #0]
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	4669      	mov	r1, sp
 8001df2:	4402      	add	r2, r0
 8001df4:	428a      	cmp	r2, r1
 8001df6:	d806      	bhi.n	8001e06 <_sbrk+0x26>
 8001df8:	4909      	ldr	r1, [pc, #36]	; (8001e20 <_sbrk+0x40>)
 8001dfa:	4c0a      	ldr	r4, [pc, #40]	; (8001e24 <_sbrk+0x44>)
 8001dfc:	6809      	ldr	r1, [r1, #0]
 8001dfe:	42a1      	cmp	r1, r4
 8001e00:	d008      	beq.n	8001e14 <_sbrk+0x34>
 8001e02:	428a      	cmp	r2, r1
 8001e04:	d906      	bls.n	8001e14 <_sbrk+0x34>
 8001e06:	f000 f9b9 	bl	800217c <__errno>
 8001e0a:	230c      	movs	r3, #12
 8001e0c:	6003      	str	r3, [r0, #0]
 8001e0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e12:	bd10      	pop	{r4, pc}
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	e7fc      	b.n	8001e12 <_sbrk+0x32>
 8001e18:	200000a4 	.word	0x200000a4
 8001e1c:	200001f8 	.word	0x200001f8
 8001e20:	20000018 	.word	0x20000018
 8001e24:	cafedead 	.word	0xcafedead

08001e28 <_swistat>:
 8001e28:	b570      	push	{r4, r5, r6, lr}
 8001e2a:	460c      	mov	r4, r1
 8001e2c:	f7ff fed0 	bl	8001bd0 <findslot>
 8001e30:	4606      	mov	r6, r0
 8001e32:	b930      	cbnz	r0, 8001e42 <_swistat+0x1a>
 8001e34:	f000 f9a2 	bl	800217c <__errno>
 8001e38:	2309      	movs	r3, #9
 8001e3a:	6003      	str	r3, [r0, #0]
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e40:	bd70      	pop	{r4, r5, r6, pc}
 8001e42:	6863      	ldr	r3, [r4, #4]
 8001e44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e48:	6063      	str	r3, [r4, #4]
 8001e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e4e:	6463      	str	r3, [r4, #68]	; 0x44
 8001e50:	250c      	movs	r5, #12
 8001e52:	4628      	mov	r0, r5
 8001e54:	4631      	mov	r1, r6
 8001e56:	beab      	bkpt	0x00ab
 8001e58:	4605      	mov	r5, r0
 8001e5a:	4628      	mov	r0, r5
 8001e5c:	f7ff fed2 	bl	8001c04 <checkerror>
 8001e60:	1c43      	adds	r3, r0, #1
 8001e62:	bf1c      	itt	ne
 8001e64:	6120      	strne	r0, [r4, #16]
 8001e66:	2000      	movne	r0, #0
 8001e68:	e7ea      	b.n	8001e40 <_swistat+0x18>

08001e6a <_fstat>:
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	b510      	push	{r4, lr}
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4604      	mov	r4, r0
 8001e72:	2258      	movs	r2, #88	; 0x58
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 fa75 	bl	8002364 <memset>
 8001e7a:	4601      	mov	r1, r0
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e82:	f7ff bfd1 	b.w	8001e28 <_swistat>

08001e86 <_stat>:
 8001e86:	b538      	push	{r3, r4, r5, lr}
 8001e88:	460d      	mov	r5, r1
 8001e8a:	4604      	mov	r4, r0
 8001e8c:	2258      	movs	r2, #88	; 0x58
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4628      	mov	r0, r5
 8001e92:	f000 fa67 	bl	8002364 <memset>
 8001e96:	4620      	mov	r0, r4
 8001e98:	2100      	movs	r1, #0
 8001e9a:	f000 f811 	bl	8001ec0 <_swiopen>
 8001e9e:	1c43      	adds	r3, r0, #1
 8001ea0:	4604      	mov	r4, r0
 8001ea2:	d00b      	beq.n	8001ebc <_stat+0x36>
 8001ea4:	686b      	ldr	r3, [r5, #4]
 8001ea6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8001eaa:	606b      	str	r3, [r5, #4]
 8001eac:	4629      	mov	r1, r5
 8001eae:	f7ff ffbb 	bl	8001e28 <_swistat>
 8001eb2:	4605      	mov	r5, r0
 8001eb4:	4620      	mov	r0, r4
 8001eb6:	f7ff ff6b 	bl	8001d90 <_close>
 8001eba:	462c      	mov	r4, r5
 8001ebc:	4620      	mov	r0, r4
 8001ebe:	bd38      	pop	{r3, r4, r5, pc}

08001ec0 <_swiopen>:
 8001ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ec4:	4b2b      	ldr	r3, [pc, #172]	; (8001f74 <_swiopen+0xb4>)
 8001ec6:	b096      	sub	sp, #88	; 0x58
 8001ec8:	4682      	mov	sl, r0
 8001eca:	460e      	mov	r6, r1
 8001ecc:	2500      	movs	r5, #0
 8001ece:	4698      	mov	r8, r3
 8001ed0:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8001ed4:	1c61      	adds	r1, r4, #1
 8001ed6:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 8001eda:	d036      	beq.n	8001f4a <_swiopen+0x8a>
 8001edc:	3501      	adds	r5, #1
 8001ede:	2d14      	cmp	r5, #20
 8001ee0:	d1f6      	bne.n	8001ed0 <_swiopen+0x10>
 8001ee2:	f000 f94b 	bl	800217c <__errno>
 8001ee6:	2318      	movs	r3, #24
 8001ee8:	6003      	str	r3, [r0, #0]
 8001eea:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001eee:	e03c      	b.n	8001f6a <_swiopen+0xaa>
 8001ef0:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8001ef4:	f240 6301 	movw	r3, #1537	; 0x601
 8001ef8:	07b2      	lsls	r2, r6, #30
 8001efa:	bf48      	it	mi
 8001efc:	f044 0402 	orrmi.w	r4, r4, #2
 8001f00:	421e      	tst	r6, r3
 8001f02:	bf18      	it	ne
 8001f04:	f044 0404 	orrne.w	r4, r4, #4
 8001f08:	0733      	lsls	r3, r6, #28
 8001f0a:	bf48      	it	mi
 8001f0c:	f024 0404 	bicmi.w	r4, r4, #4
 8001f10:	4650      	mov	r0, sl
 8001f12:	bf48      	it	mi
 8001f14:	f044 0408 	orrmi.w	r4, r4, #8
 8001f18:	f8cd a000 	str.w	sl, [sp]
 8001f1c:	f7fe f978 	bl	8000210 <strlen>
 8001f20:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8001f24:	2401      	movs	r4, #1
 8001f26:	4620      	mov	r0, r4
 8001f28:	4649      	mov	r1, r9
 8001f2a:	beab      	bkpt	0x00ab
 8001f2c:	4604      	mov	r4, r0
 8001f2e:	2c00      	cmp	r4, #0
 8001f30:	db06      	blt.n	8001f40 <_swiopen+0x80>
 8001f32:	4447      	add	r7, r8
 8001f34:	2300      	movs	r3, #0
 8001f36:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	462c      	mov	r4, r5
 8001f3e:	e014      	b.n	8001f6a <_swiopen+0xaa>
 8001f40:	4620      	mov	r0, r4
 8001f42:	f7ff fe6f 	bl	8001c24 <error>
 8001f46:	4604      	mov	r4, r0
 8001f48:	e00f      	b.n	8001f6a <_swiopen+0xaa>
 8001f4a:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8001f4e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001f52:	46e9      	mov	r9, sp
 8001f54:	d1cc      	bne.n	8001ef0 <_swiopen+0x30>
 8001f56:	4649      	mov	r1, r9
 8001f58:	4650      	mov	r0, sl
 8001f5a:	f7ff ff94 	bl	8001e86 <_stat>
 8001f5e:	3001      	adds	r0, #1
 8001f60:	d0c6      	beq.n	8001ef0 <_swiopen+0x30>
 8001f62:	f000 f90b 	bl	800217c <__errno>
 8001f66:	2311      	movs	r3, #17
 8001f68:	6003      	str	r3, [r0, #0]
 8001f6a:	4620      	mov	r0, r4
 8001f6c:	b016      	add	sp, #88	; 0x58
 8001f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f72:	bf00      	nop
 8001f74:	200000b4 	.word	0x200000b4

08001f78 <_get_semihosting_exts>:
 8001f78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001f7c:	4607      	mov	r7, r0
 8001f7e:	4688      	mov	r8, r1
 8001f80:	4829      	ldr	r0, [pc, #164]	; (8002028 <_get_semihosting_exts+0xb0>)
 8001f82:	2100      	movs	r1, #0
 8001f84:	4615      	mov	r5, r2
 8001f86:	f7ff ff9b 	bl	8001ec0 <_swiopen>
 8001f8a:	462a      	mov	r2, r5
 8001f8c:	4604      	mov	r4, r0
 8001f8e:	2100      	movs	r1, #0
 8001f90:	4638      	mov	r0, r7
 8001f92:	f000 f9e7 	bl	8002364 <memset>
 8001f96:	1c63      	adds	r3, r4, #1
 8001f98:	d015      	beq.n	8001fc6 <_get_semihosting_exts+0x4e>
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	f7ff fe18 	bl	8001bd0 <findslot>
 8001fa0:	260c      	movs	r6, #12
 8001fa2:	4681      	mov	r9, r0
 8001fa4:	4630      	mov	r0, r6
 8001fa6:	4649      	mov	r1, r9
 8001fa8:	beab      	bkpt	0x00ab
 8001faa:	4606      	mov	r6, r0
 8001fac:	4630      	mov	r0, r6
 8001fae:	f7ff fe29 	bl	8001c04 <checkerror>
 8001fb2:	2803      	cmp	r0, #3
 8001fb4:	dd02      	ble.n	8001fbc <_get_semihosting_exts+0x44>
 8001fb6:	3803      	subs	r0, #3
 8001fb8:	42a8      	cmp	r0, r5
 8001fba:	dc08      	bgt.n	8001fce <_get_semihosting_exts+0x56>
 8001fbc:	4620      	mov	r0, r4
 8001fbe:	f7ff fee7 	bl	8001d90 <_close>
 8001fc2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001fc6:	4620      	mov	r0, r4
 8001fc8:	b003      	add	sp, #12
 8001fca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001fce:	2204      	movs	r2, #4
 8001fd0:	eb0d 0102 	add.w	r1, sp, r2
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f7ff fe43 	bl	8001c60 <_read>
 8001fda:	2803      	cmp	r0, #3
 8001fdc:	ddee      	ble.n	8001fbc <_get_semihosting_exts+0x44>
 8001fde:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001fe2:	2b53      	cmp	r3, #83	; 0x53
 8001fe4:	d1ea      	bne.n	8001fbc <_get_semihosting_exts+0x44>
 8001fe6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001fea:	2b48      	cmp	r3, #72	; 0x48
 8001fec:	d1e6      	bne.n	8001fbc <_get_semihosting_exts+0x44>
 8001fee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8001ff2:	2b46      	cmp	r3, #70	; 0x46
 8001ff4:	d1e2      	bne.n	8001fbc <_get_semihosting_exts+0x44>
 8001ff6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ffa:	2b42      	cmp	r3, #66	; 0x42
 8001ffc:	d1de      	bne.n	8001fbc <_get_semihosting_exts+0x44>
 8001ffe:	2201      	movs	r2, #1
 8002000:	4641      	mov	r1, r8
 8002002:	4620      	mov	r0, r4
 8002004:	f7ff fe46 	bl	8001c94 <_swilseek>
 8002008:	2800      	cmp	r0, #0
 800200a:	dbd7      	blt.n	8001fbc <_get_semihosting_exts+0x44>
 800200c:	462a      	mov	r2, r5
 800200e:	4639      	mov	r1, r7
 8002010:	4620      	mov	r0, r4
 8002012:	f7ff fe25 	bl	8001c60 <_read>
 8002016:	4605      	mov	r5, r0
 8002018:	4620      	mov	r0, r4
 800201a:	f7ff feb9 	bl	8001d90 <_close>
 800201e:	4628      	mov	r0, r5
 8002020:	f7ff fdf0 	bl	8001c04 <checkerror>
 8002024:	4604      	mov	r4, r0
 8002026:	e7ce      	b.n	8001fc6 <_get_semihosting_exts+0x4e>
 8002028:	08003309 	.word	0x08003309

0800202c <initialise_semihosting_exts>:
 800202c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800202e:	4d0a      	ldr	r5, [pc, #40]	; (8002058 <initialise_semihosting_exts+0x2c>)
 8002030:	4c0a      	ldr	r4, [pc, #40]	; (800205c <initialise_semihosting_exts+0x30>)
 8002032:	2100      	movs	r1, #0
 8002034:	2201      	movs	r2, #1
 8002036:	a801      	add	r0, sp, #4
 8002038:	6029      	str	r1, [r5, #0]
 800203a:	6022      	str	r2, [r4, #0]
 800203c:	f7ff ff9c 	bl	8001f78 <_get_semihosting_exts>
 8002040:	2800      	cmp	r0, #0
 8002042:	dd07      	ble.n	8002054 <initialise_semihosting_exts+0x28>
 8002044:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002048:	f003 0201 	and.w	r2, r3, #1
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	602a      	str	r2, [r5, #0]
 8002052:	6023      	str	r3, [r4, #0]
 8002054:	b003      	add	sp, #12
 8002056:	bd30      	pop	{r4, r5, pc}
 8002058:	2000001c 	.word	0x2000001c
 800205c:	20000020 	.word	0x20000020

08002060 <_has_ext_stdout_stderr>:
 8002060:	b510      	push	{r4, lr}
 8002062:	4c04      	ldr	r4, [pc, #16]	; (8002074 <_has_ext_stdout_stderr+0x14>)
 8002064:	6822      	ldr	r2, [r4, #0]
 8002066:	2a00      	cmp	r2, #0
 8002068:	da01      	bge.n	800206e <_has_ext_stdout_stderr+0xe>
 800206a:	f7ff ffdf 	bl	800202c <initialise_semihosting_exts>
 800206e:	6820      	ldr	r0, [r4, #0]
 8002070:	bd10      	pop	{r4, pc}
 8002072:	bf00      	nop
 8002074:	20000020 	.word	0x20000020

08002078 <initialise_monitor_handles>:
 8002078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800207c:	b085      	sub	sp, #20
 800207e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002130 <initialise_monitor_handles+0xb8>
 8002082:	f8cd 9004 	str.w	r9, [sp, #4]
 8002086:	2303      	movs	r3, #3
 8002088:	2400      	movs	r4, #0
 800208a:	9303      	str	r3, [sp, #12]
 800208c:	f10d 0804 	add.w	r8, sp, #4
 8002090:	9402      	str	r4, [sp, #8]
 8002092:	2501      	movs	r5, #1
 8002094:	4628      	mov	r0, r5
 8002096:	4641      	mov	r1, r8
 8002098:	beab      	bkpt	0x00ab
 800209a:	4605      	mov	r5, r0
 800209c:	4e20      	ldr	r6, [pc, #128]	; (8002120 <initialise_monitor_handles+0xa8>)
 800209e:	4a21      	ldr	r2, [pc, #132]	; (8002124 <initialise_monitor_handles+0xac>)
 80020a0:	6035      	str	r5, [r6, #0]
 80020a2:	4623      	mov	r3, r4
 80020a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020a8:	4614      	mov	r4, r2
 80020aa:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80020ae:	3301      	adds	r3, #1
 80020b0:	2b14      	cmp	r3, #20
 80020b2:	d1fa      	bne.n	80020aa <initialise_monitor_handles+0x32>
 80020b4:	f7ff ffd4 	bl	8002060 <_has_ext_stdout_stderr>
 80020b8:	4d1b      	ldr	r5, [pc, #108]	; (8002128 <initialise_monitor_handles+0xb0>)
 80020ba:	b1d0      	cbz	r0, 80020f2 <initialise_monitor_handles+0x7a>
 80020bc:	f04f 0a03 	mov.w	sl, #3
 80020c0:	2304      	movs	r3, #4
 80020c2:	f8cd 9004 	str.w	r9, [sp, #4]
 80020c6:	2701      	movs	r7, #1
 80020c8:	f8cd a00c 	str.w	sl, [sp, #12]
 80020cc:	9302      	str	r3, [sp, #8]
 80020ce:	4638      	mov	r0, r7
 80020d0:	4641      	mov	r1, r8
 80020d2:	beab      	bkpt	0x00ab
 80020d4:	4683      	mov	fp, r0
 80020d6:	4b15      	ldr	r3, [pc, #84]	; (800212c <initialise_monitor_handles+0xb4>)
 80020d8:	f8cd 9004 	str.w	r9, [sp, #4]
 80020dc:	f8c3 b000 	str.w	fp, [r3]
 80020e0:	2308      	movs	r3, #8
 80020e2:	f8cd a00c 	str.w	sl, [sp, #12]
 80020e6:	9302      	str	r3, [sp, #8]
 80020e8:	4638      	mov	r0, r7
 80020ea:	4641      	mov	r1, r8
 80020ec:	beab      	bkpt	0x00ab
 80020ee:	4607      	mov	r7, r0
 80020f0:	602f      	str	r7, [r5, #0]
 80020f2:	682b      	ldr	r3, [r5, #0]
 80020f4:	3301      	adds	r3, #1
 80020f6:	bf02      	ittt	eq
 80020f8:	4b0c      	ldreq	r3, [pc, #48]	; (800212c <initialise_monitor_handles+0xb4>)
 80020fa:	681b      	ldreq	r3, [r3, #0]
 80020fc:	602b      	streq	r3, [r5, #0]
 80020fe:	6833      	ldr	r3, [r6, #0]
 8002100:	6023      	str	r3, [r4, #0]
 8002102:	2600      	movs	r6, #0
 8002104:	6066      	str	r6, [r4, #4]
 8002106:	f7ff ffab 	bl	8002060 <_has_ext_stdout_stderr>
 800210a:	b130      	cbz	r0, 800211a <initialise_monitor_handles+0xa2>
 800210c:	4b07      	ldr	r3, [pc, #28]	; (800212c <initialise_monitor_handles+0xb4>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002114:	682b      	ldr	r3, [r5, #0]
 8002116:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800211a:	b005      	add	sp, #20
 800211c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002120:	200000ac 	.word	0x200000ac
 8002124:	200000b4 	.word	0x200000b4
 8002128:	200000a8 	.word	0x200000a8
 800212c:	200000b0 	.word	0x200000b0
 8002130:	0800331f 	.word	0x0800331f

08002134 <_isatty>:
 8002134:	b570      	push	{r4, r5, r6, lr}
 8002136:	f7ff fd4b 	bl	8001bd0 <findslot>
 800213a:	2509      	movs	r5, #9
 800213c:	4604      	mov	r4, r0
 800213e:	b920      	cbnz	r0, 800214a <_isatty+0x16>
 8002140:	f000 f81c 	bl	800217c <__errno>
 8002144:	6005      	str	r5, [r0, #0]
 8002146:	4620      	mov	r0, r4
 8002148:	bd70      	pop	{r4, r5, r6, pc}
 800214a:	4628      	mov	r0, r5
 800214c:	4621      	mov	r1, r4
 800214e:	beab      	bkpt	0x00ab
 8002150:	4604      	mov	r4, r0
 8002152:	2c01      	cmp	r4, #1
 8002154:	d0f7      	beq.n	8002146 <_isatty+0x12>
 8002156:	f000 f811 	bl	800217c <__errno>
 800215a:	2400      	movs	r4, #0
 800215c:	4606      	mov	r6, r0
 800215e:	2513      	movs	r5, #19
 8002160:	4628      	mov	r0, r5
 8002162:	4621      	mov	r1, r4
 8002164:	beab      	bkpt	0x00ab
 8002166:	4605      	mov	r5, r0
 8002168:	6035      	str	r5, [r6, #0]
 800216a:	e7ec      	b.n	8002146 <_isatty+0x12>

0800216c <abort>:
 800216c:	b508      	push	{r3, lr}
 800216e:	2006      	movs	r0, #6
 8002170:	f000 fa0e 	bl	8002590 <raise>
 8002174:	2001      	movs	r0, #1
 8002176:	f000 ffc7 	bl	8003108 <_exit>
	...

0800217c <__errno>:
 800217c:	4b01      	ldr	r3, [pc, #4]	; (8002184 <__errno+0x8>)
 800217e:	6818      	ldr	r0, [r3, #0]
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	20000024 	.word	0x20000024

08002188 <std>:
 8002188:	2300      	movs	r3, #0
 800218a:	b510      	push	{r4, lr}
 800218c:	4604      	mov	r4, r0
 800218e:	e9c0 3300 	strd	r3, r3, [r0]
 8002192:	6083      	str	r3, [r0, #8]
 8002194:	8181      	strh	r1, [r0, #12]
 8002196:	6643      	str	r3, [r0, #100]	; 0x64
 8002198:	81c2      	strh	r2, [r0, #14]
 800219a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800219e:	6183      	str	r3, [r0, #24]
 80021a0:	4619      	mov	r1, r3
 80021a2:	2208      	movs	r2, #8
 80021a4:	305c      	adds	r0, #92	; 0x5c
 80021a6:	f000 f8dd 	bl	8002364 <memset>
 80021aa:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <std+0x38>)
 80021ac:	6263      	str	r3, [r4, #36]	; 0x24
 80021ae:	4b05      	ldr	r3, [pc, #20]	; (80021c4 <std+0x3c>)
 80021b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80021b2:	4b05      	ldr	r3, [pc, #20]	; (80021c8 <std+0x40>)
 80021b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <std+0x44>)
 80021b8:	6224      	str	r4, [r4, #32]
 80021ba:	6323      	str	r3, [r4, #48]	; 0x30
 80021bc:	bd10      	pop	{r4, pc}
 80021be:	bf00      	nop
 80021c0:	080025c9 	.word	0x080025c9
 80021c4:	080025eb 	.word	0x080025eb
 80021c8:	08002623 	.word	0x08002623
 80021cc:	08002647 	.word	0x08002647

080021d0 <_cleanup_r>:
 80021d0:	4901      	ldr	r1, [pc, #4]	; (80021d8 <_cleanup_r+0x8>)
 80021d2:	f000 b885 	b.w	80022e0 <_fwalk_reent>
 80021d6:	bf00      	nop
 80021d8:	08002921 	.word	0x08002921

080021dc <__sfmoreglue>:
 80021dc:	b570      	push	{r4, r5, r6, lr}
 80021de:	1e4a      	subs	r2, r1, #1
 80021e0:	2568      	movs	r5, #104	; 0x68
 80021e2:	4355      	muls	r5, r2
 80021e4:	460e      	mov	r6, r1
 80021e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80021ea:	f000 f8c3 	bl	8002374 <_malloc_r>
 80021ee:	4604      	mov	r4, r0
 80021f0:	b140      	cbz	r0, 8002204 <__sfmoreglue+0x28>
 80021f2:	2100      	movs	r1, #0
 80021f4:	e9c0 1600 	strd	r1, r6, [r0]
 80021f8:	300c      	adds	r0, #12
 80021fa:	60a0      	str	r0, [r4, #8]
 80021fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002200:	f000 f8b0 	bl	8002364 <memset>
 8002204:	4620      	mov	r0, r4
 8002206:	bd70      	pop	{r4, r5, r6, pc}

08002208 <__sinit>:
 8002208:	6983      	ldr	r3, [r0, #24]
 800220a:	b510      	push	{r4, lr}
 800220c:	4604      	mov	r4, r0
 800220e:	bb33      	cbnz	r3, 800225e <__sinit+0x56>
 8002210:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002214:	6503      	str	r3, [r0, #80]	; 0x50
 8002216:	4b12      	ldr	r3, [pc, #72]	; (8002260 <__sinit+0x58>)
 8002218:	4a12      	ldr	r2, [pc, #72]	; (8002264 <__sinit+0x5c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	6282      	str	r2, [r0, #40]	; 0x28
 800221e:	4298      	cmp	r0, r3
 8002220:	bf04      	itt	eq
 8002222:	2301      	moveq	r3, #1
 8002224:	6183      	streq	r3, [r0, #24]
 8002226:	f000 f81f 	bl	8002268 <__sfp>
 800222a:	6060      	str	r0, [r4, #4]
 800222c:	4620      	mov	r0, r4
 800222e:	f000 f81b 	bl	8002268 <__sfp>
 8002232:	60a0      	str	r0, [r4, #8]
 8002234:	4620      	mov	r0, r4
 8002236:	f000 f817 	bl	8002268 <__sfp>
 800223a:	2200      	movs	r2, #0
 800223c:	60e0      	str	r0, [r4, #12]
 800223e:	2104      	movs	r1, #4
 8002240:	6860      	ldr	r0, [r4, #4]
 8002242:	f7ff ffa1 	bl	8002188 <std>
 8002246:	2201      	movs	r2, #1
 8002248:	2109      	movs	r1, #9
 800224a:	68a0      	ldr	r0, [r4, #8]
 800224c:	f7ff ff9c 	bl	8002188 <std>
 8002250:	2202      	movs	r2, #2
 8002252:	2112      	movs	r1, #18
 8002254:	68e0      	ldr	r0, [r4, #12]
 8002256:	f7ff ff97 	bl	8002188 <std>
 800225a:	2301      	movs	r3, #1
 800225c:	61a3      	str	r3, [r4, #24]
 800225e:	bd10      	pop	{r4, pc}
 8002260:	08003384 	.word	0x08003384
 8002264:	080021d1 	.word	0x080021d1

08002268 <__sfp>:
 8002268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800226a:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <__sfp+0x70>)
 800226c:	681e      	ldr	r6, [r3, #0]
 800226e:	69b3      	ldr	r3, [r6, #24]
 8002270:	4607      	mov	r7, r0
 8002272:	b913      	cbnz	r3, 800227a <__sfp+0x12>
 8002274:	4630      	mov	r0, r6
 8002276:	f7ff ffc7 	bl	8002208 <__sinit>
 800227a:	3648      	adds	r6, #72	; 0x48
 800227c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002280:	3b01      	subs	r3, #1
 8002282:	d503      	bpl.n	800228c <__sfp+0x24>
 8002284:	6833      	ldr	r3, [r6, #0]
 8002286:	b133      	cbz	r3, 8002296 <__sfp+0x2e>
 8002288:	6836      	ldr	r6, [r6, #0]
 800228a:	e7f7      	b.n	800227c <__sfp+0x14>
 800228c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002290:	b16d      	cbz	r5, 80022ae <__sfp+0x46>
 8002292:	3468      	adds	r4, #104	; 0x68
 8002294:	e7f4      	b.n	8002280 <__sfp+0x18>
 8002296:	2104      	movs	r1, #4
 8002298:	4638      	mov	r0, r7
 800229a:	f7ff ff9f 	bl	80021dc <__sfmoreglue>
 800229e:	6030      	str	r0, [r6, #0]
 80022a0:	2800      	cmp	r0, #0
 80022a2:	d1f1      	bne.n	8002288 <__sfp+0x20>
 80022a4:	230c      	movs	r3, #12
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	4604      	mov	r4, r0
 80022aa:	4620      	mov	r0, r4
 80022ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <__sfp+0x74>)
 80022b0:	6665      	str	r5, [r4, #100]	; 0x64
 80022b2:	e9c4 5500 	strd	r5, r5, [r4]
 80022b6:	60a5      	str	r5, [r4, #8]
 80022b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80022bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80022c0:	2208      	movs	r2, #8
 80022c2:	4629      	mov	r1, r5
 80022c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80022c8:	f000 f84c 	bl	8002364 <memset>
 80022cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80022d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80022d4:	e7e9      	b.n	80022aa <__sfp+0x42>
 80022d6:	bf00      	nop
 80022d8:	08003384 	.word	0x08003384
 80022dc:	ffff0001 	.word	0xffff0001

080022e0 <_fwalk_reent>:
 80022e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80022e4:	4680      	mov	r8, r0
 80022e6:	4689      	mov	r9, r1
 80022e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80022ec:	2600      	movs	r6, #0
 80022ee:	b914      	cbnz	r4, 80022f6 <_fwalk_reent+0x16>
 80022f0:	4630      	mov	r0, r6
 80022f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80022f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80022fa:	3f01      	subs	r7, #1
 80022fc:	d501      	bpl.n	8002302 <_fwalk_reent+0x22>
 80022fe:	6824      	ldr	r4, [r4, #0]
 8002300:	e7f5      	b.n	80022ee <_fwalk_reent+0xe>
 8002302:	89ab      	ldrh	r3, [r5, #12]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d907      	bls.n	8002318 <_fwalk_reent+0x38>
 8002308:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800230c:	3301      	adds	r3, #1
 800230e:	d003      	beq.n	8002318 <_fwalk_reent+0x38>
 8002310:	4629      	mov	r1, r5
 8002312:	4640      	mov	r0, r8
 8002314:	47c8      	blx	r9
 8002316:	4306      	orrs	r6, r0
 8002318:	3568      	adds	r5, #104	; 0x68
 800231a:	e7ee      	b.n	80022fa <_fwalk_reent+0x1a>

0800231c <__libc_init_array>:
 800231c:	b570      	push	{r4, r5, r6, lr}
 800231e:	4e0d      	ldr	r6, [pc, #52]	; (8002354 <__libc_init_array+0x38>)
 8002320:	4c0d      	ldr	r4, [pc, #52]	; (8002358 <__libc_init_array+0x3c>)
 8002322:	1ba4      	subs	r4, r4, r6
 8002324:	10a4      	asrs	r4, r4, #2
 8002326:	2500      	movs	r5, #0
 8002328:	42a5      	cmp	r5, r4
 800232a:	d109      	bne.n	8002340 <__libc_init_array+0x24>
 800232c:	4e0b      	ldr	r6, [pc, #44]	; (800235c <__libc_init_array+0x40>)
 800232e:	4c0c      	ldr	r4, [pc, #48]	; (8002360 <__libc_init_array+0x44>)
 8002330:	f000 feec 	bl	800310c <_init>
 8002334:	1ba4      	subs	r4, r4, r6
 8002336:	10a4      	asrs	r4, r4, #2
 8002338:	2500      	movs	r5, #0
 800233a:	42a5      	cmp	r5, r4
 800233c:	d105      	bne.n	800234a <__libc_init_array+0x2e>
 800233e:	bd70      	pop	{r4, r5, r6, pc}
 8002340:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002344:	4798      	blx	r3
 8002346:	3501      	adds	r5, #1
 8002348:	e7ee      	b.n	8002328 <__libc_init_array+0xc>
 800234a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800234e:	4798      	blx	r3
 8002350:	3501      	adds	r5, #1
 8002352:	e7f2      	b.n	800233a <__libc_init_array+0x1e>
 8002354:	080033bc 	.word	0x080033bc
 8002358:	080033bc 	.word	0x080033bc
 800235c:	080033bc 	.word	0x080033bc
 8002360:	080033c0 	.word	0x080033c0

08002364 <memset>:
 8002364:	4402      	add	r2, r0
 8002366:	4603      	mov	r3, r0
 8002368:	4293      	cmp	r3, r2
 800236a:	d100      	bne.n	800236e <memset+0xa>
 800236c:	4770      	bx	lr
 800236e:	f803 1b01 	strb.w	r1, [r3], #1
 8002372:	e7f9      	b.n	8002368 <memset+0x4>

08002374 <_malloc_r>:
 8002374:	b570      	push	{r4, r5, r6, lr}
 8002376:	1ccd      	adds	r5, r1, #3
 8002378:	f025 0503 	bic.w	r5, r5, #3
 800237c:	3508      	adds	r5, #8
 800237e:	2d0c      	cmp	r5, #12
 8002380:	bf38      	it	cc
 8002382:	250c      	movcc	r5, #12
 8002384:	2d00      	cmp	r5, #0
 8002386:	4606      	mov	r6, r0
 8002388:	db01      	blt.n	800238e <_malloc_r+0x1a>
 800238a:	42a9      	cmp	r1, r5
 800238c:	d903      	bls.n	8002396 <_malloc_r+0x22>
 800238e:	230c      	movs	r3, #12
 8002390:	6033      	str	r3, [r6, #0]
 8002392:	2000      	movs	r0, #0
 8002394:	bd70      	pop	{r4, r5, r6, pc}
 8002396:	f000 fb63 	bl	8002a60 <__malloc_lock>
 800239a:	4a21      	ldr	r2, [pc, #132]	; (8002420 <_malloc_r+0xac>)
 800239c:	6814      	ldr	r4, [r2, #0]
 800239e:	4621      	mov	r1, r4
 80023a0:	b991      	cbnz	r1, 80023c8 <_malloc_r+0x54>
 80023a2:	4c20      	ldr	r4, [pc, #128]	; (8002424 <_malloc_r+0xb0>)
 80023a4:	6823      	ldr	r3, [r4, #0]
 80023a6:	b91b      	cbnz	r3, 80023b0 <_malloc_r+0x3c>
 80023a8:	4630      	mov	r0, r6
 80023aa:	f000 f8b9 	bl	8002520 <_sbrk_r>
 80023ae:	6020      	str	r0, [r4, #0]
 80023b0:	4629      	mov	r1, r5
 80023b2:	4630      	mov	r0, r6
 80023b4:	f000 f8b4 	bl	8002520 <_sbrk_r>
 80023b8:	1c43      	adds	r3, r0, #1
 80023ba:	d124      	bne.n	8002406 <_malloc_r+0x92>
 80023bc:	230c      	movs	r3, #12
 80023be:	6033      	str	r3, [r6, #0]
 80023c0:	4630      	mov	r0, r6
 80023c2:	f000 fb4e 	bl	8002a62 <__malloc_unlock>
 80023c6:	e7e4      	b.n	8002392 <_malloc_r+0x1e>
 80023c8:	680b      	ldr	r3, [r1, #0]
 80023ca:	1b5b      	subs	r3, r3, r5
 80023cc:	d418      	bmi.n	8002400 <_malloc_r+0x8c>
 80023ce:	2b0b      	cmp	r3, #11
 80023d0:	d90f      	bls.n	80023f2 <_malloc_r+0x7e>
 80023d2:	600b      	str	r3, [r1, #0]
 80023d4:	50cd      	str	r5, [r1, r3]
 80023d6:	18cc      	adds	r4, r1, r3
 80023d8:	4630      	mov	r0, r6
 80023da:	f000 fb42 	bl	8002a62 <__malloc_unlock>
 80023de:	f104 000b 	add.w	r0, r4, #11
 80023e2:	1d23      	adds	r3, r4, #4
 80023e4:	f020 0007 	bic.w	r0, r0, #7
 80023e8:	1ac3      	subs	r3, r0, r3
 80023ea:	d0d3      	beq.n	8002394 <_malloc_r+0x20>
 80023ec:	425a      	negs	r2, r3
 80023ee:	50e2      	str	r2, [r4, r3]
 80023f0:	e7d0      	b.n	8002394 <_malloc_r+0x20>
 80023f2:	428c      	cmp	r4, r1
 80023f4:	684b      	ldr	r3, [r1, #4]
 80023f6:	bf16      	itet	ne
 80023f8:	6063      	strne	r3, [r4, #4]
 80023fa:	6013      	streq	r3, [r2, #0]
 80023fc:	460c      	movne	r4, r1
 80023fe:	e7eb      	b.n	80023d8 <_malloc_r+0x64>
 8002400:	460c      	mov	r4, r1
 8002402:	6849      	ldr	r1, [r1, #4]
 8002404:	e7cc      	b.n	80023a0 <_malloc_r+0x2c>
 8002406:	1cc4      	adds	r4, r0, #3
 8002408:	f024 0403 	bic.w	r4, r4, #3
 800240c:	42a0      	cmp	r0, r4
 800240e:	d005      	beq.n	800241c <_malloc_r+0xa8>
 8002410:	1a21      	subs	r1, r4, r0
 8002412:	4630      	mov	r0, r6
 8002414:	f000 f884 	bl	8002520 <_sbrk_r>
 8002418:	3001      	adds	r0, #1
 800241a:	d0cf      	beq.n	80023bc <_malloc_r+0x48>
 800241c:	6025      	str	r5, [r4, #0]
 800241e:	e7db      	b.n	80023d8 <_malloc_r+0x64>
 8002420:	20000154 	.word	0x20000154
 8002424:	20000158 	.word	0x20000158

08002428 <iprintf>:
 8002428:	b40f      	push	{r0, r1, r2, r3}
 800242a:	4b0a      	ldr	r3, [pc, #40]	; (8002454 <iprintf+0x2c>)
 800242c:	b513      	push	{r0, r1, r4, lr}
 800242e:	681c      	ldr	r4, [r3, #0]
 8002430:	b124      	cbz	r4, 800243c <iprintf+0x14>
 8002432:	69a3      	ldr	r3, [r4, #24]
 8002434:	b913      	cbnz	r3, 800243c <iprintf+0x14>
 8002436:	4620      	mov	r0, r4
 8002438:	f7ff fee6 	bl	8002208 <__sinit>
 800243c:	ab05      	add	r3, sp, #20
 800243e:	9a04      	ldr	r2, [sp, #16]
 8002440:	68a1      	ldr	r1, [r4, #8]
 8002442:	9301      	str	r3, [sp, #4]
 8002444:	4620      	mov	r0, r4
 8002446:	f000 fb85 	bl	8002b54 <_vfiprintf_r>
 800244a:	b002      	add	sp, #8
 800244c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002450:	b004      	add	sp, #16
 8002452:	4770      	bx	lr
 8002454:	20000024 	.word	0x20000024

08002458 <_puts_r>:
 8002458:	b570      	push	{r4, r5, r6, lr}
 800245a:	460e      	mov	r6, r1
 800245c:	4605      	mov	r5, r0
 800245e:	b118      	cbz	r0, 8002468 <_puts_r+0x10>
 8002460:	6983      	ldr	r3, [r0, #24]
 8002462:	b90b      	cbnz	r3, 8002468 <_puts_r+0x10>
 8002464:	f7ff fed0 	bl	8002208 <__sinit>
 8002468:	69ab      	ldr	r3, [r5, #24]
 800246a:	68ac      	ldr	r4, [r5, #8]
 800246c:	b913      	cbnz	r3, 8002474 <_puts_r+0x1c>
 800246e:	4628      	mov	r0, r5
 8002470:	f7ff feca 	bl	8002208 <__sinit>
 8002474:	4b23      	ldr	r3, [pc, #140]	; (8002504 <_puts_r+0xac>)
 8002476:	429c      	cmp	r4, r3
 8002478:	d117      	bne.n	80024aa <_puts_r+0x52>
 800247a:	686c      	ldr	r4, [r5, #4]
 800247c:	89a3      	ldrh	r3, [r4, #12]
 800247e:	071b      	lsls	r3, r3, #28
 8002480:	d51d      	bpl.n	80024be <_puts_r+0x66>
 8002482:	6923      	ldr	r3, [r4, #16]
 8002484:	b1db      	cbz	r3, 80024be <_puts_r+0x66>
 8002486:	3e01      	subs	r6, #1
 8002488:	68a3      	ldr	r3, [r4, #8]
 800248a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800248e:	3b01      	subs	r3, #1
 8002490:	60a3      	str	r3, [r4, #8]
 8002492:	b9e9      	cbnz	r1, 80024d0 <_puts_r+0x78>
 8002494:	2b00      	cmp	r3, #0
 8002496:	da2e      	bge.n	80024f6 <_puts_r+0x9e>
 8002498:	4622      	mov	r2, r4
 800249a:	210a      	movs	r1, #10
 800249c:	4628      	mov	r0, r5
 800249e:	f000 f8d7 	bl	8002650 <__swbuf_r>
 80024a2:	3001      	adds	r0, #1
 80024a4:	d011      	beq.n	80024ca <_puts_r+0x72>
 80024a6:	200a      	movs	r0, #10
 80024a8:	e011      	b.n	80024ce <_puts_r+0x76>
 80024aa:	4b17      	ldr	r3, [pc, #92]	; (8002508 <_puts_r+0xb0>)
 80024ac:	429c      	cmp	r4, r3
 80024ae:	d101      	bne.n	80024b4 <_puts_r+0x5c>
 80024b0:	68ac      	ldr	r4, [r5, #8]
 80024b2:	e7e3      	b.n	800247c <_puts_r+0x24>
 80024b4:	4b15      	ldr	r3, [pc, #84]	; (800250c <_puts_r+0xb4>)
 80024b6:	429c      	cmp	r4, r3
 80024b8:	bf08      	it	eq
 80024ba:	68ec      	ldreq	r4, [r5, #12]
 80024bc:	e7de      	b.n	800247c <_puts_r+0x24>
 80024be:	4621      	mov	r1, r4
 80024c0:	4628      	mov	r0, r5
 80024c2:	f000 f929 	bl	8002718 <__swsetup_r>
 80024c6:	2800      	cmp	r0, #0
 80024c8:	d0dd      	beq.n	8002486 <_puts_r+0x2e>
 80024ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024ce:	bd70      	pop	{r4, r5, r6, pc}
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	da04      	bge.n	80024de <_puts_r+0x86>
 80024d4:	69a2      	ldr	r2, [r4, #24]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	dc06      	bgt.n	80024e8 <_puts_r+0x90>
 80024da:	290a      	cmp	r1, #10
 80024dc:	d004      	beq.n	80024e8 <_puts_r+0x90>
 80024de:	6823      	ldr	r3, [r4, #0]
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	6022      	str	r2, [r4, #0]
 80024e4:	7019      	strb	r1, [r3, #0]
 80024e6:	e7cf      	b.n	8002488 <_puts_r+0x30>
 80024e8:	4622      	mov	r2, r4
 80024ea:	4628      	mov	r0, r5
 80024ec:	f000 f8b0 	bl	8002650 <__swbuf_r>
 80024f0:	3001      	adds	r0, #1
 80024f2:	d1c9      	bne.n	8002488 <_puts_r+0x30>
 80024f4:	e7e9      	b.n	80024ca <_puts_r+0x72>
 80024f6:	6823      	ldr	r3, [r4, #0]
 80024f8:	200a      	movs	r0, #10
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	6022      	str	r2, [r4, #0]
 80024fe:	7018      	strb	r0, [r3, #0]
 8002500:	e7e5      	b.n	80024ce <_puts_r+0x76>
 8002502:	bf00      	nop
 8002504:	08003344 	.word	0x08003344
 8002508:	08003364 	.word	0x08003364
 800250c:	08003324 	.word	0x08003324

08002510 <puts>:
 8002510:	4b02      	ldr	r3, [pc, #8]	; (800251c <puts+0xc>)
 8002512:	4601      	mov	r1, r0
 8002514:	6818      	ldr	r0, [r3, #0]
 8002516:	f7ff bf9f 	b.w	8002458 <_puts_r>
 800251a:	bf00      	nop
 800251c:	20000024 	.word	0x20000024

08002520 <_sbrk_r>:
 8002520:	b538      	push	{r3, r4, r5, lr}
 8002522:	4c06      	ldr	r4, [pc, #24]	; (800253c <_sbrk_r+0x1c>)
 8002524:	2300      	movs	r3, #0
 8002526:	4605      	mov	r5, r0
 8002528:	4608      	mov	r0, r1
 800252a:	6023      	str	r3, [r4, #0]
 800252c:	f7ff fc58 	bl	8001de0 <_sbrk>
 8002530:	1c43      	adds	r3, r0, #1
 8002532:	d102      	bne.n	800253a <_sbrk_r+0x1a>
 8002534:	6823      	ldr	r3, [r4, #0]
 8002536:	b103      	cbz	r3, 800253a <_sbrk_r+0x1a>
 8002538:	602b      	str	r3, [r5, #0]
 800253a:	bd38      	pop	{r3, r4, r5, pc}
 800253c:	200001f4 	.word	0x200001f4

08002540 <_raise_r>:
 8002540:	291f      	cmp	r1, #31
 8002542:	b538      	push	{r3, r4, r5, lr}
 8002544:	4604      	mov	r4, r0
 8002546:	460d      	mov	r5, r1
 8002548:	d904      	bls.n	8002554 <_raise_r+0x14>
 800254a:	2316      	movs	r3, #22
 800254c:	6003      	str	r3, [r0, #0]
 800254e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002552:	bd38      	pop	{r3, r4, r5, pc}
 8002554:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002556:	b112      	cbz	r2, 800255e <_raise_r+0x1e>
 8002558:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800255c:	b94b      	cbnz	r3, 8002572 <_raise_r+0x32>
 800255e:	4620      	mov	r0, r4
 8002560:	f000 f830 	bl	80025c4 <_getpid_r>
 8002564:	462a      	mov	r2, r5
 8002566:	4601      	mov	r1, r0
 8002568:	4620      	mov	r0, r4
 800256a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800256e:	f000 b817 	b.w	80025a0 <_kill_r>
 8002572:	2b01      	cmp	r3, #1
 8002574:	d00a      	beq.n	800258c <_raise_r+0x4c>
 8002576:	1c59      	adds	r1, r3, #1
 8002578:	d103      	bne.n	8002582 <_raise_r+0x42>
 800257a:	2316      	movs	r3, #22
 800257c:	6003      	str	r3, [r0, #0]
 800257e:	2001      	movs	r0, #1
 8002580:	e7e7      	b.n	8002552 <_raise_r+0x12>
 8002582:	2400      	movs	r4, #0
 8002584:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002588:	4628      	mov	r0, r5
 800258a:	4798      	blx	r3
 800258c:	2000      	movs	r0, #0
 800258e:	e7e0      	b.n	8002552 <_raise_r+0x12>

08002590 <raise>:
 8002590:	4b02      	ldr	r3, [pc, #8]	; (800259c <raise+0xc>)
 8002592:	4601      	mov	r1, r0
 8002594:	6818      	ldr	r0, [r3, #0]
 8002596:	f7ff bfd3 	b.w	8002540 <_raise_r>
 800259a:	bf00      	nop
 800259c:	20000024 	.word	0x20000024

080025a0 <_kill_r>:
 80025a0:	b538      	push	{r3, r4, r5, lr}
 80025a2:	4c07      	ldr	r4, [pc, #28]	; (80025c0 <_kill_r+0x20>)
 80025a4:	2300      	movs	r3, #0
 80025a6:	4605      	mov	r5, r0
 80025a8:	4608      	mov	r0, r1
 80025aa:	4611      	mov	r1, r2
 80025ac:	6023      	str	r3, [r4, #0]
 80025ae:	f000 fda3 	bl	80030f8 <_kill>
 80025b2:	1c43      	adds	r3, r0, #1
 80025b4:	d102      	bne.n	80025bc <_kill_r+0x1c>
 80025b6:	6823      	ldr	r3, [r4, #0]
 80025b8:	b103      	cbz	r3, 80025bc <_kill_r+0x1c>
 80025ba:	602b      	str	r3, [r5, #0]
 80025bc:	bd38      	pop	{r3, r4, r5, pc}
 80025be:	bf00      	nop
 80025c0:	200001f4 	.word	0x200001f4

080025c4 <_getpid_r>:
 80025c4:	f7ff bc0a 	b.w	8001ddc <_getpid>

080025c8 <__sread>:
 80025c8:	b510      	push	{r4, lr}
 80025ca:	460c      	mov	r4, r1
 80025cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025d0:	f000 fd5e 	bl	8003090 <_read_r>
 80025d4:	2800      	cmp	r0, #0
 80025d6:	bfab      	itete	ge
 80025d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80025da:	89a3      	ldrhlt	r3, [r4, #12]
 80025dc:	181b      	addge	r3, r3, r0
 80025de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80025e2:	bfac      	ite	ge
 80025e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80025e6:	81a3      	strhlt	r3, [r4, #12]
 80025e8:	bd10      	pop	{r4, pc}

080025ea <__swrite>:
 80025ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025ee:	461f      	mov	r7, r3
 80025f0:	898b      	ldrh	r3, [r1, #12]
 80025f2:	05db      	lsls	r3, r3, #23
 80025f4:	4605      	mov	r5, r0
 80025f6:	460c      	mov	r4, r1
 80025f8:	4616      	mov	r6, r2
 80025fa:	d505      	bpl.n	8002608 <__swrite+0x1e>
 80025fc:	2302      	movs	r3, #2
 80025fe:	2200      	movs	r2, #0
 8002600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002604:	f000 f9b6 	bl	8002974 <_lseek_r>
 8002608:	89a3      	ldrh	r3, [r4, #12]
 800260a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800260e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002612:	81a3      	strh	r3, [r4, #12]
 8002614:	4632      	mov	r2, r6
 8002616:	463b      	mov	r3, r7
 8002618:	4628      	mov	r0, r5
 800261a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800261e:	f000 b869 	b.w	80026f4 <_write_r>

08002622 <__sseek>:
 8002622:	b510      	push	{r4, lr}
 8002624:	460c      	mov	r4, r1
 8002626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800262a:	f000 f9a3 	bl	8002974 <_lseek_r>
 800262e:	1c43      	adds	r3, r0, #1
 8002630:	89a3      	ldrh	r3, [r4, #12]
 8002632:	bf15      	itete	ne
 8002634:	6560      	strne	r0, [r4, #84]	; 0x54
 8002636:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800263a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800263e:	81a3      	strheq	r3, [r4, #12]
 8002640:	bf18      	it	ne
 8002642:	81a3      	strhne	r3, [r4, #12]
 8002644:	bd10      	pop	{r4, pc}

08002646 <__sclose>:
 8002646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800264a:	f000 b8d3 	b.w	80027f4 <_close_r>
	...

08002650 <__swbuf_r>:
 8002650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002652:	460e      	mov	r6, r1
 8002654:	4614      	mov	r4, r2
 8002656:	4605      	mov	r5, r0
 8002658:	b118      	cbz	r0, 8002662 <__swbuf_r+0x12>
 800265a:	6983      	ldr	r3, [r0, #24]
 800265c:	b90b      	cbnz	r3, 8002662 <__swbuf_r+0x12>
 800265e:	f7ff fdd3 	bl	8002208 <__sinit>
 8002662:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <__swbuf_r+0x98>)
 8002664:	429c      	cmp	r4, r3
 8002666:	d12a      	bne.n	80026be <__swbuf_r+0x6e>
 8002668:	686c      	ldr	r4, [r5, #4]
 800266a:	69a3      	ldr	r3, [r4, #24]
 800266c:	60a3      	str	r3, [r4, #8]
 800266e:	89a3      	ldrh	r3, [r4, #12]
 8002670:	071a      	lsls	r2, r3, #28
 8002672:	d52e      	bpl.n	80026d2 <__swbuf_r+0x82>
 8002674:	6923      	ldr	r3, [r4, #16]
 8002676:	b363      	cbz	r3, 80026d2 <__swbuf_r+0x82>
 8002678:	6923      	ldr	r3, [r4, #16]
 800267a:	6820      	ldr	r0, [r4, #0]
 800267c:	1ac0      	subs	r0, r0, r3
 800267e:	6963      	ldr	r3, [r4, #20]
 8002680:	b2f6      	uxtb	r6, r6
 8002682:	4283      	cmp	r3, r0
 8002684:	4637      	mov	r7, r6
 8002686:	dc04      	bgt.n	8002692 <__swbuf_r+0x42>
 8002688:	4621      	mov	r1, r4
 800268a:	4628      	mov	r0, r5
 800268c:	f000 f948 	bl	8002920 <_fflush_r>
 8002690:	bb28      	cbnz	r0, 80026de <__swbuf_r+0x8e>
 8002692:	68a3      	ldr	r3, [r4, #8]
 8002694:	3b01      	subs	r3, #1
 8002696:	60a3      	str	r3, [r4, #8]
 8002698:	6823      	ldr	r3, [r4, #0]
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	6022      	str	r2, [r4, #0]
 800269e:	701e      	strb	r6, [r3, #0]
 80026a0:	6963      	ldr	r3, [r4, #20]
 80026a2:	3001      	adds	r0, #1
 80026a4:	4283      	cmp	r3, r0
 80026a6:	d004      	beq.n	80026b2 <__swbuf_r+0x62>
 80026a8:	89a3      	ldrh	r3, [r4, #12]
 80026aa:	07db      	lsls	r3, r3, #31
 80026ac:	d519      	bpl.n	80026e2 <__swbuf_r+0x92>
 80026ae:	2e0a      	cmp	r6, #10
 80026b0:	d117      	bne.n	80026e2 <__swbuf_r+0x92>
 80026b2:	4621      	mov	r1, r4
 80026b4:	4628      	mov	r0, r5
 80026b6:	f000 f933 	bl	8002920 <_fflush_r>
 80026ba:	b190      	cbz	r0, 80026e2 <__swbuf_r+0x92>
 80026bc:	e00f      	b.n	80026de <__swbuf_r+0x8e>
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <__swbuf_r+0x9c>)
 80026c0:	429c      	cmp	r4, r3
 80026c2:	d101      	bne.n	80026c8 <__swbuf_r+0x78>
 80026c4:	68ac      	ldr	r4, [r5, #8]
 80026c6:	e7d0      	b.n	800266a <__swbuf_r+0x1a>
 80026c8:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <__swbuf_r+0xa0>)
 80026ca:	429c      	cmp	r4, r3
 80026cc:	bf08      	it	eq
 80026ce:	68ec      	ldreq	r4, [r5, #12]
 80026d0:	e7cb      	b.n	800266a <__swbuf_r+0x1a>
 80026d2:	4621      	mov	r1, r4
 80026d4:	4628      	mov	r0, r5
 80026d6:	f000 f81f 	bl	8002718 <__swsetup_r>
 80026da:	2800      	cmp	r0, #0
 80026dc:	d0cc      	beq.n	8002678 <__swbuf_r+0x28>
 80026de:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80026e2:	4638      	mov	r0, r7
 80026e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026e6:	bf00      	nop
 80026e8:	08003344 	.word	0x08003344
 80026ec:	08003364 	.word	0x08003364
 80026f0:	08003324 	.word	0x08003324

080026f4 <_write_r>:
 80026f4:	b538      	push	{r3, r4, r5, lr}
 80026f6:	4c07      	ldr	r4, [pc, #28]	; (8002714 <_write_r+0x20>)
 80026f8:	4605      	mov	r5, r0
 80026fa:	4608      	mov	r0, r1
 80026fc:	4611      	mov	r1, r2
 80026fe:	2200      	movs	r2, #0
 8002700:	6022      	str	r2, [r4, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	f7ff fb15 	bl	8001d32 <_write>
 8002708:	1c43      	adds	r3, r0, #1
 800270a:	d102      	bne.n	8002712 <_write_r+0x1e>
 800270c:	6823      	ldr	r3, [r4, #0]
 800270e:	b103      	cbz	r3, 8002712 <_write_r+0x1e>
 8002710:	602b      	str	r3, [r5, #0]
 8002712:	bd38      	pop	{r3, r4, r5, pc}
 8002714:	200001f4 	.word	0x200001f4

08002718 <__swsetup_r>:
 8002718:	4b32      	ldr	r3, [pc, #200]	; (80027e4 <__swsetup_r+0xcc>)
 800271a:	b570      	push	{r4, r5, r6, lr}
 800271c:	681d      	ldr	r5, [r3, #0]
 800271e:	4606      	mov	r6, r0
 8002720:	460c      	mov	r4, r1
 8002722:	b125      	cbz	r5, 800272e <__swsetup_r+0x16>
 8002724:	69ab      	ldr	r3, [r5, #24]
 8002726:	b913      	cbnz	r3, 800272e <__swsetup_r+0x16>
 8002728:	4628      	mov	r0, r5
 800272a:	f7ff fd6d 	bl	8002208 <__sinit>
 800272e:	4b2e      	ldr	r3, [pc, #184]	; (80027e8 <__swsetup_r+0xd0>)
 8002730:	429c      	cmp	r4, r3
 8002732:	d10f      	bne.n	8002754 <__swsetup_r+0x3c>
 8002734:	686c      	ldr	r4, [r5, #4]
 8002736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800273a:	b29a      	uxth	r2, r3
 800273c:	0715      	lsls	r5, r2, #28
 800273e:	d42c      	bmi.n	800279a <__swsetup_r+0x82>
 8002740:	06d0      	lsls	r0, r2, #27
 8002742:	d411      	bmi.n	8002768 <__swsetup_r+0x50>
 8002744:	2209      	movs	r2, #9
 8002746:	6032      	str	r2, [r6, #0]
 8002748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800274c:	81a3      	strh	r3, [r4, #12]
 800274e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002752:	e03e      	b.n	80027d2 <__swsetup_r+0xba>
 8002754:	4b25      	ldr	r3, [pc, #148]	; (80027ec <__swsetup_r+0xd4>)
 8002756:	429c      	cmp	r4, r3
 8002758:	d101      	bne.n	800275e <__swsetup_r+0x46>
 800275a:	68ac      	ldr	r4, [r5, #8]
 800275c:	e7eb      	b.n	8002736 <__swsetup_r+0x1e>
 800275e:	4b24      	ldr	r3, [pc, #144]	; (80027f0 <__swsetup_r+0xd8>)
 8002760:	429c      	cmp	r4, r3
 8002762:	bf08      	it	eq
 8002764:	68ec      	ldreq	r4, [r5, #12]
 8002766:	e7e6      	b.n	8002736 <__swsetup_r+0x1e>
 8002768:	0751      	lsls	r1, r2, #29
 800276a:	d512      	bpl.n	8002792 <__swsetup_r+0x7a>
 800276c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800276e:	b141      	cbz	r1, 8002782 <__swsetup_r+0x6a>
 8002770:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002774:	4299      	cmp	r1, r3
 8002776:	d002      	beq.n	800277e <__swsetup_r+0x66>
 8002778:	4630      	mov	r0, r6
 800277a:	f000 f973 	bl	8002a64 <_free_r>
 800277e:	2300      	movs	r3, #0
 8002780:	6363      	str	r3, [r4, #52]	; 0x34
 8002782:	89a3      	ldrh	r3, [r4, #12]
 8002784:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002788:	81a3      	strh	r3, [r4, #12]
 800278a:	2300      	movs	r3, #0
 800278c:	6063      	str	r3, [r4, #4]
 800278e:	6923      	ldr	r3, [r4, #16]
 8002790:	6023      	str	r3, [r4, #0]
 8002792:	89a3      	ldrh	r3, [r4, #12]
 8002794:	f043 0308 	orr.w	r3, r3, #8
 8002798:	81a3      	strh	r3, [r4, #12]
 800279a:	6923      	ldr	r3, [r4, #16]
 800279c:	b94b      	cbnz	r3, 80027b2 <__swsetup_r+0x9a>
 800279e:	89a3      	ldrh	r3, [r4, #12]
 80027a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80027a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027a8:	d003      	beq.n	80027b2 <__swsetup_r+0x9a>
 80027aa:	4621      	mov	r1, r4
 80027ac:	4630      	mov	r0, r6
 80027ae:	f000 f917 	bl	80029e0 <__smakebuf_r>
 80027b2:	89a2      	ldrh	r2, [r4, #12]
 80027b4:	f012 0301 	ands.w	r3, r2, #1
 80027b8:	d00c      	beq.n	80027d4 <__swsetup_r+0xbc>
 80027ba:	2300      	movs	r3, #0
 80027bc:	60a3      	str	r3, [r4, #8]
 80027be:	6963      	ldr	r3, [r4, #20]
 80027c0:	425b      	negs	r3, r3
 80027c2:	61a3      	str	r3, [r4, #24]
 80027c4:	6923      	ldr	r3, [r4, #16]
 80027c6:	b953      	cbnz	r3, 80027de <__swsetup_r+0xc6>
 80027c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027cc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80027d0:	d1ba      	bne.n	8002748 <__swsetup_r+0x30>
 80027d2:	bd70      	pop	{r4, r5, r6, pc}
 80027d4:	0792      	lsls	r2, r2, #30
 80027d6:	bf58      	it	pl
 80027d8:	6963      	ldrpl	r3, [r4, #20]
 80027da:	60a3      	str	r3, [r4, #8]
 80027dc:	e7f2      	b.n	80027c4 <__swsetup_r+0xac>
 80027de:	2000      	movs	r0, #0
 80027e0:	e7f7      	b.n	80027d2 <__swsetup_r+0xba>
 80027e2:	bf00      	nop
 80027e4:	20000024 	.word	0x20000024
 80027e8:	08003344 	.word	0x08003344
 80027ec:	08003364 	.word	0x08003364
 80027f0:	08003324 	.word	0x08003324

080027f4 <_close_r>:
 80027f4:	b538      	push	{r3, r4, r5, lr}
 80027f6:	4c06      	ldr	r4, [pc, #24]	; (8002810 <_close_r+0x1c>)
 80027f8:	2300      	movs	r3, #0
 80027fa:	4605      	mov	r5, r0
 80027fc:	4608      	mov	r0, r1
 80027fe:	6023      	str	r3, [r4, #0]
 8002800:	f7ff fac6 	bl	8001d90 <_close>
 8002804:	1c43      	adds	r3, r0, #1
 8002806:	d102      	bne.n	800280e <_close_r+0x1a>
 8002808:	6823      	ldr	r3, [r4, #0]
 800280a:	b103      	cbz	r3, 800280e <_close_r+0x1a>
 800280c:	602b      	str	r3, [r5, #0]
 800280e:	bd38      	pop	{r3, r4, r5, pc}
 8002810:	200001f4 	.word	0x200001f4

08002814 <__sflush_r>:
 8002814:	898a      	ldrh	r2, [r1, #12]
 8002816:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800281a:	4605      	mov	r5, r0
 800281c:	0710      	lsls	r0, r2, #28
 800281e:	460c      	mov	r4, r1
 8002820:	d458      	bmi.n	80028d4 <__sflush_r+0xc0>
 8002822:	684b      	ldr	r3, [r1, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	dc05      	bgt.n	8002834 <__sflush_r+0x20>
 8002828:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800282a:	2b00      	cmp	r3, #0
 800282c:	dc02      	bgt.n	8002834 <__sflush_r+0x20>
 800282e:	2000      	movs	r0, #0
 8002830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002834:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002836:	2e00      	cmp	r6, #0
 8002838:	d0f9      	beq.n	800282e <__sflush_r+0x1a>
 800283a:	2300      	movs	r3, #0
 800283c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002840:	682f      	ldr	r7, [r5, #0]
 8002842:	6a21      	ldr	r1, [r4, #32]
 8002844:	602b      	str	r3, [r5, #0]
 8002846:	d032      	beq.n	80028ae <__sflush_r+0x9a>
 8002848:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800284a:	89a3      	ldrh	r3, [r4, #12]
 800284c:	075a      	lsls	r2, r3, #29
 800284e:	d505      	bpl.n	800285c <__sflush_r+0x48>
 8002850:	6863      	ldr	r3, [r4, #4]
 8002852:	1ac0      	subs	r0, r0, r3
 8002854:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002856:	b10b      	cbz	r3, 800285c <__sflush_r+0x48>
 8002858:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800285a:	1ac0      	subs	r0, r0, r3
 800285c:	2300      	movs	r3, #0
 800285e:	4602      	mov	r2, r0
 8002860:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002862:	6a21      	ldr	r1, [r4, #32]
 8002864:	4628      	mov	r0, r5
 8002866:	47b0      	blx	r6
 8002868:	1c43      	adds	r3, r0, #1
 800286a:	89a3      	ldrh	r3, [r4, #12]
 800286c:	d106      	bne.n	800287c <__sflush_r+0x68>
 800286e:	6829      	ldr	r1, [r5, #0]
 8002870:	291d      	cmp	r1, #29
 8002872:	d848      	bhi.n	8002906 <__sflush_r+0xf2>
 8002874:	4a29      	ldr	r2, [pc, #164]	; (800291c <__sflush_r+0x108>)
 8002876:	40ca      	lsrs	r2, r1
 8002878:	07d6      	lsls	r6, r2, #31
 800287a:	d544      	bpl.n	8002906 <__sflush_r+0xf2>
 800287c:	2200      	movs	r2, #0
 800287e:	6062      	str	r2, [r4, #4]
 8002880:	04d9      	lsls	r1, r3, #19
 8002882:	6922      	ldr	r2, [r4, #16]
 8002884:	6022      	str	r2, [r4, #0]
 8002886:	d504      	bpl.n	8002892 <__sflush_r+0x7e>
 8002888:	1c42      	adds	r2, r0, #1
 800288a:	d101      	bne.n	8002890 <__sflush_r+0x7c>
 800288c:	682b      	ldr	r3, [r5, #0]
 800288e:	b903      	cbnz	r3, 8002892 <__sflush_r+0x7e>
 8002890:	6560      	str	r0, [r4, #84]	; 0x54
 8002892:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002894:	602f      	str	r7, [r5, #0]
 8002896:	2900      	cmp	r1, #0
 8002898:	d0c9      	beq.n	800282e <__sflush_r+0x1a>
 800289a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800289e:	4299      	cmp	r1, r3
 80028a0:	d002      	beq.n	80028a8 <__sflush_r+0x94>
 80028a2:	4628      	mov	r0, r5
 80028a4:	f000 f8de 	bl	8002a64 <_free_r>
 80028a8:	2000      	movs	r0, #0
 80028aa:	6360      	str	r0, [r4, #52]	; 0x34
 80028ac:	e7c0      	b.n	8002830 <__sflush_r+0x1c>
 80028ae:	2301      	movs	r3, #1
 80028b0:	4628      	mov	r0, r5
 80028b2:	47b0      	blx	r6
 80028b4:	1c41      	adds	r1, r0, #1
 80028b6:	d1c8      	bne.n	800284a <__sflush_r+0x36>
 80028b8:	682b      	ldr	r3, [r5, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0c5      	beq.n	800284a <__sflush_r+0x36>
 80028be:	2b1d      	cmp	r3, #29
 80028c0:	d001      	beq.n	80028c6 <__sflush_r+0xb2>
 80028c2:	2b16      	cmp	r3, #22
 80028c4:	d101      	bne.n	80028ca <__sflush_r+0xb6>
 80028c6:	602f      	str	r7, [r5, #0]
 80028c8:	e7b1      	b.n	800282e <__sflush_r+0x1a>
 80028ca:	89a3      	ldrh	r3, [r4, #12]
 80028cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028d0:	81a3      	strh	r3, [r4, #12]
 80028d2:	e7ad      	b.n	8002830 <__sflush_r+0x1c>
 80028d4:	690f      	ldr	r7, [r1, #16]
 80028d6:	2f00      	cmp	r7, #0
 80028d8:	d0a9      	beq.n	800282e <__sflush_r+0x1a>
 80028da:	0793      	lsls	r3, r2, #30
 80028dc:	680e      	ldr	r6, [r1, #0]
 80028de:	bf08      	it	eq
 80028e0:	694b      	ldreq	r3, [r1, #20]
 80028e2:	600f      	str	r7, [r1, #0]
 80028e4:	bf18      	it	ne
 80028e6:	2300      	movne	r3, #0
 80028e8:	eba6 0807 	sub.w	r8, r6, r7
 80028ec:	608b      	str	r3, [r1, #8]
 80028ee:	f1b8 0f00 	cmp.w	r8, #0
 80028f2:	dd9c      	ble.n	800282e <__sflush_r+0x1a>
 80028f4:	4643      	mov	r3, r8
 80028f6:	463a      	mov	r2, r7
 80028f8:	6a21      	ldr	r1, [r4, #32]
 80028fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80028fc:	4628      	mov	r0, r5
 80028fe:	47b0      	blx	r6
 8002900:	2800      	cmp	r0, #0
 8002902:	dc06      	bgt.n	8002912 <__sflush_r+0xfe>
 8002904:	89a3      	ldrh	r3, [r4, #12]
 8002906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800290a:	81a3      	strh	r3, [r4, #12]
 800290c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002910:	e78e      	b.n	8002830 <__sflush_r+0x1c>
 8002912:	4407      	add	r7, r0
 8002914:	eba8 0800 	sub.w	r8, r8, r0
 8002918:	e7e9      	b.n	80028ee <__sflush_r+0xda>
 800291a:	bf00      	nop
 800291c:	20400001 	.word	0x20400001

08002920 <_fflush_r>:
 8002920:	b538      	push	{r3, r4, r5, lr}
 8002922:	690b      	ldr	r3, [r1, #16]
 8002924:	4605      	mov	r5, r0
 8002926:	460c      	mov	r4, r1
 8002928:	b1db      	cbz	r3, 8002962 <_fflush_r+0x42>
 800292a:	b118      	cbz	r0, 8002934 <_fflush_r+0x14>
 800292c:	6983      	ldr	r3, [r0, #24]
 800292e:	b90b      	cbnz	r3, 8002934 <_fflush_r+0x14>
 8002930:	f7ff fc6a 	bl	8002208 <__sinit>
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <_fflush_r+0x48>)
 8002936:	429c      	cmp	r4, r3
 8002938:	d109      	bne.n	800294e <_fflush_r+0x2e>
 800293a:	686c      	ldr	r4, [r5, #4]
 800293c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002940:	b17b      	cbz	r3, 8002962 <_fflush_r+0x42>
 8002942:	4621      	mov	r1, r4
 8002944:	4628      	mov	r0, r5
 8002946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800294a:	f7ff bf63 	b.w	8002814 <__sflush_r>
 800294e:	4b07      	ldr	r3, [pc, #28]	; (800296c <_fflush_r+0x4c>)
 8002950:	429c      	cmp	r4, r3
 8002952:	d101      	bne.n	8002958 <_fflush_r+0x38>
 8002954:	68ac      	ldr	r4, [r5, #8]
 8002956:	e7f1      	b.n	800293c <_fflush_r+0x1c>
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <_fflush_r+0x50>)
 800295a:	429c      	cmp	r4, r3
 800295c:	bf08      	it	eq
 800295e:	68ec      	ldreq	r4, [r5, #12]
 8002960:	e7ec      	b.n	800293c <_fflush_r+0x1c>
 8002962:	2000      	movs	r0, #0
 8002964:	bd38      	pop	{r3, r4, r5, pc}
 8002966:	bf00      	nop
 8002968:	08003344 	.word	0x08003344
 800296c:	08003364 	.word	0x08003364
 8002970:	08003324 	.word	0x08003324

08002974 <_lseek_r>:
 8002974:	b538      	push	{r3, r4, r5, lr}
 8002976:	4c07      	ldr	r4, [pc, #28]	; (8002994 <_lseek_r+0x20>)
 8002978:	4605      	mov	r5, r0
 800297a:	4608      	mov	r0, r1
 800297c:	4611      	mov	r1, r2
 800297e:	2200      	movs	r2, #0
 8002980:	6022      	str	r2, [r4, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	f7ff f9c3 	bl	8001d0e <_lseek>
 8002988:	1c43      	adds	r3, r0, #1
 800298a:	d102      	bne.n	8002992 <_lseek_r+0x1e>
 800298c:	6823      	ldr	r3, [r4, #0]
 800298e:	b103      	cbz	r3, 8002992 <_lseek_r+0x1e>
 8002990:	602b      	str	r3, [r5, #0]
 8002992:	bd38      	pop	{r3, r4, r5, pc}
 8002994:	200001f4 	.word	0x200001f4

08002998 <__swhatbuf_r>:
 8002998:	b570      	push	{r4, r5, r6, lr}
 800299a:	460e      	mov	r6, r1
 800299c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029a0:	2900      	cmp	r1, #0
 80029a2:	b096      	sub	sp, #88	; 0x58
 80029a4:	4614      	mov	r4, r2
 80029a6:	461d      	mov	r5, r3
 80029a8:	da07      	bge.n	80029ba <__swhatbuf_r+0x22>
 80029aa:	2300      	movs	r3, #0
 80029ac:	602b      	str	r3, [r5, #0]
 80029ae:	89b3      	ldrh	r3, [r6, #12]
 80029b0:	061a      	lsls	r2, r3, #24
 80029b2:	d410      	bmi.n	80029d6 <__swhatbuf_r+0x3e>
 80029b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029b8:	e00e      	b.n	80029d8 <__swhatbuf_r+0x40>
 80029ba:	466a      	mov	r2, sp
 80029bc:	f000 fb7a 	bl	80030b4 <_fstat_r>
 80029c0:	2800      	cmp	r0, #0
 80029c2:	dbf2      	blt.n	80029aa <__swhatbuf_r+0x12>
 80029c4:	9a01      	ldr	r2, [sp, #4]
 80029c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80029ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80029ce:	425a      	negs	r2, r3
 80029d0:	415a      	adcs	r2, r3
 80029d2:	602a      	str	r2, [r5, #0]
 80029d4:	e7ee      	b.n	80029b4 <__swhatbuf_r+0x1c>
 80029d6:	2340      	movs	r3, #64	; 0x40
 80029d8:	2000      	movs	r0, #0
 80029da:	6023      	str	r3, [r4, #0]
 80029dc:	b016      	add	sp, #88	; 0x58
 80029de:	bd70      	pop	{r4, r5, r6, pc}

080029e0 <__smakebuf_r>:
 80029e0:	898b      	ldrh	r3, [r1, #12]
 80029e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80029e4:	079d      	lsls	r5, r3, #30
 80029e6:	4606      	mov	r6, r0
 80029e8:	460c      	mov	r4, r1
 80029ea:	d507      	bpl.n	80029fc <__smakebuf_r+0x1c>
 80029ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80029f0:	6023      	str	r3, [r4, #0]
 80029f2:	6123      	str	r3, [r4, #16]
 80029f4:	2301      	movs	r3, #1
 80029f6:	6163      	str	r3, [r4, #20]
 80029f8:	b002      	add	sp, #8
 80029fa:	bd70      	pop	{r4, r5, r6, pc}
 80029fc:	ab01      	add	r3, sp, #4
 80029fe:	466a      	mov	r2, sp
 8002a00:	f7ff ffca 	bl	8002998 <__swhatbuf_r>
 8002a04:	9900      	ldr	r1, [sp, #0]
 8002a06:	4605      	mov	r5, r0
 8002a08:	4630      	mov	r0, r6
 8002a0a:	f7ff fcb3 	bl	8002374 <_malloc_r>
 8002a0e:	b948      	cbnz	r0, 8002a24 <__smakebuf_r+0x44>
 8002a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a14:	059a      	lsls	r2, r3, #22
 8002a16:	d4ef      	bmi.n	80029f8 <__smakebuf_r+0x18>
 8002a18:	f023 0303 	bic.w	r3, r3, #3
 8002a1c:	f043 0302 	orr.w	r3, r3, #2
 8002a20:	81a3      	strh	r3, [r4, #12]
 8002a22:	e7e3      	b.n	80029ec <__smakebuf_r+0xc>
 8002a24:	4b0d      	ldr	r3, [pc, #52]	; (8002a5c <__smakebuf_r+0x7c>)
 8002a26:	62b3      	str	r3, [r6, #40]	; 0x28
 8002a28:	89a3      	ldrh	r3, [r4, #12]
 8002a2a:	6020      	str	r0, [r4, #0]
 8002a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a30:	81a3      	strh	r3, [r4, #12]
 8002a32:	9b00      	ldr	r3, [sp, #0]
 8002a34:	6163      	str	r3, [r4, #20]
 8002a36:	9b01      	ldr	r3, [sp, #4]
 8002a38:	6120      	str	r0, [r4, #16]
 8002a3a:	b15b      	cbz	r3, 8002a54 <__smakebuf_r+0x74>
 8002a3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a40:	4630      	mov	r0, r6
 8002a42:	f000 fb49 	bl	80030d8 <_isatty_r>
 8002a46:	b128      	cbz	r0, 8002a54 <__smakebuf_r+0x74>
 8002a48:	89a3      	ldrh	r3, [r4, #12]
 8002a4a:	f023 0303 	bic.w	r3, r3, #3
 8002a4e:	f043 0301 	orr.w	r3, r3, #1
 8002a52:	81a3      	strh	r3, [r4, #12]
 8002a54:	89a3      	ldrh	r3, [r4, #12]
 8002a56:	431d      	orrs	r5, r3
 8002a58:	81a5      	strh	r5, [r4, #12]
 8002a5a:	e7cd      	b.n	80029f8 <__smakebuf_r+0x18>
 8002a5c:	080021d1 	.word	0x080021d1

08002a60 <__malloc_lock>:
 8002a60:	4770      	bx	lr

08002a62 <__malloc_unlock>:
 8002a62:	4770      	bx	lr

08002a64 <_free_r>:
 8002a64:	b538      	push	{r3, r4, r5, lr}
 8002a66:	4605      	mov	r5, r0
 8002a68:	2900      	cmp	r1, #0
 8002a6a:	d045      	beq.n	8002af8 <_free_r+0x94>
 8002a6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a70:	1f0c      	subs	r4, r1, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	bfb8      	it	lt
 8002a76:	18e4      	addlt	r4, r4, r3
 8002a78:	f7ff fff2 	bl	8002a60 <__malloc_lock>
 8002a7c:	4a1f      	ldr	r2, [pc, #124]	; (8002afc <_free_r+0x98>)
 8002a7e:	6813      	ldr	r3, [r2, #0]
 8002a80:	4610      	mov	r0, r2
 8002a82:	b933      	cbnz	r3, 8002a92 <_free_r+0x2e>
 8002a84:	6063      	str	r3, [r4, #4]
 8002a86:	6014      	str	r4, [r2, #0]
 8002a88:	4628      	mov	r0, r5
 8002a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a8e:	f7ff bfe8 	b.w	8002a62 <__malloc_unlock>
 8002a92:	42a3      	cmp	r3, r4
 8002a94:	d90c      	bls.n	8002ab0 <_free_r+0x4c>
 8002a96:	6821      	ldr	r1, [r4, #0]
 8002a98:	1862      	adds	r2, r4, r1
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	bf04      	itt	eq
 8002a9e:	681a      	ldreq	r2, [r3, #0]
 8002aa0:	685b      	ldreq	r3, [r3, #4]
 8002aa2:	6063      	str	r3, [r4, #4]
 8002aa4:	bf04      	itt	eq
 8002aa6:	1852      	addeq	r2, r2, r1
 8002aa8:	6022      	streq	r2, [r4, #0]
 8002aaa:	6004      	str	r4, [r0, #0]
 8002aac:	e7ec      	b.n	8002a88 <_free_r+0x24>
 8002aae:	4613      	mov	r3, r2
 8002ab0:	685a      	ldr	r2, [r3, #4]
 8002ab2:	b10a      	cbz	r2, 8002ab8 <_free_r+0x54>
 8002ab4:	42a2      	cmp	r2, r4
 8002ab6:	d9fa      	bls.n	8002aae <_free_r+0x4a>
 8002ab8:	6819      	ldr	r1, [r3, #0]
 8002aba:	1858      	adds	r0, r3, r1
 8002abc:	42a0      	cmp	r0, r4
 8002abe:	d10b      	bne.n	8002ad8 <_free_r+0x74>
 8002ac0:	6820      	ldr	r0, [r4, #0]
 8002ac2:	4401      	add	r1, r0
 8002ac4:	1858      	adds	r0, r3, r1
 8002ac6:	4282      	cmp	r2, r0
 8002ac8:	6019      	str	r1, [r3, #0]
 8002aca:	d1dd      	bne.n	8002a88 <_free_r+0x24>
 8002acc:	6810      	ldr	r0, [r2, #0]
 8002ace:	6852      	ldr	r2, [r2, #4]
 8002ad0:	605a      	str	r2, [r3, #4]
 8002ad2:	4401      	add	r1, r0
 8002ad4:	6019      	str	r1, [r3, #0]
 8002ad6:	e7d7      	b.n	8002a88 <_free_r+0x24>
 8002ad8:	d902      	bls.n	8002ae0 <_free_r+0x7c>
 8002ada:	230c      	movs	r3, #12
 8002adc:	602b      	str	r3, [r5, #0]
 8002ade:	e7d3      	b.n	8002a88 <_free_r+0x24>
 8002ae0:	6820      	ldr	r0, [r4, #0]
 8002ae2:	1821      	adds	r1, r4, r0
 8002ae4:	428a      	cmp	r2, r1
 8002ae6:	bf04      	itt	eq
 8002ae8:	6811      	ldreq	r1, [r2, #0]
 8002aea:	6852      	ldreq	r2, [r2, #4]
 8002aec:	6062      	str	r2, [r4, #4]
 8002aee:	bf04      	itt	eq
 8002af0:	1809      	addeq	r1, r1, r0
 8002af2:	6021      	streq	r1, [r4, #0]
 8002af4:	605c      	str	r4, [r3, #4]
 8002af6:	e7c7      	b.n	8002a88 <_free_r+0x24>
 8002af8:	bd38      	pop	{r3, r4, r5, pc}
 8002afa:	bf00      	nop
 8002afc:	20000154 	.word	0x20000154

08002b00 <__sfputc_r>:
 8002b00:	6893      	ldr	r3, [r2, #8]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	b410      	push	{r4}
 8002b08:	6093      	str	r3, [r2, #8]
 8002b0a:	da08      	bge.n	8002b1e <__sfputc_r+0x1e>
 8002b0c:	6994      	ldr	r4, [r2, #24]
 8002b0e:	42a3      	cmp	r3, r4
 8002b10:	db01      	blt.n	8002b16 <__sfputc_r+0x16>
 8002b12:	290a      	cmp	r1, #10
 8002b14:	d103      	bne.n	8002b1e <__sfputc_r+0x1e>
 8002b16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b1a:	f7ff bd99 	b.w	8002650 <__swbuf_r>
 8002b1e:	6813      	ldr	r3, [r2, #0]
 8002b20:	1c58      	adds	r0, r3, #1
 8002b22:	6010      	str	r0, [r2, #0]
 8002b24:	7019      	strb	r1, [r3, #0]
 8002b26:	4608      	mov	r0, r1
 8002b28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <__sfputs_r>:
 8002b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b30:	4606      	mov	r6, r0
 8002b32:	460f      	mov	r7, r1
 8002b34:	4614      	mov	r4, r2
 8002b36:	18d5      	adds	r5, r2, r3
 8002b38:	42ac      	cmp	r4, r5
 8002b3a:	d101      	bne.n	8002b40 <__sfputs_r+0x12>
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	e007      	b.n	8002b50 <__sfputs_r+0x22>
 8002b40:	463a      	mov	r2, r7
 8002b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b46:	4630      	mov	r0, r6
 8002b48:	f7ff ffda 	bl	8002b00 <__sfputc_r>
 8002b4c:	1c43      	adds	r3, r0, #1
 8002b4e:	d1f3      	bne.n	8002b38 <__sfputs_r+0xa>
 8002b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002b54 <_vfiprintf_r>:
 8002b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b58:	460c      	mov	r4, r1
 8002b5a:	b09d      	sub	sp, #116	; 0x74
 8002b5c:	4617      	mov	r7, r2
 8002b5e:	461d      	mov	r5, r3
 8002b60:	4606      	mov	r6, r0
 8002b62:	b118      	cbz	r0, 8002b6c <_vfiprintf_r+0x18>
 8002b64:	6983      	ldr	r3, [r0, #24]
 8002b66:	b90b      	cbnz	r3, 8002b6c <_vfiprintf_r+0x18>
 8002b68:	f7ff fb4e 	bl	8002208 <__sinit>
 8002b6c:	4b7c      	ldr	r3, [pc, #496]	; (8002d60 <_vfiprintf_r+0x20c>)
 8002b6e:	429c      	cmp	r4, r3
 8002b70:	d158      	bne.n	8002c24 <_vfiprintf_r+0xd0>
 8002b72:	6874      	ldr	r4, [r6, #4]
 8002b74:	89a3      	ldrh	r3, [r4, #12]
 8002b76:	0718      	lsls	r0, r3, #28
 8002b78:	d55e      	bpl.n	8002c38 <_vfiprintf_r+0xe4>
 8002b7a:	6923      	ldr	r3, [r4, #16]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d05b      	beq.n	8002c38 <_vfiprintf_r+0xe4>
 8002b80:	2300      	movs	r3, #0
 8002b82:	9309      	str	r3, [sp, #36]	; 0x24
 8002b84:	2320      	movs	r3, #32
 8002b86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002b8a:	2330      	movs	r3, #48	; 0x30
 8002b8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b90:	9503      	str	r5, [sp, #12]
 8002b92:	f04f 0b01 	mov.w	fp, #1
 8002b96:	46b8      	mov	r8, r7
 8002b98:	4645      	mov	r5, r8
 8002b9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002b9e:	b10b      	cbz	r3, 8002ba4 <_vfiprintf_r+0x50>
 8002ba0:	2b25      	cmp	r3, #37	; 0x25
 8002ba2:	d154      	bne.n	8002c4e <_vfiprintf_r+0xfa>
 8002ba4:	ebb8 0a07 	subs.w	sl, r8, r7
 8002ba8:	d00b      	beq.n	8002bc2 <_vfiprintf_r+0x6e>
 8002baa:	4653      	mov	r3, sl
 8002bac:	463a      	mov	r2, r7
 8002bae:	4621      	mov	r1, r4
 8002bb0:	4630      	mov	r0, r6
 8002bb2:	f7ff ffbc 	bl	8002b2e <__sfputs_r>
 8002bb6:	3001      	adds	r0, #1
 8002bb8:	f000 80c2 	beq.w	8002d40 <_vfiprintf_r+0x1ec>
 8002bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bbe:	4453      	add	r3, sl
 8002bc0:	9309      	str	r3, [sp, #36]	; 0x24
 8002bc2:	f898 3000 	ldrb.w	r3, [r8]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 80ba 	beq.w	8002d40 <_vfiprintf_r+0x1ec>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002bd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002bd6:	9304      	str	r3, [sp, #16]
 8002bd8:	9307      	str	r3, [sp, #28]
 8002bda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002bde:	931a      	str	r3, [sp, #104]	; 0x68
 8002be0:	46a8      	mov	r8, r5
 8002be2:	2205      	movs	r2, #5
 8002be4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002be8:	485e      	ldr	r0, [pc, #376]	; (8002d64 <_vfiprintf_r+0x210>)
 8002bea:	f7fd fb19 	bl	8000220 <memchr>
 8002bee:	9b04      	ldr	r3, [sp, #16]
 8002bf0:	bb78      	cbnz	r0, 8002c52 <_vfiprintf_r+0xfe>
 8002bf2:	06d9      	lsls	r1, r3, #27
 8002bf4:	bf44      	itt	mi
 8002bf6:	2220      	movmi	r2, #32
 8002bf8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002bfc:	071a      	lsls	r2, r3, #28
 8002bfe:	bf44      	itt	mi
 8002c00:	222b      	movmi	r2, #43	; 0x2b
 8002c02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002c06:	782a      	ldrb	r2, [r5, #0]
 8002c08:	2a2a      	cmp	r2, #42	; 0x2a
 8002c0a:	d02a      	beq.n	8002c62 <_vfiprintf_r+0x10e>
 8002c0c:	9a07      	ldr	r2, [sp, #28]
 8002c0e:	46a8      	mov	r8, r5
 8002c10:	2000      	movs	r0, #0
 8002c12:	250a      	movs	r5, #10
 8002c14:	4641      	mov	r1, r8
 8002c16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c1a:	3b30      	subs	r3, #48	; 0x30
 8002c1c:	2b09      	cmp	r3, #9
 8002c1e:	d969      	bls.n	8002cf4 <_vfiprintf_r+0x1a0>
 8002c20:	b360      	cbz	r0, 8002c7c <_vfiprintf_r+0x128>
 8002c22:	e024      	b.n	8002c6e <_vfiprintf_r+0x11a>
 8002c24:	4b50      	ldr	r3, [pc, #320]	; (8002d68 <_vfiprintf_r+0x214>)
 8002c26:	429c      	cmp	r4, r3
 8002c28:	d101      	bne.n	8002c2e <_vfiprintf_r+0xda>
 8002c2a:	68b4      	ldr	r4, [r6, #8]
 8002c2c:	e7a2      	b.n	8002b74 <_vfiprintf_r+0x20>
 8002c2e:	4b4f      	ldr	r3, [pc, #316]	; (8002d6c <_vfiprintf_r+0x218>)
 8002c30:	429c      	cmp	r4, r3
 8002c32:	bf08      	it	eq
 8002c34:	68f4      	ldreq	r4, [r6, #12]
 8002c36:	e79d      	b.n	8002b74 <_vfiprintf_r+0x20>
 8002c38:	4621      	mov	r1, r4
 8002c3a:	4630      	mov	r0, r6
 8002c3c:	f7ff fd6c 	bl	8002718 <__swsetup_r>
 8002c40:	2800      	cmp	r0, #0
 8002c42:	d09d      	beq.n	8002b80 <_vfiprintf_r+0x2c>
 8002c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c48:	b01d      	add	sp, #116	; 0x74
 8002c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c4e:	46a8      	mov	r8, r5
 8002c50:	e7a2      	b.n	8002b98 <_vfiprintf_r+0x44>
 8002c52:	4a44      	ldr	r2, [pc, #272]	; (8002d64 <_vfiprintf_r+0x210>)
 8002c54:	1a80      	subs	r0, r0, r2
 8002c56:	fa0b f000 	lsl.w	r0, fp, r0
 8002c5a:	4318      	orrs	r0, r3
 8002c5c:	9004      	str	r0, [sp, #16]
 8002c5e:	4645      	mov	r5, r8
 8002c60:	e7be      	b.n	8002be0 <_vfiprintf_r+0x8c>
 8002c62:	9a03      	ldr	r2, [sp, #12]
 8002c64:	1d11      	adds	r1, r2, #4
 8002c66:	6812      	ldr	r2, [r2, #0]
 8002c68:	9103      	str	r1, [sp, #12]
 8002c6a:	2a00      	cmp	r2, #0
 8002c6c:	db01      	blt.n	8002c72 <_vfiprintf_r+0x11e>
 8002c6e:	9207      	str	r2, [sp, #28]
 8002c70:	e004      	b.n	8002c7c <_vfiprintf_r+0x128>
 8002c72:	4252      	negs	r2, r2
 8002c74:	f043 0302 	orr.w	r3, r3, #2
 8002c78:	9207      	str	r2, [sp, #28]
 8002c7a:	9304      	str	r3, [sp, #16]
 8002c7c:	f898 3000 	ldrb.w	r3, [r8]
 8002c80:	2b2e      	cmp	r3, #46	; 0x2e
 8002c82:	d10e      	bne.n	8002ca2 <_vfiprintf_r+0x14e>
 8002c84:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002c88:	2b2a      	cmp	r3, #42	; 0x2a
 8002c8a:	d138      	bne.n	8002cfe <_vfiprintf_r+0x1aa>
 8002c8c:	9b03      	ldr	r3, [sp, #12]
 8002c8e:	1d1a      	adds	r2, r3, #4
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	9203      	str	r2, [sp, #12]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	bfb8      	it	lt
 8002c98:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002c9c:	f108 0802 	add.w	r8, r8, #2
 8002ca0:	9305      	str	r3, [sp, #20]
 8002ca2:	4d33      	ldr	r5, [pc, #204]	; (8002d70 <_vfiprintf_r+0x21c>)
 8002ca4:	f898 1000 	ldrb.w	r1, [r8]
 8002ca8:	2203      	movs	r2, #3
 8002caa:	4628      	mov	r0, r5
 8002cac:	f7fd fab8 	bl	8000220 <memchr>
 8002cb0:	b140      	cbz	r0, 8002cc4 <_vfiprintf_r+0x170>
 8002cb2:	2340      	movs	r3, #64	; 0x40
 8002cb4:	1b40      	subs	r0, r0, r5
 8002cb6:	fa03 f000 	lsl.w	r0, r3, r0
 8002cba:	9b04      	ldr	r3, [sp, #16]
 8002cbc:	4303      	orrs	r3, r0
 8002cbe:	f108 0801 	add.w	r8, r8, #1
 8002cc2:	9304      	str	r3, [sp, #16]
 8002cc4:	f898 1000 	ldrb.w	r1, [r8]
 8002cc8:	482a      	ldr	r0, [pc, #168]	; (8002d74 <_vfiprintf_r+0x220>)
 8002cca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002cce:	2206      	movs	r2, #6
 8002cd0:	f108 0701 	add.w	r7, r8, #1
 8002cd4:	f7fd faa4 	bl	8000220 <memchr>
 8002cd8:	2800      	cmp	r0, #0
 8002cda:	d037      	beq.n	8002d4c <_vfiprintf_r+0x1f8>
 8002cdc:	4b26      	ldr	r3, [pc, #152]	; (8002d78 <_vfiprintf_r+0x224>)
 8002cde:	bb1b      	cbnz	r3, 8002d28 <_vfiprintf_r+0x1d4>
 8002ce0:	9b03      	ldr	r3, [sp, #12]
 8002ce2:	3307      	adds	r3, #7
 8002ce4:	f023 0307 	bic.w	r3, r3, #7
 8002ce8:	3308      	adds	r3, #8
 8002cea:	9303      	str	r3, [sp, #12]
 8002cec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cee:	444b      	add	r3, r9
 8002cf0:	9309      	str	r3, [sp, #36]	; 0x24
 8002cf2:	e750      	b.n	8002b96 <_vfiprintf_r+0x42>
 8002cf4:	fb05 3202 	mla	r2, r5, r2, r3
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	4688      	mov	r8, r1
 8002cfc:	e78a      	b.n	8002c14 <_vfiprintf_r+0xc0>
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f108 0801 	add.w	r8, r8, #1
 8002d04:	9305      	str	r3, [sp, #20]
 8002d06:	4619      	mov	r1, r3
 8002d08:	250a      	movs	r5, #10
 8002d0a:	4640      	mov	r0, r8
 8002d0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d10:	3a30      	subs	r2, #48	; 0x30
 8002d12:	2a09      	cmp	r2, #9
 8002d14:	d903      	bls.n	8002d1e <_vfiprintf_r+0x1ca>
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0c3      	beq.n	8002ca2 <_vfiprintf_r+0x14e>
 8002d1a:	9105      	str	r1, [sp, #20]
 8002d1c:	e7c1      	b.n	8002ca2 <_vfiprintf_r+0x14e>
 8002d1e:	fb05 2101 	mla	r1, r5, r1, r2
 8002d22:	2301      	movs	r3, #1
 8002d24:	4680      	mov	r8, r0
 8002d26:	e7f0      	b.n	8002d0a <_vfiprintf_r+0x1b6>
 8002d28:	ab03      	add	r3, sp, #12
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	4622      	mov	r2, r4
 8002d2e:	4b13      	ldr	r3, [pc, #76]	; (8002d7c <_vfiprintf_r+0x228>)
 8002d30:	a904      	add	r1, sp, #16
 8002d32:	4630      	mov	r0, r6
 8002d34:	f3af 8000 	nop.w
 8002d38:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002d3c:	4681      	mov	r9, r0
 8002d3e:	d1d5      	bne.n	8002cec <_vfiprintf_r+0x198>
 8002d40:	89a3      	ldrh	r3, [r4, #12]
 8002d42:	065b      	lsls	r3, r3, #25
 8002d44:	f53f af7e 	bmi.w	8002c44 <_vfiprintf_r+0xf0>
 8002d48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d4a:	e77d      	b.n	8002c48 <_vfiprintf_r+0xf4>
 8002d4c:	ab03      	add	r3, sp, #12
 8002d4e:	9300      	str	r3, [sp, #0]
 8002d50:	4622      	mov	r2, r4
 8002d52:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <_vfiprintf_r+0x228>)
 8002d54:	a904      	add	r1, sp, #16
 8002d56:	4630      	mov	r0, r6
 8002d58:	f000 f888 	bl	8002e6c <_printf_i>
 8002d5c:	e7ec      	b.n	8002d38 <_vfiprintf_r+0x1e4>
 8002d5e:	bf00      	nop
 8002d60:	08003344 	.word	0x08003344
 8002d64:	08003388 	.word	0x08003388
 8002d68:	08003364 	.word	0x08003364
 8002d6c:	08003324 	.word	0x08003324
 8002d70:	0800338e 	.word	0x0800338e
 8002d74:	08003392 	.word	0x08003392
 8002d78:	00000000 	.word	0x00000000
 8002d7c:	08002b2f 	.word	0x08002b2f

08002d80 <_printf_common>:
 8002d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d84:	4691      	mov	r9, r2
 8002d86:	461f      	mov	r7, r3
 8002d88:	688a      	ldr	r2, [r1, #8]
 8002d8a:	690b      	ldr	r3, [r1, #16]
 8002d8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002d90:	4293      	cmp	r3, r2
 8002d92:	bfb8      	it	lt
 8002d94:	4613      	movlt	r3, r2
 8002d96:	f8c9 3000 	str.w	r3, [r9]
 8002d9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002d9e:	4606      	mov	r6, r0
 8002da0:	460c      	mov	r4, r1
 8002da2:	b112      	cbz	r2, 8002daa <_printf_common+0x2a>
 8002da4:	3301      	adds	r3, #1
 8002da6:	f8c9 3000 	str.w	r3, [r9]
 8002daa:	6823      	ldr	r3, [r4, #0]
 8002dac:	0699      	lsls	r1, r3, #26
 8002dae:	bf42      	ittt	mi
 8002db0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002db4:	3302      	addmi	r3, #2
 8002db6:	f8c9 3000 	strmi.w	r3, [r9]
 8002dba:	6825      	ldr	r5, [r4, #0]
 8002dbc:	f015 0506 	ands.w	r5, r5, #6
 8002dc0:	d107      	bne.n	8002dd2 <_printf_common+0x52>
 8002dc2:	f104 0a19 	add.w	sl, r4, #25
 8002dc6:	68e3      	ldr	r3, [r4, #12]
 8002dc8:	f8d9 2000 	ldr.w	r2, [r9]
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	42ab      	cmp	r3, r5
 8002dd0:	dc28      	bgt.n	8002e24 <_printf_common+0xa4>
 8002dd2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002dd6:	6822      	ldr	r2, [r4, #0]
 8002dd8:	3300      	adds	r3, #0
 8002dda:	bf18      	it	ne
 8002ddc:	2301      	movne	r3, #1
 8002dde:	0692      	lsls	r2, r2, #26
 8002de0:	d42d      	bmi.n	8002e3e <_printf_common+0xbe>
 8002de2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002de6:	4639      	mov	r1, r7
 8002de8:	4630      	mov	r0, r6
 8002dea:	47c0      	blx	r8
 8002dec:	3001      	adds	r0, #1
 8002dee:	d020      	beq.n	8002e32 <_printf_common+0xb2>
 8002df0:	6823      	ldr	r3, [r4, #0]
 8002df2:	68e5      	ldr	r5, [r4, #12]
 8002df4:	f8d9 2000 	ldr.w	r2, [r9]
 8002df8:	f003 0306 	and.w	r3, r3, #6
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	bf08      	it	eq
 8002e00:	1aad      	subeq	r5, r5, r2
 8002e02:	68a3      	ldr	r3, [r4, #8]
 8002e04:	6922      	ldr	r2, [r4, #16]
 8002e06:	bf0c      	ite	eq
 8002e08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e0c:	2500      	movne	r5, #0
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	bfc4      	itt	gt
 8002e12:	1a9b      	subgt	r3, r3, r2
 8002e14:	18ed      	addgt	r5, r5, r3
 8002e16:	f04f 0900 	mov.w	r9, #0
 8002e1a:	341a      	adds	r4, #26
 8002e1c:	454d      	cmp	r5, r9
 8002e1e:	d11a      	bne.n	8002e56 <_printf_common+0xd6>
 8002e20:	2000      	movs	r0, #0
 8002e22:	e008      	b.n	8002e36 <_printf_common+0xb6>
 8002e24:	2301      	movs	r3, #1
 8002e26:	4652      	mov	r2, sl
 8002e28:	4639      	mov	r1, r7
 8002e2a:	4630      	mov	r0, r6
 8002e2c:	47c0      	blx	r8
 8002e2e:	3001      	adds	r0, #1
 8002e30:	d103      	bne.n	8002e3a <_printf_common+0xba>
 8002e32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e3a:	3501      	adds	r5, #1
 8002e3c:	e7c3      	b.n	8002dc6 <_printf_common+0x46>
 8002e3e:	18e1      	adds	r1, r4, r3
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	2030      	movs	r0, #48	; 0x30
 8002e44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e48:	4422      	add	r2, r4
 8002e4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e52:	3302      	adds	r3, #2
 8002e54:	e7c5      	b.n	8002de2 <_printf_common+0x62>
 8002e56:	2301      	movs	r3, #1
 8002e58:	4622      	mov	r2, r4
 8002e5a:	4639      	mov	r1, r7
 8002e5c:	4630      	mov	r0, r6
 8002e5e:	47c0      	blx	r8
 8002e60:	3001      	adds	r0, #1
 8002e62:	d0e6      	beq.n	8002e32 <_printf_common+0xb2>
 8002e64:	f109 0901 	add.w	r9, r9, #1
 8002e68:	e7d8      	b.n	8002e1c <_printf_common+0x9c>
	...

08002e6c <_printf_i>:
 8002e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002e74:	460c      	mov	r4, r1
 8002e76:	7e09      	ldrb	r1, [r1, #24]
 8002e78:	b085      	sub	sp, #20
 8002e7a:	296e      	cmp	r1, #110	; 0x6e
 8002e7c:	4617      	mov	r7, r2
 8002e7e:	4606      	mov	r6, r0
 8002e80:	4698      	mov	r8, r3
 8002e82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002e84:	f000 80b3 	beq.w	8002fee <_printf_i+0x182>
 8002e88:	d822      	bhi.n	8002ed0 <_printf_i+0x64>
 8002e8a:	2963      	cmp	r1, #99	; 0x63
 8002e8c:	d036      	beq.n	8002efc <_printf_i+0x90>
 8002e8e:	d80a      	bhi.n	8002ea6 <_printf_i+0x3a>
 8002e90:	2900      	cmp	r1, #0
 8002e92:	f000 80b9 	beq.w	8003008 <_printf_i+0x19c>
 8002e96:	2958      	cmp	r1, #88	; 0x58
 8002e98:	f000 8083 	beq.w	8002fa2 <_printf_i+0x136>
 8002e9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ea0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002ea4:	e032      	b.n	8002f0c <_printf_i+0xa0>
 8002ea6:	2964      	cmp	r1, #100	; 0x64
 8002ea8:	d001      	beq.n	8002eae <_printf_i+0x42>
 8002eaa:	2969      	cmp	r1, #105	; 0x69
 8002eac:	d1f6      	bne.n	8002e9c <_printf_i+0x30>
 8002eae:	6820      	ldr	r0, [r4, #0]
 8002eb0:	6813      	ldr	r3, [r2, #0]
 8002eb2:	0605      	lsls	r5, r0, #24
 8002eb4:	f103 0104 	add.w	r1, r3, #4
 8002eb8:	d52a      	bpl.n	8002f10 <_printf_i+0xa4>
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6011      	str	r1, [r2, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	da03      	bge.n	8002eca <_printf_i+0x5e>
 8002ec2:	222d      	movs	r2, #45	; 0x2d
 8002ec4:	425b      	negs	r3, r3
 8002ec6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002eca:	486f      	ldr	r0, [pc, #444]	; (8003088 <_printf_i+0x21c>)
 8002ecc:	220a      	movs	r2, #10
 8002ece:	e039      	b.n	8002f44 <_printf_i+0xd8>
 8002ed0:	2973      	cmp	r1, #115	; 0x73
 8002ed2:	f000 809d 	beq.w	8003010 <_printf_i+0x1a4>
 8002ed6:	d808      	bhi.n	8002eea <_printf_i+0x7e>
 8002ed8:	296f      	cmp	r1, #111	; 0x6f
 8002eda:	d020      	beq.n	8002f1e <_printf_i+0xb2>
 8002edc:	2970      	cmp	r1, #112	; 0x70
 8002ede:	d1dd      	bne.n	8002e9c <_printf_i+0x30>
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	f043 0320 	orr.w	r3, r3, #32
 8002ee6:	6023      	str	r3, [r4, #0]
 8002ee8:	e003      	b.n	8002ef2 <_printf_i+0x86>
 8002eea:	2975      	cmp	r1, #117	; 0x75
 8002eec:	d017      	beq.n	8002f1e <_printf_i+0xb2>
 8002eee:	2978      	cmp	r1, #120	; 0x78
 8002ef0:	d1d4      	bne.n	8002e9c <_printf_i+0x30>
 8002ef2:	2378      	movs	r3, #120	; 0x78
 8002ef4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ef8:	4864      	ldr	r0, [pc, #400]	; (800308c <_printf_i+0x220>)
 8002efa:	e055      	b.n	8002fa8 <_printf_i+0x13c>
 8002efc:	6813      	ldr	r3, [r2, #0]
 8002efe:	1d19      	adds	r1, r3, #4
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	6011      	str	r1, [r2, #0]
 8002f04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e08c      	b.n	800302a <_printf_i+0x1be>
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6011      	str	r1, [r2, #0]
 8002f14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f18:	bf18      	it	ne
 8002f1a:	b21b      	sxthne	r3, r3
 8002f1c:	e7cf      	b.n	8002ebe <_printf_i+0x52>
 8002f1e:	6813      	ldr	r3, [r2, #0]
 8002f20:	6825      	ldr	r5, [r4, #0]
 8002f22:	1d18      	adds	r0, r3, #4
 8002f24:	6010      	str	r0, [r2, #0]
 8002f26:	0628      	lsls	r0, r5, #24
 8002f28:	d501      	bpl.n	8002f2e <_printf_i+0xc2>
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	e002      	b.n	8002f34 <_printf_i+0xc8>
 8002f2e:	0668      	lsls	r0, r5, #25
 8002f30:	d5fb      	bpl.n	8002f2a <_printf_i+0xbe>
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	4854      	ldr	r0, [pc, #336]	; (8003088 <_printf_i+0x21c>)
 8002f36:	296f      	cmp	r1, #111	; 0x6f
 8002f38:	bf14      	ite	ne
 8002f3a:	220a      	movne	r2, #10
 8002f3c:	2208      	moveq	r2, #8
 8002f3e:	2100      	movs	r1, #0
 8002f40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f44:	6865      	ldr	r5, [r4, #4]
 8002f46:	60a5      	str	r5, [r4, #8]
 8002f48:	2d00      	cmp	r5, #0
 8002f4a:	f2c0 8095 	blt.w	8003078 <_printf_i+0x20c>
 8002f4e:	6821      	ldr	r1, [r4, #0]
 8002f50:	f021 0104 	bic.w	r1, r1, #4
 8002f54:	6021      	str	r1, [r4, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d13d      	bne.n	8002fd6 <_printf_i+0x16a>
 8002f5a:	2d00      	cmp	r5, #0
 8002f5c:	f040 808e 	bne.w	800307c <_printf_i+0x210>
 8002f60:	4665      	mov	r5, ip
 8002f62:	2a08      	cmp	r2, #8
 8002f64:	d10b      	bne.n	8002f7e <_printf_i+0x112>
 8002f66:	6823      	ldr	r3, [r4, #0]
 8002f68:	07db      	lsls	r3, r3, #31
 8002f6a:	d508      	bpl.n	8002f7e <_printf_i+0x112>
 8002f6c:	6923      	ldr	r3, [r4, #16]
 8002f6e:	6862      	ldr	r2, [r4, #4]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	bfde      	ittt	le
 8002f74:	2330      	movle	r3, #48	; 0x30
 8002f76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002f7a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8002f7e:	ebac 0305 	sub.w	r3, ip, r5
 8002f82:	6123      	str	r3, [r4, #16]
 8002f84:	f8cd 8000 	str.w	r8, [sp]
 8002f88:	463b      	mov	r3, r7
 8002f8a:	aa03      	add	r2, sp, #12
 8002f8c:	4621      	mov	r1, r4
 8002f8e:	4630      	mov	r0, r6
 8002f90:	f7ff fef6 	bl	8002d80 <_printf_common>
 8002f94:	3001      	adds	r0, #1
 8002f96:	d14d      	bne.n	8003034 <_printf_i+0x1c8>
 8002f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f9c:	b005      	add	sp, #20
 8002f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002fa2:	4839      	ldr	r0, [pc, #228]	; (8003088 <_printf_i+0x21c>)
 8002fa4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002fa8:	6813      	ldr	r3, [r2, #0]
 8002faa:	6821      	ldr	r1, [r4, #0]
 8002fac:	1d1d      	adds	r5, r3, #4
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6015      	str	r5, [r2, #0]
 8002fb2:	060a      	lsls	r2, r1, #24
 8002fb4:	d50b      	bpl.n	8002fce <_printf_i+0x162>
 8002fb6:	07ca      	lsls	r2, r1, #31
 8002fb8:	bf44      	itt	mi
 8002fba:	f041 0120 	orrmi.w	r1, r1, #32
 8002fbe:	6021      	strmi	r1, [r4, #0]
 8002fc0:	b91b      	cbnz	r3, 8002fca <_printf_i+0x15e>
 8002fc2:	6822      	ldr	r2, [r4, #0]
 8002fc4:	f022 0220 	bic.w	r2, r2, #32
 8002fc8:	6022      	str	r2, [r4, #0]
 8002fca:	2210      	movs	r2, #16
 8002fcc:	e7b7      	b.n	8002f3e <_printf_i+0xd2>
 8002fce:	064d      	lsls	r5, r1, #25
 8002fd0:	bf48      	it	mi
 8002fd2:	b29b      	uxthmi	r3, r3
 8002fd4:	e7ef      	b.n	8002fb6 <_printf_i+0x14a>
 8002fd6:	4665      	mov	r5, ip
 8002fd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8002fdc:	fb02 3311 	mls	r3, r2, r1, r3
 8002fe0:	5cc3      	ldrb	r3, [r0, r3]
 8002fe2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	2900      	cmp	r1, #0
 8002fea:	d1f5      	bne.n	8002fd8 <_printf_i+0x16c>
 8002fec:	e7b9      	b.n	8002f62 <_printf_i+0xf6>
 8002fee:	6813      	ldr	r3, [r2, #0]
 8002ff0:	6825      	ldr	r5, [r4, #0]
 8002ff2:	6961      	ldr	r1, [r4, #20]
 8002ff4:	1d18      	adds	r0, r3, #4
 8002ff6:	6010      	str	r0, [r2, #0]
 8002ff8:	0628      	lsls	r0, r5, #24
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	d501      	bpl.n	8003002 <_printf_i+0x196>
 8002ffe:	6019      	str	r1, [r3, #0]
 8003000:	e002      	b.n	8003008 <_printf_i+0x19c>
 8003002:	066a      	lsls	r2, r5, #25
 8003004:	d5fb      	bpl.n	8002ffe <_printf_i+0x192>
 8003006:	8019      	strh	r1, [r3, #0]
 8003008:	2300      	movs	r3, #0
 800300a:	6123      	str	r3, [r4, #16]
 800300c:	4665      	mov	r5, ip
 800300e:	e7b9      	b.n	8002f84 <_printf_i+0x118>
 8003010:	6813      	ldr	r3, [r2, #0]
 8003012:	1d19      	adds	r1, r3, #4
 8003014:	6011      	str	r1, [r2, #0]
 8003016:	681d      	ldr	r5, [r3, #0]
 8003018:	6862      	ldr	r2, [r4, #4]
 800301a:	2100      	movs	r1, #0
 800301c:	4628      	mov	r0, r5
 800301e:	f7fd f8ff 	bl	8000220 <memchr>
 8003022:	b108      	cbz	r0, 8003028 <_printf_i+0x1bc>
 8003024:	1b40      	subs	r0, r0, r5
 8003026:	6060      	str	r0, [r4, #4]
 8003028:	6863      	ldr	r3, [r4, #4]
 800302a:	6123      	str	r3, [r4, #16]
 800302c:	2300      	movs	r3, #0
 800302e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003032:	e7a7      	b.n	8002f84 <_printf_i+0x118>
 8003034:	6923      	ldr	r3, [r4, #16]
 8003036:	462a      	mov	r2, r5
 8003038:	4639      	mov	r1, r7
 800303a:	4630      	mov	r0, r6
 800303c:	47c0      	blx	r8
 800303e:	3001      	adds	r0, #1
 8003040:	d0aa      	beq.n	8002f98 <_printf_i+0x12c>
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	079b      	lsls	r3, r3, #30
 8003046:	d413      	bmi.n	8003070 <_printf_i+0x204>
 8003048:	68e0      	ldr	r0, [r4, #12]
 800304a:	9b03      	ldr	r3, [sp, #12]
 800304c:	4298      	cmp	r0, r3
 800304e:	bfb8      	it	lt
 8003050:	4618      	movlt	r0, r3
 8003052:	e7a3      	b.n	8002f9c <_printf_i+0x130>
 8003054:	2301      	movs	r3, #1
 8003056:	464a      	mov	r2, r9
 8003058:	4639      	mov	r1, r7
 800305a:	4630      	mov	r0, r6
 800305c:	47c0      	blx	r8
 800305e:	3001      	adds	r0, #1
 8003060:	d09a      	beq.n	8002f98 <_printf_i+0x12c>
 8003062:	3501      	adds	r5, #1
 8003064:	68e3      	ldr	r3, [r4, #12]
 8003066:	9a03      	ldr	r2, [sp, #12]
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	42ab      	cmp	r3, r5
 800306c:	dcf2      	bgt.n	8003054 <_printf_i+0x1e8>
 800306e:	e7eb      	b.n	8003048 <_printf_i+0x1dc>
 8003070:	2500      	movs	r5, #0
 8003072:	f104 0919 	add.w	r9, r4, #25
 8003076:	e7f5      	b.n	8003064 <_printf_i+0x1f8>
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1ac      	bne.n	8002fd6 <_printf_i+0x16a>
 800307c:	7803      	ldrb	r3, [r0, #0]
 800307e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003082:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003086:	e76c      	b.n	8002f62 <_printf_i+0xf6>
 8003088:	08003399 	.word	0x08003399
 800308c:	080033aa 	.word	0x080033aa

08003090 <_read_r>:
 8003090:	b538      	push	{r3, r4, r5, lr}
 8003092:	4c07      	ldr	r4, [pc, #28]	; (80030b0 <_read_r+0x20>)
 8003094:	4605      	mov	r5, r0
 8003096:	4608      	mov	r0, r1
 8003098:	4611      	mov	r1, r2
 800309a:	2200      	movs	r2, #0
 800309c:	6022      	str	r2, [r4, #0]
 800309e:	461a      	mov	r2, r3
 80030a0:	f7fe fdde 	bl	8001c60 <_read>
 80030a4:	1c43      	adds	r3, r0, #1
 80030a6:	d102      	bne.n	80030ae <_read_r+0x1e>
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	b103      	cbz	r3, 80030ae <_read_r+0x1e>
 80030ac:	602b      	str	r3, [r5, #0]
 80030ae:	bd38      	pop	{r3, r4, r5, pc}
 80030b0:	200001f4 	.word	0x200001f4

080030b4 <_fstat_r>:
 80030b4:	b538      	push	{r3, r4, r5, lr}
 80030b6:	4c07      	ldr	r4, [pc, #28]	; (80030d4 <_fstat_r+0x20>)
 80030b8:	2300      	movs	r3, #0
 80030ba:	4605      	mov	r5, r0
 80030bc:	4608      	mov	r0, r1
 80030be:	4611      	mov	r1, r2
 80030c0:	6023      	str	r3, [r4, #0]
 80030c2:	f7fe fed2 	bl	8001e6a <_fstat>
 80030c6:	1c43      	adds	r3, r0, #1
 80030c8:	d102      	bne.n	80030d0 <_fstat_r+0x1c>
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	b103      	cbz	r3, 80030d0 <_fstat_r+0x1c>
 80030ce:	602b      	str	r3, [r5, #0]
 80030d0:	bd38      	pop	{r3, r4, r5, pc}
 80030d2:	bf00      	nop
 80030d4:	200001f4 	.word	0x200001f4

080030d8 <_isatty_r>:
 80030d8:	b538      	push	{r3, r4, r5, lr}
 80030da:	4c06      	ldr	r4, [pc, #24]	; (80030f4 <_isatty_r+0x1c>)
 80030dc:	2300      	movs	r3, #0
 80030de:	4605      	mov	r5, r0
 80030e0:	4608      	mov	r0, r1
 80030e2:	6023      	str	r3, [r4, #0]
 80030e4:	f7ff f826 	bl	8002134 <_isatty>
 80030e8:	1c43      	adds	r3, r0, #1
 80030ea:	d102      	bne.n	80030f2 <_isatty_r+0x1a>
 80030ec:	6823      	ldr	r3, [r4, #0]
 80030ee:	b103      	cbz	r3, 80030f2 <_isatty_r+0x1a>
 80030f0:	602b      	str	r3, [r5, #0]
 80030f2:	bd38      	pop	{r3, r4, r5, pc}
 80030f4:	200001f4 	.word	0x200001f4

080030f8 <_kill>:
 80030f8:	4b02      	ldr	r3, [pc, #8]	; (8003104 <_kill+0xc>)
 80030fa:	2258      	movs	r2, #88	; 0x58
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003102:	4770      	bx	lr
 8003104:	200001f4 	.word	0x200001f4

08003108 <_exit>:
 8003108:	e7fe      	b.n	8003108 <_exit>
	...

0800310c <_init>:
 800310c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800310e:	bf00      	nop
 8003110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003112:	bc08      	pop	{r3}
 8003114:	469e      	mov	lr, r3
 8003116:	4770      	bx	lr

08003118 <_fini>:
 8003118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311a:	bf00      	nop
 800311c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311e:	bc08      	pop	{r3}
 8003120:	469e      	mov	lr, r3
 8003122:	4770      	bx	lr
