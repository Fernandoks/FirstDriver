
FirstDriver-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002404  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  080025d4  080025d4  000125d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002858  08002858  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002858  08002858  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002858  08002858  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002858  08002858  00012858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800285c  0800285c  0001285c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000070  080028d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  2000014c  080028d0  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002e69  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000085d  00000000  00000000  00022f09  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001f0  00000000  00000000  00023768  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000198  00000000  00000000  00023958  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002a77  00000000  00000000  00023af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001e38  00000000  00000000  00026567  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b14e  00000000  00000000  0002839f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000334ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001314  00000000  00000000  00033568  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  0003487c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  000348a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080025bc 	.word	0x080025bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080025bc 	.word	0x080025bc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <SysTickInit>:

volatile uint32_t ticks;


void SysTickInit (void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
	//Enable Systick
	uint32_t temp = 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60bb      	str	r3, [r7, #8]
	uint32_t clock = 0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	60fb      	str	r3, [r7, #12]


	temp |= (3ul << 0U); // Enable counter and Exception
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	f043 0303 	orr.w	r3, r3, #3
 80002d4:	60bb      	str	r3, [r7, #8]
	temp |= (1ul << 1U); // 1 for internal clock, 0 for external
 80002d6:	68bb      	ldr	r3, [r7, #8]
 80002d8:	f043 0302 	orr.w	r3, r3, #2
 80002dc:	60bb      	str	r3, [r7, #8]
	*SYST_CSR |= temp;
 80002de:	4b0f      	ldr	r3, [pc, #60]	; (800031c <SysTickInit+0x5c>)
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	490e      	ldr	r1, [pc, #56]	; (800031c <SysTickInit+0x5c>)
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	4313      	orrs	r3, r2
 80002e8:	600b      	str	r3, [r1, #0]
	/*
	 * Get Clock - Systick receives (SYSClock*AHBPrescaler)/8
	 */


	RCC_RegDef_t* pRCC = RCC;
 80002ea:	4b0d      	ldr	r3, [pc, #52]	; (8000320 <SysTickInit+0x60>)
 80002ec:	607b      	str	r3, [r7, #4]

	if ( (pRCC->CR & (1ul << 0U)) == RESET  )
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	f003 0301 	and.w	r3, r3, #1
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SysTickInit+0x3e>
		//HSE
	}
	else
	{
		//clock = ( ((pRCC->CR) & (0xFF << 8U) ) >> 8U ) ; //bit 8 to 15 are HSI cal//HSI
		clock = (16000000/8); //bit 8 to 15 are HSI cal//HSI
 80002fa:	4b0a      	ldr	r3, [pc, #40]	; (8000324 <SysTickInit+0x64>)
 80002fc:	60fb      	str	r3, [r7, #12]
	}

	//set systick counter to interrupt each ms
	*SYST_RVR = ((clock/(1000))-1);
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	4a09      	ldr	r2, [pc, #36]	; (8000328 <SysTickInit+0x68>)
 8000302:	fba2 2303 	umull	r2, r3, r2, r3
 8000306:	099b      	lsrs	r3, r3, #6
 8000308:	4a08      	ldr	r2, [pc, #32]	; (800032c <SysTickInit+0x6c>)
 800030a:	3b01      	subs	r3, #1
 800030c:	6013      	str	r3, [r2, #0]



}
 800030e:	bf00      	nop
 8000310:	3714      	adds	r7, #20
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	e000e010 	.word	0xe000e010
 8000320:	40023800 	.word	0x40023800
 8000324:	001e8480 	.word	0x001e8480
 8000328:	10624dd3 	.word	0x10624dd3
 800032c:	e000e014 	.word	0xe000e014

08000330 <SysTick_Handler>:


void SysTick_Handler (void)
 {
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
   ticks++;
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <SysTick_Handler+0x18>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	3301      	adds	r3, #1
 800033a:	4a03      	ldr	r2, [pc, #12]	; (8000348 <SysTick_Handler+0x18>)
 800033c:	6013      	str	r3, [r2, #0]
 }
 800033e:	bf00      	nop
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	20000144 	.word	0x20000144

0800034c <millis>:


inline uint32_t millis (void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
   return ticks;
 8000350:	4b03      	ldr	r3, [pc, #12]	; (8000360 <millis+0x14>)
 8000352:	681b      	ldr	r3, [r3, #0]
}
 8000354:	4618      	mov	r0, r3
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	20000144 	.word	0x20000144

08000364 <delay_ms>:




void delay_ms (uint32_t t)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  uint32_t start, end;
  start = millis();
 800036c:	f7ff ffee 	bl	800034c <millis>
 8000370:	60f8      	str	r0, [r7, #12]
  end = start + t;
 8000372:	68fa      	ldr	r2, [r7, #12]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4413      	add	r3, r2
 8000378:	60bb      	str	r3, [r7, #8]
  if (start < end) {
 800037a:	68fa      	ldr	r2, [r7, #12]
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	429a      	cmp	r2, r3
 8000380:	d20d      	bcs.n	800039e <delay_ms+0x3a>
  	while ((millis() >= start) && (millis() < end)) {
 8000382:	bf00      	nop
 8000384:	f7ff ffe2 	bl	800034c <millis>
 8000388:	4602      	mov	r2, r0
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	4293      	cmp	r3, r2
 800038e:	d813      	bhi.n	80003b8 <delay_ms+0x54>
 8000390:	f7ff ffdc 	bl	800034c <millis>
 8000394:	4602      	mov	r2, r0
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	4293      	cmp	r3, r2
 800039a:	d8f3      	bhi.n	8000384 <delay_ms+0x20>
      // do nothing
    };
  }


}
 800039c:	e00c      	b.n	80003b8 <delay_ms+0x54>
    while ((millis() >= start) || (millis() < end)) {
 800039e:	bf00      	nop
 80003a0:	f7ff ffd4 	bl	800034c <millis>
 80003a4:	4602      	mov	r2, r0
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d9f9      	bls.n	80003a0 <delay_ms+0x3c>
 80003ac:	f7ff ffce 	bl	800034c <millis>
 80003b0:	4602      	mov	r2, r0
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d8f3      	bhi.n	80003a0 <delay_ms+0x3c>
}
 80003b8:	bf00      	nop
 80003ba:	3710      	adds	r7, #16
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}

080003c0 <GPIO_PeriClockControl>:
 * @Param2:					Enable or Disable macro
 * @Return:					-
 * @Note:					-
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnableDisable){
 80003c0:	b480      	push	{r7}
 80003c2:	b083      	sub	sp, #12
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	460b      	mov	r3, r1
 80003ca:	70fb      	strb	r3, [r7, #3]

	if (EnableDisable == ENABLE){
 80003cc:	78fb      	ldrb	r3, [r7, #3]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d14c      	bne.n	800046c <GPIO_PeriClockControl+0xac>
		if(pGPIOx == GPIOA){
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a4e      	ldr	r2, [pc, #312]	; (8000510 <GPIO_PeriClockControl+0x150>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d106      	bne.n	80003e8 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 80003da:	4b4e      	ldr	r3, [pc, #312]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003de:	4a4d      	ldr	r2, [pc, #308]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80003e0:	f043 0301 	orr.w	r3, r3, #1
 80003e4:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}

	}
}
 80003e6:	e08d      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOB){
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a4b      	ldr	r2, [pc, #300]	; (8000518 <GPIO_PeriClockControl+0x158>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d106      	bne.n	80003fe <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003f0:	4b48      	ldr	r3, [pc, #288]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f4:	4a47      	ldr	r2, [pc, #284]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80003f6:	f043 0302 	orr.w	r3, r3, #2
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fc:	e082      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOC){
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a46      	ldr	r2, [pc, #280]	; (800051c <GPIO_PeriClockControl+0x15c>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000406:	4b43      	ldr	r3, [pc, #268]	; (8000514 <GPIO_PeriClockControl+0x154>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040a:	4a42      	ldr	r2, [pc, #264]	; (8000514 <GPIO_PeriClockControl+0x154>)
 800040c:	f043 0304 	orr.w	r3, r3, #4
 8000410:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000412:	e077      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOD){
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a42      	ldr	r2, [pc, #264]	; (8000520 <GPIO_PeriClockControl+0x160>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800041c:	4b3d      	ldr	r3, [pc, #244]	; (8000514 <GPIO_PeriClockControl+0x154>)
 800041e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000420:	4a3c      	ldr	r2, [pc, #240]	; (8000514 <GPIO_PeriClockControl+0x154>)
 8000422:	f043 0308 	orr.w	r3, r3, #8
 8000426:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000428:	e06c      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOE){
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a3d      	ldr	r2, [pc, #244]	; (8000524 <GPIO_PeriClockControl+0x164>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000432:	4b38      	ldr	r3, [pc, #224]	; (8000514 <GPIO_PeriClockControl+0x154>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	4a37      	ldr	r2, [pc, #220]	; (8000514 <GPIO_PeriClockControl+0x154>)
 8000438:	f043 0310 	orr.w	r3, r3, #16
 800043c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043e:	e061      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOF){
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a39      	ldr	r2, [pc, #228]	; (8000528 <GPIO_PeriClockControl+0x168>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000448:	4b32      	ldr	r3, [pc, #200]	; (8000514 <GPIO_PeriClockControl+0x154>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044c:	4a31      	ldr	r2, [pc, #196]	; (8000514 <GPIO_PeriClockControl+0x154>)
 800044e:	f043 0320 	orr.w	r3, r3, #32
 8000452:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000454:	e056      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOH){
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a2d      	ldr	r2, [pc, #180]	; (8000510 <GPIO_PeriClockControl+0x150>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d152      	bne.n	8000504 <GPIO_PeriClockControl+0x144>
			GPIOH_PCLK_EN();
 800045e:	4b2d      	ldr	r3, [pc, #180]	; (8000514 <GPIO_PeriClockControl+0x154>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	4a2c      	ldr	r2, [pc, #176]	; (8000514 <GPIO_PeriClockControl+0x154>)
 8000464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000468:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046a:	e04b      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		if(pGPIOx == GPIOA){
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a28      	ldr	r2, [pc, #160]	; (8000510 <GPIO_PeriClockControl+0x150>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d106      	bne.n	8000482 <GPIO_PeriClockControl+0xc2>
			GPIOA_PCLK_DI();
 8000474:	4b27      	ldr	r3, [pc, #156]	; (8000514 <GPIO_PeriClockControl+0x154>)
 8000476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000478:	4a26      	ldr	r2, [pc, #152]	; (8000514 <GPIO_PeriClockControl+0x154>)
 800047a:	f023 0301 	bic.w	r3, r3, #1
 800047e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000480:	e040      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOB){
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a24      	ldr	r2, [pc, #144]	; (8000518 <GPIO_PeriClockControl+0x158>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d106      	bne.n	8000498 <GPIO_PeriClockControl+0xd8>
			GPIOB_PCLK_DI();
 800048a:	4b22      	ldr	r3, [pc, #136]	; (8000514 <GPIO_PeriClockControl+0x154>)
 800048c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800048e:	4a21      	ldr	r2, [pc, #132]	; (8000514 <GPIO_PeriClockControl+0x154>)
 8000490:	f023 0304 	bic.w	r3, r3, #4
 8000494:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000496:	e035      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOC){
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a20      	ldr	r2, [pc, #128]	; (800051c <GPIO_PeriClockControl+0x15c>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d106      	bne.n	80004ae <GPIO_PeriClockControl+0xee>
			GPIOC_PCLK_DI();
 80004a0:	4b1c      	ldr	r3, [pc, #112]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80004a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a4:	4a1b      	ldr	r2, [pc, #108]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80004a6:	f023 0308 	bic.w	r3, r3, #8
 80004aa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ac:	e02a      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOD){
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4a1b      	ldr	r2, [pc, #108]	; (8000520 <GPIO_PeriClockControl+0x160>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d106      	bne.n	80004c4 <GPIO_PeriClockControl+0x104>
			GPIOD_PCLK_DI();
 80004b6:	4b17      	ldr	r3, [pc, #92]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80004b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ba:	4a16      	ldr	r2, [pc, #88]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80004bc:	f023 0310 	bic.w	r3, r3, #16
 80004c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c2:	e01f      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOE){
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4a17      	ldr	r2, [pc, #92]	; (8000524 <GPIO_PeriClockControl+0x164>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d106      	bne.n	80004da <GPIO_PeriClockControl+0x11a>
			GPIOE_PCLK_DI();
 80004cc:	4b11      	ldr	r3, [pc, #68]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80004ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d0:	4a10      	ldr	r2, [pc, #64]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80004d2:	f023 0320 	bic.w	r3, r3, #32
 80004d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d8:	e014      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOF){
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4a12      	ldr	r2, [pc, #72]	; (8000528 <GPIO_PeriClockControl+0x168>)
 80004de:	4293      	cmp	r3, r2
 80004e0:	d106      	bne.n	80004f0 <GPIO_PeriClockControl+0x130>
			GPIOF_PCLK_DI();
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80004e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ee:	e009      	b.n	8000504 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOH){
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	4a07      	ldr	r2, [pc, #28]	; (8000510 <GPIO_PeriClockControl+0x150>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d105      	bne.n	8000504 <GPIO_PeriClockControl+0x144>
			GPIOH_PCLK_DI();
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80004fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fc:	4a05      	ldr	r2, [pc, #20]	; (8000514 <GPIO_PeriClockControl+0x154>)
 80004fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000502:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	40020000 	.word	0x40020000
 8000514:	40023800 	.word	0x40023800
 8000518:	40020400 	.word	0x40020400
 800051c:	40020800 	.word	0x40020800
 8000520:	40020c00 	.word	0x40020c00
 8000524:	40021000 	.word	0x40021000
 8000528:	40021400 	.word	0x40021400

0800052c <GPIO_Init>:
 * @Return:					-
 * @Note:					-
 */


void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]

	assert(IS_GPIO_PORT(pGPIOHandle->pGPIOX));
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a98      	ldr	r2, [pc, #608]	; (800079c <GPIO_Init+0x270>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d028      	beq.n	8000590 <GPIO_Init+0x64>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4a97      	ldr	r2, [pc, #604]	; (80007a0 <GPIO_Init+0x274>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d023      	beq.n	8000590 <GPIO_Init+0x64>
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a95      	ldr	r2, [pc, #596]	; (80007a4 <GPIO_Init+0x278>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d01e      	beq.n	8000590 <GPIO_Init+0x64>
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a94      	ldr	r2, [pc, #592]	; (80007a8 <GPIO_Init+0x27c>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d019      	beq.n	8000590 <GPIO_Init+0x64>
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a92      	ldr	r2, [pc, #584]	; (80007ac <GPIO_Init+0x280>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d014      	beq.n	8000590 <GPIO_Init+0x64>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a91      	ldr	r2, [pc, #580]	; (80007b0 <GPIO_Init+0x284>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d00f      	beq.n	8000590 <GPIO_Init+0x64>
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a8f      	ldr	r2, [pc, #572]	; (80007b4 <GPIO_Init+0x288>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d00a      	beq.n	8000590 <GPIO_Init+0x64>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a87      	ldr	r2, [pc, #540]	; (800079c <GPIO_Init+0x270>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d005      	beq.n	8000590 <GPIO_Init+0x64>
 8000584:	4b8c      	ldr	r3, [pc, #560]	; (80007b8 <GPIO_Init+0x28c>)
 8000586:	4a8d      	ldr	r2, [pc, #564]	; (80007bc <GPIO_Init+0x290>)
 8000588:	2162      	movs	r1, #98	; 0x62
 800058a:	488d      	ldr	r0, [pc, #564]	; (80007c0 <GPIO_Init+0x294>)
 800058c:	f000 fc2e 	bl	8000dec <__assert_func>
	assert(IS_GPIO_PIN(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d005      	beq.n	80005a4 <GPIO_Init+0x78>
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	791b      	ldrb	r3, [r3, #4]
 800059c:	0c1b      	lsrs	r3, r3, #16
 800059e:	041b      	lsls	r3, r3, #16
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d005      	beq.n	80005b0 <GPIO_Init+0x84>
 80005a4:	4b87      	ldr	r3, [pc, #540]	; (80007c4 <GPIO_Init+0x298>)
 80005a6:	4a85      	ldr	r2, [pc, #532]	; (80007bc <GPIO_Init+0x290>)
 80005a8:	2163      	movs	r1, #99	; 0x63
 80005aa:	4885      	ldr	r0, [pc, #532]	; (80007c0 <GPIO_Init+0x294>)
 80005ac:	f000 fc1e 	bl	8000dec <__assert_func>
	assert(IS_GPIO_MODE(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode));
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	795b      	ldrb	r3, [r3, #5]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d01d      	beq.n	80005f4 <GPIO_Init+0xc8>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	795b      	ldrb	r3, [r3, #5]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d019      	beq.n	80005f4 <GPIO_Init+0xc8>
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	795b      	ldrb	r3, [r3, #5]
 80005c4:	2b02      	cmp	r3, #2
 80005c6:	d015      	beq.n	80005f4 <GPIO_Init+0xc8>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	795b      	ldrb	r3, [r3, #5]
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	d011      	beq.n	80005f4 <GPIO_Init+0xc8>
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	795b      	ldrb	r3, [r3, #5]
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	d00d      	beq.n	80005f4 <GPIO_Init+0xc8>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	795b      	ldrb	r3, [r3, #5]
 80005dc:	2b05      	cmp	r3, #5
 80005de:	d009      	beq.n	80005f4 <GPIO_Init+0xc8>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	795b      	ldrb	r3, [r3, #5]
 80005e4:	2b06      	cmp	r3, #6
 80005e6:	d005      	beq.n	80005f4 <GPIO_Init+0xc8>
 80005e8:	4b77      	ldr	r3, [pc, #476]	; (80007c8 <GPIO_Init+0x29c>)
 80005ea:	4a74      	ldr	r2, [pc, #464]	; (80007bc <GPIO_Init+0x290>)
 80005ec:	2164      	movs	r1, #100	; 0x64
 80005ee:	4874      	ldr	r0, [pc, #464]	; (80007c0 <GPIO_Init+0x294>)
 80005f0:	f000 fbfc 	bl	8000dec <__assert_func>
	assert(IS_GPIO_SPEED(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed));
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	799b      	ldrb	r3, [r3, #6]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d011      	beq.n	8000620 <GPIO_Init+0xf4>
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	799b      	ldrb	r3, [r3, #6]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d00d      	beq.n	8000620 <GPIO_Init+0xf4>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	799b      	ldrb	r3, [r3, #6]
 8000608:	2b02      	cmp	r3, #2
 800060a:	d009      	beq.n	8000620 <GPIO_Init+0xf4>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	799b      	ldrb	r3, [r3, #6]
 8000610:	2b03      	cmp	r3, #3
 8000612:	d005      	beq.n	8000620 <GPIO_Init+0xf4>
 8000614:	4b6d      	ldr	r3, [pc, #436]	; (80007cc <GPIO_Init+0x2a0>)
 8000616:	4a69      	ldr	r2, [pc, #420]	; (80007bc <GPIO_Init+0x290>)
 8000618:	2165      	movs	r1, #101	; 0x65
 800061a:	4869      	ldr	r0, [pc, #420]	; (80007c0 <GPIO_Init+0x294>)
 800061c:	f000 fbe6 	bl	8000dec <__assert_func>
	assert(IS_GPIO_PULL(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl));
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	79db      	ldrb	r3, [r3, #7]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d00d      	beq.n	8000644 <GPIO_Init+0x118>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	79db      	ldrb	r3, [r3, #7]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d009      	beq.n	8000644 <GPIO_Init+0x118>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	79db      	ldrb	r3, [r3, #7]
 8000634:	2b02      	cmp	r3, #2
 8000636:	d005      	beq.n	8000644 <GPIO_Init+0x118>
 8000638:	4b65      	ldr	r3, [pc, #404]	; (80007d0 <GPIO_Init+0x2a4>)
 800063a:	4a60      	ldr	r2, [pc, #384]	; (80007bc <GPIO_Init+0x290>)
 800063c:	2166      	movs	r1, #102	; 0x66
 800063e:	4860      	ldr	r0, [pc, #384]	; (80007c0 <GPIO_Init+0x294>)
 8000640:	f000 fbd4 	bl	8000dec <__assert_func>

	GPIO_PeriClockControl(pGPIOHandle->pGPIOX, ENABLE);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	2101      	movs	r1, #1
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff feb8 	bl	80003c0 <GPIO_PeriClockControl>


	uint32_t temp = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
	//Configure the mode
	//This first line tests if this is a interruption mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	795b      	ldrb	r3, [r3, #5]
 8000658:	2b03      	cmp	r3, #3
 800065a:	d814      	bhi.n	8000686 <GPIO_Init+0x15a>
	{
		temp |= ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode )<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Moder uses 2 bit for each position
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	795b      	ldrb	r3, [r3, #5]
 8000660:	461a      	mov	r2, r3
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	791b      	ldrb	r3, [r3, #4]
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	fa02 f303 	lsl.w	r3, r2, r3
 800066c:	461a      	mov	r2, r3
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	4313      	orrs	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOX->MODER |= temp;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	6819      	ldr	r1, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	430a      	orrs	r2, r1
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	e0cd      	b.n	8000822 <GPIO_Init+0x2f6>
	}
	else
	{
		/* Interrupt Mode*/
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	795b      	ldrb	r3, [r3, #5]
 800068a:	2b05      	cmp	r3, #5
 800068c:	d117      	bne.n	80006be <GPIO_Init+0x192>
		{
			//1.Configure FTSR and clear RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //SET FTSR
 800068e:	4b51      	ldr	r3, [pc, #324]	; (80007d4 <GPIO_Init+0x2a8>)
 8000690:	68db      	ldr	r3, [r3, #12]
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	7912      	ldrb	r2, [r2, #4]
 8000696:	4611      	mov	r1, r2
 8000698:	2201      	movs	r2, #1
 800069a:	408a      	lsls	r2, r1
 800069c:	4611      	mov	r1, r2
 800069e:	4a4d      	ldr	r2, [pc, #308]	; (80007d4 <GPIO_Init+0x2a8>)
 80006a0:	430b      	orrs	r3, r1
 80006a2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //RESET RTSR
 80006a4:	4b4b      	ldr	r3, [pc, #300]	; (80007d4 <GPIO_Init+0x2a8>)
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	7912      	ldrb	r2, [r2, #4]
 80006ac:	4611      	mov	r1, r2
 80006ae:	2201      	movs	r2, #1
 80006b0:	408a      	lsls	r2, r1
 80006b2:	43d2      	mvns	r2, r2
 80006b4:	4611      	mov	r1, r2
 80006b6:	4a47      	ldr	r2, [pc, #284]	; (80007d4 <GPIO_Init+0x2a8>)
 80006b8:	400b      	ands	r3, r1
 80006ba:	6093      	str	r3, [r2, #8]
 80006bc:	e035      	b.n	800072a <GPIO_Init+0x1fe>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795b      	ldrb	r3, [r3, #5]
 80006c2:	2b04      	cmp	r3, #4
 80006c4:	d117      	bne.n	80006f6 <GPIO_Init+0x1ca>
		{
			//1.Configure RTSR and clear FTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //SET RTSR
 80006c6:	4b43      	ldr	r3, [pc, #268]	; (80007d4 <GPIO_Init+0x2a8>)
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	7912      	ldrb	r2, [r2, #4]
 80006ce:	4611      	mov	r1, r2
 80006d0:	2201      	movs	r2, #1
 80006d2:	408a      	lsls	r2, r1
 80006d4:	4611      	mov	r1, r2
 80006d6:	4a3f      	ldr	r2, [pc, #252]	; (80007d4 <GPIO_Init+0x2a8>)
 80006d8:	430b      	orrs	r3, r1
 80006da:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //RESET FTSR
 80006dc:	4b3d      	ldr	r3, [pc, #244]	; (80007d4 <GPIO_Init+0x2a8>)
 80006de:	68db      	ldr	r3, [r3, #12]
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	7912      	ldrb	r2, [r2, #4]
 80006e4:	4611      	mov	r1, r2
 80006e6:	2201      	movs	r2, #1
 80006e8:	408a      	lsls	r2, r1
 80006ea:	43d2      	mvns	r2, r2
 80006ec:	4611      	mov	r1, r2
 80006ee:	4a39      	ldr	r2, [pc, #228]	; (80007d4 <GPIO_Init+0x2a8>)
 80006f0:	400b      	ands	r3, r1
 80006f2:	60d3      	str	r3, [r2, #12]
 80006f4:	e019      	b.n	800072a <GPIO_Init+0x1fe>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	795b      	ldrb	r3, [r3, #5]
 80006fa:	2b06      	cmp	r3, #6
 80006fc:	d115      	bne.n	800072a <GPIO_Init+0x1fe>
		{
			//1.configure FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //SET RTSR
 80006fe:	4b35      	ldr	r3, [pc, #212]	; (80007d4 <GPIO_Init+0x2a8>)
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	7912      	ldrb	r2, [r2, #4]
 8000706:	4611      	mov	r1, r2
 8000708:	2201      	movs	r2, #1
 800070a:	408a      	lsls	r2, r1
 800070c:	4611      	mov	r1, r2
 800070e:	4a31      	ldr	r2, [pc, #196]	; (80007d4 <GPIO_Init+0x2a8>)
 8000710:	430b      	orrs	r3, r1
 8000712:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //SET FTSR
 8000714:	4b2f      	ldr	r3, [pc, #188]	; (80007d4 <GPIO_Init+0x2a8>)
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	7912      	ldrb	r2, [r2, #4]
 800071c:	4611      	mov	r1, r2
 800071e:	2201      	movs	r2, #1
 8000720:	408a      	lsls	r2, r1
 8000722:	4611      	mov	r1, r2
 8000724:	4a2b      	ldr	r2, [pc, #172]	; (80007d4 <GPIO_Init+0x2a8>)
 8000726:	430b      	orrs	r3, r1
 8000728:	60d3      	str	r3, [r2, #12]
		}
		//2. Configure the GPIO port in the SYSCFG_EXTICR
		uint8_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4); //The division by 4 will identify each EXTICR register to use - 4 because each register uses 4 bits
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	791b      	ldrb	r3, [r3, #4]
 800072e:	089b      	lsrs	r3, r3, #2
 8000730:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4); //This will identify the position in the register
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	791b      	ldrb	r3, [r3, #4]
 8000736:	f003 0303 	and.w	r3, r3, #3
 800073a:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_PORT(pGPIOHandle->pGPIOX);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a16      	ldr	r2, [pc, #88]	; (800079c <GPIO_Init+0x270>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d050      	beq.n	80007e8 <GPIO_Init+0x2bc>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a15      	ldr	r2, [pc, #84]	; (80007a0 <GPIO_Init+0x274>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d049      	beq.n	80007e4 <GPIO_Init+0x2b8>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a13      	ldr	r2, [pc, #76]	; (80007a4 <GPIO_Init+0x278>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d042      	beq.n	80007e0 <GPIO_Init+0x2b4>
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a12      	ldr	r2, [pc, #72]	; (80007a8 <GPIO_Init+0x27c>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d03b      	beq.n	80007dc <GPIO_Init+0x2b0>
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a10      	ldr	r2, [pc, #64]	; (80007ac <GPIO_Init+0x280>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d034      	beq.n	80007d8 <GPIO_Init+0x2ac>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a0f      	ldr	r2, [pc, #60]	; (80007b0 <GPIO_Init+0x284>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d00f      	beq.n	8000798 <GPIO_Init+0x26c>
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a0d      	ldr	r2, [pc, #52]	; (80007b4 <GPIO_Init+0x288>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d008      	beq.n	8000794 <GPIO_Init+0x268>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a05      	ldr	r2, [pc, #20]	; (800079c <GPIO_Init+0x270>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d101      	bne.n	8000790 <GPIO_Init+0x264>
 800078c:	2307      	movs	r3, #7
 800078e:	e02c      	b.n	80007ea <GPIO_Init+0x2be>
 8000790:	2300      	movs	r3, #0
 8000792:	e02a      	b.n	80007ea <GPIO_Init+0x2be>
 8000794:	2306      	movs	r3, #6
 8000796:	e028      	b.n	80007ea <GPIO_Init+0x2be>
 8000798:	2305      	movs	r3, #5
 800079a:	e026      	b.n	80007ea <GPIO_Init+0x2be>
 800079c:	40020000 	.word	0x40020000
 80007a0:	40020400 	.word	0x40020400
 80007a4:	40020800 	.word	0x40020800
 80007a8:	40020c00 	.word	0x40020c00
 80007ac:	40021000 	.word	0x40021000
 80007b0:	40021400 	.word	0x40021400
 80007b4:	40021800 	.word	0x40021800
 80007b8:	080025d4 	.word	0x080025d4
 80007bc:	08002710 	.word	0x08002710
 80007c0:	080025f8 	.word	0x080025f8
 80007c4:	08002624 	.word	0x08002624
 80007c8:	0800265c 	.word	0x0800265c
 80007cc:	08002694 	.word	0x08002694
 80007d0:	080026d0 	.word	0x080026d0
 80007d4:	40013c00 	.word	0x40013c00
 80007d8:	2304      	movs	r3, #4
 80007da:	e006      	b.n	80007ea <GPIO_Init+0x2be>
 80007dc:	2303      	movs	r3, #3
 80007de:	e004      	b.n	80007ea <GPIO_Init+0x2be>
 80007e0:	2302      	movs	r3, #2
 80007e2:	e002      	b.n	80007ea <GPIO_Init+0x2be>
 80007e4:	2301      	movs	r3, #1
 80007e6:	e000      	b.n	80007ea <GPIO_Init+0x2be>
 80007e8:	2300      	movs	r3, #0
 80007ea:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 80007ec:	4b65      	ldr	r3, [pc, #404]	; (8000984 <GPIO_Init+0x458>)
 80007ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f0:	4a64      	ldr	r2, [pc, #400]	; (8000984 <GPIO_Init+0x458>)
 80007f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f6:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = ( portcode << (temp2 * 4));
 80007f8:	7a7a      	ldrb	r2, [r7, #9]
 80007fa:	7abb      	ldrb	r3, [r7, #10]
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	fa02 f103 	lsl.w	r1, r2, r3
 8000802:	4a61      	ldr	r2, [pc, #388]	; (8000988 <GPIO_Init+0x45c>)
 8000804:	7afb      	ldrb	r3, [r7, #11]
 8000806:	3302      	adds	r3, #2
 8000808:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800080c:	4b5f      	ldr	r3, [pc, #380]	; (800098c <GPIO_Init+0x460>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	7912      	ldrb	r2, [r2, #4]
 8000814:	4611      	mov	r1, r2
 8000816:	2201      	movs	r2, #1
 8000818:	408a      	lsls	r2, r1
 800081a:	4611      	mov	r1, r2
 800081c:	4a5b      	ldr	r2, [pc, #364]	; (800098c <GPIO_Init+0x460>)
 800081e:	430b      	orrs	r3, r1
 8000820:	6013      	str	r3, [r2, #0]

	}
	temp = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]

	//Configure speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	799b      	ldrb	r3, [r3, #6]
 800082a:	461a      	mov	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	791b      	ldrb	r3, [r3, #4]
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	fa02 f303 	lsl.w	r3, r2, r3
 8000836:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOX->OSPEEDER &= ~(3ul << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	6899      	ldr	r1, [r3, #8]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	791b      	ldrb	r3, [r3, #4]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	2203      	movs	r2, #3
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43da      	mvns	r2, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	400a      	ands	r2, r1
 8000852:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOX->OSPEEDER |= temp; //setting
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	6899      	ldr	r1, [r3, #8]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	430a      	orrs	r2, r1
 8000862:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]

	//configure PuPd
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	79db      	ldrb	r3, [r3, #7]
 800086c:	461a      	mov	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	791b      	ldrb	r3, [r3, #4]
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOX->PUPDR &= ~(3ul << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	68d9      	ldr	r1, [r3, #12]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	791b      	ldrb	r3, [r3, #4]
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	2203      	movs	r2, #3
 8000888:	fa02 f303 	lsl.w	r3, r2, r3
 800088c:	43da      	mvns	r2, r3
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	400a      	ands	r2, r1
 8000894:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOX->PUPDR |= temp;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	68d9      	ldr	r1, [r3, #12]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	68fa      	ldr	r2, [r7, #12]
 80008a2:	430a      	orrs	r2, r1
 80008a4:	60da      	str	r2, [r3, #12]
	temp = 0;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]

	// configure output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType) << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	7a1b      	ldrb	r3, [r3, #8]
 80008ae:	461a      	mov	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	791b      	ldrb	r3, [r3, #4]
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOX->OTYPER  &= ~(1ul << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	6859      	ldr	r1, [r3, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	791b      	ldrb	r3, [r3, #4]
 80008c4:	461a      	mov	r2, r3
 80008c6:	2301      	movs	r3, #1
 80008c8:	4093      	lsls	r3, r2
 80008ca:	43da      	mvns	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	400a      	ands	r2, r1
 80008d2:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOX->OTYPER |= temp;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	6859      	ldr	r1, [r3, #4]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	68fa      	ldr	r2, [r7, #12]
 80008e0:	430a      	orrs	r2, r1
 80008e2:	605a      	str	r2, [r3, #4]
	temp = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]

	//alternate function
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	795b      	ldrb	r3, [r3, #5]
 80008ec:	2b02      	cmp	r3, #2
 80008ee:	d145      	bne.n	800097c <GPIO_Init+0x450>
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < GPIO_PIN_8){
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	791b      	ldrb	r3, [r3, #4]
 80008f4:	2b07      	cmp	r3, #7
 80008f6:	d81f      	bhi.n	8000938 <GPIO_Init+0x40c>
			temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7a5b      	ldrb	r3, [r3, #9]
 80008fc:	461a      	mov	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	791b      	ldrb	r3, [r3, #4]
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	fa02 f303 	lsl.w	r3, r2, r3
 8000908:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOX->AFRL &= ~(15ul << ( 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	6a19      	ldr	r1, [r3, #32]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	791b      	ldrb	r3, [r3, #4]
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	220f      	movs	r2, #15
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	43da      	mvns	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	400a      	ands	r2, r1
 8000924:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOX->AFRL |= temp;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	6a19      	ldr	r1, [r3, #32]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	68fa      	ldr	r2, [r7, #12]
 8000932:	430a      	orrs	r2, r1
 8000934:	621a      	str	r2, [r3, #32]
 8000936:	e01f      	b.n	8000978 <GPIO_Init+0x44c>
		}
		else{
			temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7a5b      	ldrb	r3, [r3, #9]
 800093c:	461a      	mov	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	791b      	ldrb	r3, [r3, #4]
 8000942:	3b08      	subs	r3, #8
 8000944:	009b      	lsls	r3, r3, #2
 8000946:	fa02 f303 	lsl.w	r3, r2, r3
 800094a:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOX->AFRH &= ~(15ul << ( 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	791b      	ldrb	r3, [r3, #4]
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	220f      	movs	r2, #15
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43da      	mvns	r2, r3
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	400a      	ands	r2, r1
 8000966:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOX->AFRH |= temp;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	430a      	orrs	r2, r1
 8000976:	625a      	str	r2, [r3, #36]	; 0x24
		}
		temp = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
	}

}
 800097c:	bf00      	nop
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800
 8000988:	40013800 	.word	0x40013800
 800098c:	40013c00 	.word	0x40013c00

08000990 <GPIO_IRQInterruptConfig>:
 * @Param2:					IRQ priority
 * @Param3:					Enable or Disable
 * @Return:					None
 * @Note:					-
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnableDisable){
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	460a      	mov	r2, r1
 800099a:	71fb      	strb	r3, [r7, #7]
 800099c:	4613      	mov	r3, r2
 800099e:	71bb      	strb	r3, [r7, #6]

	if (EnableDisable == ENABLE)
 80009a0:	79bb      	ldrb	r3, [r7, #6]
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d133      	bne.n	8000a0e <GPIO_IRQInterruptConfig+0x7e>
	{
		if (IRQNumber < 32){
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	2b1f      	cmp	r3, #31
 80009aa:	d80a      	bhi.n	80009c2 <GPIO_IRQInterruptConfig+0x32>
			//NVIC_ISER0
			*NVIC_ISER0 |= (1 << IRQNumber);
 80009ac:	4b36      	ldr	r3, [pc, #216]	; (8000a88 <GPIO_IRQInterruptConfig+0xf8>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	79fa      	ldrb	r2, [r7, #7]
 80009b2:	2101      	movs	r1, #1
 80009b4:	fa01 f202 	lsl.w	r2, r1, r2
 80009b8:	4611      	mov	r1, r2
 80009ba:	4a33      	ldr	r2, [pc, #204]	; (8000a88 <GPIO_IRQInterruptConfig+0xf8>)
 80009bc:	430b      	orrs	r3, r1
 80009be:	6013      	str	r3, [r2, #0]
		else if (IRQNumber >= 64 && IRQNumber < 96){
			//NVIC_ICER2
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 80009c0:	e05c      	b.n	8000a7c <GPIO_IRQInterruptConfig+0xec>
		else if( IRQNumber >= 32 && IRQNumber < 64){
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b1f      	cmp	r3, #31
 80009c6:	d90f      	bls.n	80009e8 <GPIO_IRQInterruptConfig+0x58>
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	2b3f      	cmp	r3, #63	; 0x3f
 80009cc:	d80c      	bhi.n	80009e8 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 80009ce:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <GPIO_IRQInterruptConfig+0xfc>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	79fa      	ldrb	r2, [r7, #7]
 80009d4:	f002 021f 	and.w	r2, r2, #31
 80009d8:	2101      	movs	r1, #1
 80009da:	fa01 f202 	lsl.w	r2, r1, r2
 80009de:	4611      	mov	r1, r2
 80009e0:	4a2a      	ldr	r2, [pc, #168]	; (8000a8c <GPIO_IRQInterruptConfig+0xfc>)
 80009e2:	430b      	orrs	r3, r1
 80009e4:	6013      	str	r3, [r2, #0]
 80009e6:	e049      	b.n	8000a7c <GPIO_IRQInterruptConfig+0xec>
		else if (IRQNumber >= 64 && IRQNumber < 96){
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b3f      	cmp	r3, #63	; 0x3f
 80009ec:	d946      	bls.n	8000a7c <GPIO_IRQInterruptConfig+0xec>
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	2b5f      	cmp	r3, #95	; 0x5f
 80009f2:	d843      	bhi.n	8000a7c <GPIO_IRQInterruptConfig+0xec>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 80009f4:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <GPIO_IRQInterruptConfig+0x100>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	79fa      	ldrb	r2, [r7, #7]
 80009fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80009fe:	2101      	movs	r1, #1
 8000a00:	fa01 f202 	lsl.w	r2, r1, r2
 8000a04:	4611      	mov	r1, r2
 8000a06:	4a22      	ldr	r2, [pc, #136]	; (8000a90 <GPIO_IRQInterruptConfig+0x100>)
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	e036      	b.n	8000a7c <GPIO_IRQInterruptConfig+0xec>
	else if (EnableDisable == DISABLE){
 8000a0e:	79bb      	ldrb	r3, [r7, #6]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d133      	bne.n	8000a7c <GPIO_IRQInterruptConfig+0xec>
		if (IRQNumber < 32){
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	2b1f      	cmp	r3, #31
 8000a18:	d80a      	bhi.n	8000a30 <GPIO_IRQInterruptConfig+0xa0>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <GPIO_IRQInterruptConfig+0x104>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	79fa      	ldrb	r2, [r7, #7]
 8000a20:	2101      	movs	r1, #1
 8000a22:	fa01 f202 	lsl.w	r2, r1, r2
 8000a26:	4611      	mov	r1, r2
 8000a28:	4a1a      	ldr	r2, [pc, #104]	; (8000a94 <GPIO_IRQInterruptConfig+0x104>)
 8000a2a:	430b      	orrs	r3, r1
 8000a2c:	6013      	str	r3, [r2, #0]
}
 8000a2e:	e025      	b.n	8000a7c <GPIO_IRQInterruptConfig+0xec>
		else if( IRQNumber >= 32 && IRQNumber < 64){
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	2b1f      	cmp	r3, #31
 8000a34:	d90f      	bls.n	8000a56 <GPIO_IRQInterruptConfig+0xc6>
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	2b3f      	cmp	r3, #63	; 0x3f
 8000a3a:	d80c      	bhi.n	8000a56 <GPIO_IRQInterruptConfig+0xc6>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000a3c:	4b16      	ldr	r3, [pc, #88]	; (8000a98 <GPIO_IRQInterruptConfig+0x108>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	79fa      	ldrb	r2, [r7, #7]
 8000a42:	f002 021f 	and.w	r2, r2, #31
 8000a46:	2101      	movs	r1, #1
 8000a48:	fa01 f202 	lsl.w	r2, r1, r2
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <GPIO_IRQInterruptConfig+0x108>)
 8000a50:	430b      	orrs	r3, r1
 8000a52:	6013      	str	r3, [r2, #0]
 8000a54:	e012      	b.n	8000a7c <GPIO_IRQInterruptConfig+0xec>
		else if (IRQNumber >= 64 && IRQNumber < 96){
 8000a56:	79fb      	ldrb	r3, [r7, #7]
 8000a58:	2b3f      	cmp	r3, #63	; 0x3f
 8000a5a:	d90f      	bls.n	8000a7c <GPIO_IRQInterruptConfig+0xec>
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2b5f      	cmp	r3, #95	; 0x5f
 8000a60:	d80c      	bhi.n	8000a7c <GPIO_IRQInterruptConfig+0xec>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <GPIO_IRQInterruptConfig+0x10c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	79fa      	ldrb	r2, [r7, #7]
 8000a68:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a72:	4611      	mov	r1, r2
 8000a74:	4a09      	ldr	r2, [pc, #36]	; (8000a9c <GPIO_IRQInterruptConfig+0x10c>)
 8000a76:	430b      	orrs	r3, r1
 8000a78:	6013      	str	r3, [r2, #0]
}
 8000a7a:	e7ff      	b.n	8000a7c <GPIO_IRQInterruptConfig+0xec>
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000e100 	.word	0xe000e100
 8000a8c:	e000e104 	.word	0xe000e104
 8000a90:	e000e108 	.word	0xe000e108
 8000a94:	e000e180 	.word	0xe000e180
 8000a98:	e000e184 	.word	0xe000e184
 8000a9c:	e000e188 	.word	0xe000e188

08000aa0 <GPIO_IRQPriorityConfig>:
	 *	each register is divided by 8 bits each IRQnumbers
	 *	To find which IPR register, divide by 4 (3 IRQ in each register)
 ************************************************************************/


void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority){
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	460a      	mov	r2, r1
 8000aaa:	71fb      	strb	r3, [r7, #7]
 8000aac:	4613      	mov	r3, r2
 8000aae:	71bb      	strb	r3, [r7, #6]
		//Here we find the IPR register that needs to be configured
		uint8_t iprx = IRQNumber / 4;
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	089b      	lsrs	r3, r3, #2
 8000ab4:	73fb      	strb	r3, [r7, #15]
		//because each register is divided in 4 different IRQ, we use the MOD 4
		uint8_t iprx_section = IRQNumber % 4;
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f003 0303 	and.w	r3, r3, #3
 8000abc:	73bb      	strb	r3, [r7, #14]
		/*Each register is 32 bits so we multiply the register number by 4
		 * Notice the 4 lower bits are inaccessible, so we need to shift by 4
		 * to configure the 4 higher bits
		 */
		uint8_t shift_IRQ = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000abe:	7bbb      	ldrb	r3, [r7, #14]
 8000ac0:	00db      	lsls	r3, r3, #3
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	3304      	adds	r3, #4
 8000ac6:	737b      	strb	r3, [r7, #13]
		*(NVIC_PR_BASEADDRESS + (iprx * 4)) = (IRQPriority << shift_IRQ);
 8000ac8:	79ba      	ldrb	r2, [r7, #6]
 8000aca:	7b7b      	ldrb	r3, [r7, #13]
 8000acc:	409a      	lsls	r2, r3
 8000ace:	7bfb      	ldrb	r3, [r7, #15]
 8000ad0:	011b      	lsls	r3, r3, #4
 8000ad2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000ad6:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000ada:	601a      	str	r2, [r3, #0]
}
 8000adc:	bf00      	nop
 8000ade:	3714      	adds	r7, #20
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <GPIO_Clear_Interrupt>:
 * @Return:					None
 * @Note:					-
 ************************************************************************/


void GPIO_Clear_Interrupt(uint8_t PinNumber){
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
/*
 * Remember to use the correct implementation of the EXTI_IRQHandler
 * those functions are weak defined in Startup file
 */
	if( (EXTI->PR & (1 << PinNumber)) != 0){
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <GPIO_Clear_Interrupt+0x3c>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	79fa      	ldrb	r2, [r7, #7]
 8000af8:	2101      	movs	r1, #1
 8000afa:	fa01 f202 	lsl.w	r2, r1, r2
 8000afe:	4013      	ands	r3, r2
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d009      	beq.n	8000b18 <GPIO_Clear_Interrupt+0x30>
		EXTI->PR |= (1 << PinNumber); // PR register is cleared with setting 1.
 8000b04:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <GPIO_Clear_Interrupt+0x3c>)
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	79fa      	ldrb	r2, [r7, #7]
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b10:	4611      	mov	r1, r2
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <GPIO_Clear_Interrupt+0x3c>)
 8000b14:	430b      	orrs	r3, r1
 8000b16:	6153      	str	r3, [r2, #20]
	}
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	40013c00 	.word	0x40013c00

08000b28 <SPI_PeriClockControl>:
* @see SPI_PeriClockControl

*******************************************************************************/

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnableDisable)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	70fb      	strb	r3, [r7, #3]
	if (EnableDisable == ENABLE)
 8000b34:	78fb      	ldrb	r3, [r7, #3]
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	d12b      	bne.n	8000b92 <SPI_PeriClockControl+0x6a>
	{
		if (pSPIx == SPI1)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a2f      	ldr	r2, [pc, #188]	; (8000bfc <SPI_PeriClockControl+0xd4>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d106      	bne.n	8000b50 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000b42:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <SPI_PeriClockControl+0xd8>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	4a2e      	ldr	r2, [pc, #184]	; (8000c00 <SPI_PeriClockControl+0xd8>)
 8000b48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b4c:	6453      	str	r3, [r2, #68]	; 0x44
		else if (pSPIx == SPI4)
		{
			SPI4_PCLK_DI();
		}
	}
}
 8000b4e:	e04e      	b.n	8000bee <SPI_PeriClockControl+0xc6>
		else if (pSPIx == SPI2)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a2c      	ldr	r2, [pc, #176]	; (8000c04 <SPI_PeriClockControl+0xdc>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d106      	bne.n	8000b66 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000b58:	4b29      	ldr	r3, [pc, #164]	; (8000c00 <SPI_PeriClockControl+0xd8>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	4a28      	ldr	r2, [pc, #160]	; (8000c00 <SPI_PeriClockControl+0xd8>)
 8000b5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b62:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b64:	e043      	b.n	8000bee <SPI_PeriClockControl+0xc6>
		else if (pSPIx == SPI3)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a27      	ldr	r2, [pc, #156]	; (8000c08 <SPI_PeriClockControl+0xe0>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d106      	bne.n	8000b7c <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 8000b6e:	4b24      	ldr	r3, [pc, #144]	; (8000c00 <SPI_PeriClockControl+0xd8>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b72:	4a23      	ldr	r2, [pc, #140]	; (8000c00 <SPI_PeriClockControl+0xd8>)
 8000b74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b78:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b7a:	e038      	b.n	8000bee <SPI_PeriClockControl+0xc6>
		else if (pSPIx == SPI4)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a23      	ldr	r2, [pc, #140]	; (8000c0c <SPI_PeriClockControl+0xe4>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d134      	bne.n	8000bee <SPI_PeriClockControl+0xc6>
			SPI4_PCLK_EN();
 8000b84:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <SPI_PeriClockControl+0xd8>)
 8000b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b88:	4a1d      	ldr	r2, [pc, #116]	; (8000c00 <SPI_PeriClockControl+0xd8>)
 8000b8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b8e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b90:	e02d      	b.n	8000bee <SPI_PeriClockControl+0xc6>
	else if (EnableDisable == DISABLE)
 8000b92:	78fb      	ldrb	r3, [r7, #3]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d12a      	bne.n	8000bee <SPI_PeriClockControl+0xc6>
		if (pSPIx == SPI1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a18      	ldr	r2, [pc, #96]	; (8000bfc <SPI_PeriClockControl+0xd4>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d106      	bne.n	8000bae <SPI_PeriClockControl+0x86>
			SPI1_PCLK_DI();
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <SPI_PeriClockControl+0xd8>)
 8000ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba4:	4a16      	ldr	r2, [pc, #88]	; (8000c00 <SPI_PeriClockControl+0xd8>)
 8000ba6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000baa:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000bac:	e01f      	b.n	8000bee <SPI_PeriClockControl+0xc6>
		else if (pSPIx == SPI2)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a14      	ldr	r2, [pc, #80]	; (8000c04 <SPI_PeriClockControl+0xdc>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d106      	bne.n	8000bc4 <SPI_PeriClockControl+0x9c>
			SPI2_PCLK_DI();
 8000bb6:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <SPI_PeriClockControl+0xd8>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a11      	ldr	r2, [pc, #68]	; (8000c00 <SPI_PeriClockControl+0xd8>)
 8000bbc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bc2:	e014      	b.n	8000bee <SPI_PeriClockControl+0xc6>
		else if (pSPIx == SPI3)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a10      	ldr	r2, [pc, #64]	; (8000c08 <SPI_PeriClockControl+0xe0>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d106      	bne.n	8000bda <SPI_PeriClockControl+0xb2>
			SPI3_PCLK_DI();
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <SPI_PeriClockControl+0xd8>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	4a0b      	ldr	r2, [pc, #44]	; (8000c00 <SPI_PeriClockControl+0xd8>)
 8000bd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bd8:	e009      	b.n	8000bee <SPI_PeriClockControl+0xc6>
		else if (pSPIx == SPI4)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <SPI_PeriClockControl+0xe4>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d105      	bne.n	8000bee <SPI_PeriClockControl+0xc6>
			SPI4_PCLK_DI();
 8000be2:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <SPI_PeriClockControl+0xd8>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <SPI_PeriClockControl+0xd8>)
 8000be8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000bec:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40013000 	.word	0x40013000
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40003800 	.word	0x40003800
 8000c08:	40003c00 	.word	0x40003c00
 8000c0c:	40013400 	.word	0x40013400

08000c10 <SPI_Init>:
* @see SPI_Init

*******************************************************************************/

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

	//Clock Enable
	SPI_PeriClockControl(pSPIHandle->pSPIx,ENABLE);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff82 	bl	8000b28 <SPI_PeriClockControl>

	uint32_t tempreg = 0;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]

	//1. Configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	791b      	ldrb	r3, [r3, #4]
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	461a      	mov	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]

	//2. Configure the BUS Config

	if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUSCONFIG_FD)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	795b      	ldrb	r3, [r3, #5]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d104      	bne.n	8000c48 <SPI_Init+0x38>
	{
		//BIDI clear
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	e014      	b.n	8000c72 <SPI_Init+0x62>
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUSCONFIG_HD)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	795b      	ldrb	r3, [r3, #5]
 8000c4c:	2b02      	cmp	r3, #2
 8000c4e:	d104      	bne.n	8000c5a <SPI_Init+0x4a>
	{
		//BIDI SET
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	e00b      	b.n	8000c72 <SPI_Init+0x62>
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUSCONFIG_SIMPLEX_RXONLY)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	795b      	ldrb	r3, [r3, #5]
 8000c5e:	2b03      	cmp	r3, #3
 8000c60:	d107      	bne.n	8000c72 <SPI_Init+0x62>
	{
		//BIDI clear and RXONLY SET
		tempreg |= (1 << SPI_CR1_RXONLY);
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c68:	60fb      	str	r3, [r7, #12]
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c70:	60fb      	str	r3, [r7, #12]
	}

	//3. SPI_SPI_SclkSpeed;
	tempreg |= (pSPIHandle->SPIConfig.SPI_SPI_SclkSpeed << SPI_CR1_BR);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	799b      	ldrb	r3, [r3, #6]
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	461a      	mov	r2, r3
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	60fb      	str	r3, [r7, #12]


	//4. SPI_DFF;
	tempreg |= (pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	79db      	ldrb	r3, [r3, #7]
 8000c84:	02db      	lsls	r3, r3, #11
 8000c86:	461a      	mov	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]

	//5. SPI_CPOL;
	tempreg |= (pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	7a1b      	ldrb	r3, [r3, #8]
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	461a      	mov	r2, r3
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]

	//6. SPI_CPHA;
	tempreg |= (pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	7a5b      	ldrb	r3, [r3, #9]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	60fb      	str	r3, [r7, #12]

	//7. SPI_SSM;
	tempreg |= (pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	7a9b      	ldrb	r3, [r3, #10]
 8000cac:	025b      	lsls	r3, r3, #9
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	60fb      	str	r3, [r7, #12]

	//Push to register
	pSPIHandle->pSPIx->CR1 = tempreg;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	601a      	str	r2, [r3, #0]


}
 8000cbe:	bf00      	nop
 8000cc0:	3710      	adds	r7, #16
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <SPI_PeripheralControl>:
* @see SPI_PeripheralControl

*******************************************************************************/

void SPI_PeripheralControl(SPI_RegDef_t *pSPIRegDef, uint8_t EnableDisable)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	460b      	mov	r3, r1
 8000cd0:	70fb      	strb	r3, [r7, #3]
	if (EnableDisable == ENABLE)
 8000cd2:	78fb      	ldrb	r3, [r7, #3]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d106      	bne.n	8000ce6 <SPI_PeripheralControl+0x20>
	{
		pSPIRegDef->CR1 |= (1 << SPI_CR1_SPE);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	601a      	str	r2, [r3, #0]
	else
	{
		pSPIRegDef->CR1 &= ~(1 << SPI_CR1_SPE);
	}

}
 8000ce4:	e005      	b.n	8000cf2 <SPI_PeripheralControl+0x2c>
		pSPIRegDef->CR1 &= ~(1 << SPI_CR1_SPE);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	601a      	str	r2, [r3, #0]
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <SPI_Config_SSOE>:
*
* @see SPI_Config_SSOE

*******************************************************************************/
void SPI_Config_SSOE(SPI_RegDef_t *pSPIRegDef, uint8_t EnableDisable)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	b083      	sub	sp, #12
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
 8000d06:	460b      	mov	r3, r1
 8000d08:	70fb      	strb	r3, [r7, #3]
	if (EnableDisable == ENABLE)
 8000d0a:	78fb      	ldrb	r3, [r7, #3]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d106      	bne.n	8000d1e <SPI_Config_SSOE+0x20>
	{
		pSPIRegDef->CR2 |= (1 << SPI_CR2_SSOE);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f043 0204 	orr.w	r2, r3, #4
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	605a      	str	r2, [r3, #4]
	else
	{
		pSPIRegDef->CR2 &= ~(1 << SPI_CR2_SSOE);
	}

}
 8000d1c:	e005      	b.n	8000d2a <SPI_Config_SSOE+0x2c>
		pSPIRegDef->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f023 0204 	bic.w	r2, r3, #4
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	605a      	str	r2, [r3, #4]
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <SPI_GetFlagStatus>:

/*
 * FLAG Status
 */
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000d36:	b480      	push	{r7}
 8000d38:	b083      	sub	sp, #12
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]

	if (pSPIx->SR & FlagName)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	689a      	ldr	r2, [r3, #8]
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	4013      	ands	r3, r2
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	e000      	b.n	8000d52 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <SPI_SendData>:
/*
 * Data send and Receive - Blocking mode
 */

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTXBuffer, uint32_t Lenght)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b084      	sub	sp, #16
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
	while (Lenght > 0)
 8000d6a:	e014      	b.n	8000d96 <SPI_SendData+0x38>
	{
		//while( !( pSPIx->SR & (1 << SPI_SR_TXE) ) )  //This tests if the bit position is set
		while( SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET );
 8000d6c:	bf00      	nop
 8000d6e:	2102      	movs	r1, #2
 8000d70:	68f8      	ldr	r0, [r7, #12]
 8000d72:	f7ff ffe0 	bl	8000d36 <SPI_GetFlagStatus>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d0f8      	beq.n	8000d6e <SPI_SendData+0x10>

		//Verify the Frame format (8bits or 16 bits) using the CR1_DFF
		if ( (pSPIx->CR1 & (1 << SPI_CR1_DFF) ) == 1)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]

		}
		else
		{
			//8bits
			pSPIx->DR = *(pTXBuffer);
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	461a      	mov	r2, r3
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	60da      	str	r2, [r3, #12]
			pTXBuffer++;
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
		}
		Lenght--;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3b01      	subs	r3, #1
 8000d94:	607b      	str	r3, [r7, #4]
	while (Lenght > 0)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d1e7      	bne.n	8000d6c <SPI_SendData+0xe>
	}

}
 8000d9c:	bf00      	nop
 8000d9e:	3710      	adds	r7, #16
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <SPI_ReceiveData>:

/*
 * Receive data from SPI- Blocking mode
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRXBuffer, uint32_t Lenght)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
	while (Lenght > 0)
 8000db0:	e014      	b.n	8000ddc <SPI_ReceiveData+0x38>
	{
		//while( !( pSPIx->SR & (1 << SPI_SR_TXE) ) )  //This tests if the bit position is set
		while( SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET );
 8000db2:	bf00      	nop
 8000db4:	2101      	movs	r1, #1
 8000db6:	68f8      	ldr	r0, [r7, #12]
 8000db8:	f7ff ffbd 	bl	8000d36 <SPI_GetFlagStatus>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d0f8      	beq.n	8000db4 <SPI_ReceiveData+0x10>

		//Verify the Frame format (8bits or 16 bits) using the CR1_DFF
		if ( (pSPIx->CR1 & (1 << SPI_CR1_DFF) ) == 1)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]

		}
		else
		{
			//8bits
			*((uint16_t*)pRXBuffer) = pSPIx->DR;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	801a      	strh	r2, [r3, #0]
			pRXBuffer++;
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	3301      	adds	r3, #1
 8000dd4:	60bb      	str	r3, [r7, #8]
		}
		Lenght--;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	607b      	str	r3, [r7, #4]
	while (Lenght > 0)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d1e7      	bne.n	8000db2 <SPI_ReceiveData+0xe>
	}

}
 8000de2:	bf00      	nop
 8000de4:	3710      	adds	r7, #16
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <__assert_func>:

void
__attribute__((noreturn))
__assert_func (const char *file, int line, const char *func,
               const char *failedexpr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af02      	add	r7, sp, #8
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
 8000df8:	603b      	str	r3, [r7, #0]
#define SEMIHOSTING
#ifdef SEMIHOSTING
	printf("assertion \"%s\" failed: file \"%s\", line %d%s%s\n",
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <__assert_func+0x18>
 8000e00:	4a09      	ldr	r2, [pc, #36]	; (8000e28 <__assert_func+0x3c>)
 8000e02:	e000      	b.n	8000e06 <__assert_func+0x1a>
 8000e04:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <__assert_func+0x40>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <__assert_func+0x24>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	e000      	b.n	8000e12 <__assert_func+0x26>
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <__assert_func+0x40>)
 8000e12:	9301      	str	r3, [sp, #4]
 8000e14:	9200      	str	r2, [sp, #0]
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	6839      	ldr	r1, [r7, #0]
 8000e1c:	4804      	ldr	r0, [pc, #16]	; (8000e30 <__assert_func+0x44>)
 8000e1e:	f000 fd5b 	bl	80018d8 <iprintf>
                failedexpr, file, line, func ? ", function: " : "",
                func ? func : "");
#endif


	abort ();
 8000e22:	f000 fbfb 	bl	800161c <abort>
 8000e26:	bf00      	nop
 8000e28:	0800271c 	.word	0x0800271c
 8000e2c:	0800272c 	.word	0x0800272c
 8000e30:	08002730 	.word	0x08002730

08000e34 <main>:

/*
 * START PROGRAM
 */
int main()
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 8000e3a:	f000 fb75 	bl	8001528 <initialise_monitor_handles>

	printf("Program starting\n");
 8000e3e:	480e      	ldr	r0, [pc, #56]	; (8000e78 <main+0x44>)
 8000e40:	f000 fdbe 	bl	80019c0 <puts>

	SysTickInit();
 8000e44:	f7ff fa3c 	bl	80002c0 <SysTickInit>
	GPIO_Conf();
 8000e48:	f000 f8ce 	bl	8000fe8 <GPIO_Conf>
	SPI_Conf();
 8000e4c:	f000 f878 	bl	8000f40 <SPI_Conf>

	//ASSERT TESTING
	GPIO_Handle_t _GPIOTEST;
	_GPIOTEST.pGPIOX = 1;
 8000e50:	2301      	movs	r3, #1
 8000e52:	607b      	str	r3, [r7, #4]
	_GPIOTEST.GPIO_PinConfig.GPIO_PinNumber = 1;
 8000e54:	2301      	movs	r3, #1
 8000e56:	723b      	strb	r3, [r7, #8]
	_GPIOTEST.GPIO_PinConfig.GPIO_PinMode = 1;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	727b      	strb	r3, [r7, #9]
	_GPIOTEST.GPIO_PinConfig.GPIO_PinSpeed = 1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	72bb      	strb	r3, [r7, #10]
	_GPIOTEST.GPIO_PinConfig.GPIO_PinOPType = 1;
 8000e60:	2301      	movs	r3, #1
 8000e62:	733b      	strb	r3, [r7, #12]
	_GPIOTEST.GPIO_PinConfig.GPIO_PinPuPdControl = 1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	72fb      	strb	r3, [r7, #11]
	//GPIO_PeriClockControl(GPIOC, ENABLE);
	GPIO_Init(&_GPIOTEST);
 8000e68:	1d3b      	adds	r3, r7, #4
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff fb5e 	bl	800052c <GPIO_Init>


	while(1)
	{
		//GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_5);
		delay_ms(100);
 8000e70:	2064      	movs	r0, #100	; 0x64
 8000e72:	f7ff fa77 	bl	8000364 <delay_ms>
 8000e76:	e7fb      	b.n	8000e70 <main+0x3c>
 8000e78:	08002770 	.word	0x08002770

08000e7c <EXTI15_10_IRQHandler>:


/*
 * EXTI Handler
 */
void EXTI15_10_IRQHandler(void){
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
	uint8_t CMDCode = COMMAND_LED_CTRL;
 8000e82:	2350      	movs	r3, #80	; 0x50
 8000e84:	71bb      	strb	r3, [r7, #6]
	uint8_t Ack_byte = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	717b      	strb	r3, [r7, #5]
	uint8_t Dummy_Read = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	713b      	strb	r3, [r7, #4]
	uint8_t Dummy_Write = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	71fb      	strb	r3, [r7, #7]
	uint8_t args[2] = {0};
 8000e92:	2300      	movs	r3, #0
 8000e94:	803b      	strh	r3, [r7, #0]

	GPIO_Clear_Interrupt(GPIO_PIN_13);
 8000e96:	200d      	movs	r0, #13
 8000e98:	f7ff fe26 	bl	8000ae8 <GPIO_Clear_Interrupt>

	SPI_PeripheralControl(ARDUINO_SPI, ENABLE);
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	4825      	ldr	r0, [pc, #148]	; (8000f34 <EXTI15_10_IRQHandler+0xb8>)
 8000ea0:	f7ff ff11 	bl	8000cc6 <SPI_PeripheralControl>

	//Send the command
	SPI_SendData(ARDUINO_SPI, &CMDCode, 1);
 8000ea4:	1dbb      	adds	r3, r7, #6
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4822      	ldr	r0, [pc, #136]	; (8000f34 <EXTI15_10_IRQHandler+0xb8>)
 8000eac:	f7ff ff57 	bl	8000d5e <SPI_SendData>
	printf("SPI SEND: %d\n",CMDCode);
 8000eb0:	79bb      	ldrb	r3, [r7, #6]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4820      	ldr	r0, [pc, #128]	; (8000f38 <EXTI15_10_IRQHandler+0xbc>)
 8000eb6:	f000 fd0f 	bl	80018d8 <iprintf>
	//Dummy read to clean
	SPI_ReceiveData(ARDUINO_SPI, &Dummy_Read, 1);
 8000eba:	1d3b      	adds	r3, r7, #4
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	481c      	ldr	r0, [pc, #112]	; (8000f34 <EXTI15_10_IRQHandler+0xb8>)
 8000ec2:	f7ff ff6f 	bl	8000da4 <SPI_ReceiveData>
	printf("SPI Receive: %d\n",Dummy_Read);
 8000ec6:	793b      	ldrb	r3, [r7, #4]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	481c      	ldr	r0, [pc, #112]	; (8000f3c <EXTI15_10_IRQHandler+0xc0>)
 8000ecc:	f000 fd04 	bl	80018d8 <iprintf>
	//Send the Dummy byte to shift
	SPI_SendData(ARDUINO_SPI, Dummy_Write, 1);
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4817      	ldr	r0, [pc, #92]	; (8000f34 <EXTI15_10_IRQHandler+0xb8>)
 8000ed8:	f7ff ff41 	bl	8000d5e <SPI_SendData>
	printf("SPI SEND: %d\n",Dummy_Write);
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4815      	ldr	r0, [pc, #84]	; (8000f38 <EXTI15_10_IRQHandler+0xbc>)
 8000ee2:	f000 fcf9 	bl	80018d8 <iprintf>
	//get the ACK
	SPI_ReceiveData(ARDUINO_SPI, &Ack_byte, 1);
 8000ee6:	1d7b      	adds	r3, r7, #5
 8000ee8:	2201      	movs	r2, #1
 8000eea:	4619      	mov	r1, r3
 8000eec:	4811      	ldr	r0, [pc, #68]	; (8000f34 <EXTI15_10_IRQHandler+0xb8>)
 8000eee:	f7ff ff59 	bl	8000da4 <SPI_ReceiveData>
	if ( Ack_byte == ACK)
 8000ef2:	797b      	ldrb	r3, [r7, #5]
 8000ef4:	2bf5      	cmp	r3, #245	; 0xf5
 8000ef6:	d10d      	bne.n	8000f14 <EXTI15_10_IRQHandler+0x98>
	{
		args[0] = 9;
 8000ef8:	2309      	movs	r3, #9
 8000efa:	703b      	strb	r3, [r7, #0]
		args[1] = 1;
 8000efc:	2301      	movs	r3, #1
 8000efe:	707b      	strb	r3, [r7, #1]
		SPI_SendData(ARDUINO_SPI, &args, (uint32_t)strlen(args));
 8000f00:	463b      	mov	r3, r7
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff f984 	bl	8000210 <strlen>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4809      	ldr	r0, [pc, #36]	; (8000f34 <EXTI15_10_IRQHandler+0xb8>)
 8000f10:	f7ff ff25 	bl	8000d5e <SPI_SendData>
	}


	while(SPI_GetFlagStatus(ARDUINO_SPI, SPI_BSY_FLAG) );
 8000f14:	bf00      	nop
 8000f16:	2180      	movs	r1, #128	; 0x80
 8000f18:	4806      	ldr	r0, [pc, #24]	; (8000f34 <EXTI15_10_IRQHandler+0xb8>)
 8000f1a:	f7ff ff0c 	bl	8000d36 <SPI_GetFlagStatus>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1f8      	bne.n	8000f16 <EXTI15_10_IRQHandler+0x9a>
	SPI_PeripheralControl(ARDUINO_SPI, DISABLE);
 8000f24:	2100      	movs	r1, #0
 8000f26:	4803      	ldr	r0, [pc, #12]	; (8000f34 <EXTI15_10_IRQHandler+0xb8>)
 8000f28:	f7ff fecd 	bl	8000cc6 <SPI_PeripheralControl>

}
 8000f2c:	bf00      	nop
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40013000 	.word	0x40013000
 8000f38:	08002784 	.word	0x08002784
 8000f3c:	08002794 	.word	0x08002794

08000f40 <SPI_Conf>:

void SPI_Conf(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08c      	sub	sp, #48	; 0x30
 8000f44:	af00      	add	r7, sp, #0




	GPIO_Handle_t _SPIO1_PINS;
	_SPIO1_PINS.pGPIOX = SPI1_PORT;
 8000f46:	4b26      	ldr	r3, [pc, #152]	; (8000fe0 <SPI_Conf+0xa0>)
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
	_SPIO1_PINS.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	_SPIO1_PINS.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_AF5;
 8000f50:	2305      	movs	r3, #5
 8000f52:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	_SPIO1_PINS.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000f56:	2300      	movs	r3, #0
 8000f58:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	_SPIO1_PINS.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	_SPIO1_PINS.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000f62:	2302      	movs	r3, #2
 8000f64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	//MISO
	_SPIO1_PINS.GPIO_PinConfig.GPIO_PinNumber = SPI1_MISO_PIN;
 8000f68:	2306      	movs	r3, #6
 8000f6a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&_SPIO1_PINS);
 8000f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fada 	bl	800052c <GPIO_Init>
	//SCLK
	_SPIO1_PINS.GPIO_PinConfig.GPIO_PinNumber = SPI1_SCLK_PIN;
 8000f78:	2305      	movs	r3, #5
 8000f7a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&_SPIO1_PINS);
 8000f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fad2 	bl	800052c <GPIO_Init>
	//MOSI
	_SPIO1_PINS.GPIO_PinConfig.GPIO_PinNumber = SPI1_MOSI_PIN;
 8000f88:	2307      	movs	r3, #7
 8000f8a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&_SPIO1_PINS);
 8000f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff faca 	bl	800052c <GPIO_Init>
	//NSS
	_SPIO1_PINS.GPIO_PinConfig.GPIO_PinNumber = SPI1_NSS_PIN;
 8000f98:	2304      	movs	r3, #4
 8000f9a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIO_Init(&_SPIO1_PINS);
 8000f9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff fac2 	bl	800052c <GPIO_Init>

	SPI_Handle_t SPIO1Handle;
	SPIO1Handle.pSPIx = SPI1;
 8000fa8:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <SPI_Conf+0xa4>)
 8000faa:	607b      	str	r3, [r7, #4]
	SPIO1Handle.SPIConfig.SPI_BusConfig = SPI_BUSCONFIG_FD;
 8000fac:	2301      	movs	r3, #1
 8000fae:	727b      	strb	r3, [r7, #9]
	SPIO1Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	723b      	strb	r3, [r7, #8]
	SPIO1Handle.SPIConfig.SPI_SPI_SclkSpeed = SPI_SCLKSPEED_DIV8;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	72bb      	strb	r3, [r7, #10]
	SPIO1Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	72fb      	strb	r3, [r7, #11]
	SPIO1Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	737b      	strb	r3, [r7, #13]
	SPIO1Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	733b      	strb	r3, [r7, #12]
	SPIO1Handle.SPIConfig.SPI_SSM = SPI_SSM_DISABLE; //Software slave management
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73bb      	strb	r3, [r7, #14]
	SPI_Init(&SPIO1Handle);
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff fe20 	bl	8000c10 <SPI_Init>

	/*
	 *When you enable the SSOE in Master Mode the hardware will control the NSS Pin
	 *The NSS pin will automatically go to 0 when you enable the SPI
	 */
	SPI_Config_SSOE(SPI1,ENABLE);
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	4804      	ldr	r0, [pc, #16]	; (8000fe4 <SPI_Conf+0xa4>)
 8000fd4:	f7ff fe93 	bl	8000cfe <SPI_Config_SSOE>

#endif

}
 8000fd8:	bf00      	nop
 8000fda:	3730      	adds	r7, #48	; 0x30
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	40013000 	.word	0x40013000

08000fe8 <GPIO_Conf>:



void GPIO_Conf(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af00      	add	r7, sp, #0
	GPIO_Init(&_GPIOA);
#endif
	/*
	 * Configure Button
	 */
	_GPIOC.pGPIOX = GPIOC;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <GPIO_Conf+0x40>)
 8000ff0:	603b      	str	r3, [r7, #0]
	_GPIOC.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8000ff2:	230d      	movs	r3, #13
 8000ff4:	713b      	strb	r3, [r7, #4]
	_GPIOC.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8000ff6:	2305      	movs	r3, #5
 8000ff8:	717b      	strb	r3, [r7, #5]
	_GPIOC.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	71bb      	strb	r3, [r7, #6]
	_GPIOC.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000ffe:	2300      	movs	r3, #0
 8001000:	723b      	strb	r3, [r7, #8]
	_GPIOC.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001002:	2300      	movs	r3, #0
 8001004:	71fb      	strb	r3, [r7, #7]
	//GPIO_PeriClockControl(GPIOC, ENABLE);
	GPIO_Init(&_GPIOC);
 8001006:	463b      	mov	r3, r7
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fa8f 	bl	800052c <GPIO_Init>

	//Button interrupt
	GPIO_IRQInterruptConfig(EXTI15_10_IRQn,ENABLE);
 800100e:	2101      	movs	r1, #1
 8001010:	2028      	movs	r0, #40	; 0x28
 8001012:	f7ff fcbd 	bl	8000990 <GPIO_IRQInterruptConfig>
	GPIO_IRQPriorityConfig(EXTI15_10_IRQn,1);
 8001016:	2101      	movs	r1, #1
 8001018:	2028      	movs	r0, #40	; 0x28
 800101a:	f7ff fd41 	bl	8000aa0 <GPIO_IRQPriorityConfig>




}
 800101e:	bf00      	nop
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40020800 	.word	0x40020800

0800102c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800102c:	480d      	ldr	r0, [pc, #52]	; (8001064 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800102e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <LoopForever+0x6>)
  ldr r1, =_edata
 8001032:	490e      	ldr	r1, [pc, #56]	; (800106c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001034:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <LoopForever+0xe>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001048:	4c0b      	ldr	r4, [pc, #44]	; (8001078 <LoopForever+0x16>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001056:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 800105a:	f000 fbb7 	bl	80017cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800105e:	f7ff fee9 	bl	8000e34 <main>

08001062 <LoopForever>:

LoopForever:
    b LoopForever
 8001062:	e7fe      	b.n	8001062 <LoopForever>
  ldr   r0, =_estack
 8001064:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800106c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001070:	08002860 	.word	0x08002860
  ldr r2, =_sbss
 8001074:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001078:	2000014c 	.word	0x2000014c

0800107c <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800107c:	e7fe      	b.n	800107c <ADC_IRQHandler>
	...

08001080 <findslot>:
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <findslot+0x2c>)
 8001082:	b510      	push	{r4, lr}
 8001084:	4604      	mov	r4, r0
 8001086:	6818      	ldr	r0, [r3, #0]
 8001088:	b118      	cbz	r0, 8001092 <findslot+0x12>
 800108a:	6983      	ldr	r3, [r0, #24]
 800108c:	b90b      	cbnz	r3, 8001092 <findslot+0x12>
 800108e:	f000 fb13 	bl	80016b8 <__sinit>
 8001092:	2c13      	cmp	r4, #19
 8001094:	d807      	bhi.n	80010a6 <findslot+0x26>
 8001096:	4806      	ldr	r0, [pc, #24]	; (80010b0 <findslot+0x30>)
 8001098:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 800109c:	3301      	adds	r3, #1
 800109e:	d002      	beq.n	80010a6 <findslot+0x26>
 80010a0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80010a4:	bd10      	pop	{r4, pc}
 80010a6:	2000      	movs	r0, #0
 80010a8:	e7fc      	b.n	80010a4 <findslot+0x24>
 80010aa:	bf00      	nop
 80010ac:	2000000c 	.word	0x2000000c
 80010b0:	2000009c 	.word	0x2000009c

080010b4 <checkerror>:
 80010b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b6:	1c43      	adds	r3, r0, #1
 80010b8:	4605      	mov	r5, r0
 80010ba:	d109      	bne.n	80010d0 <checkerror+0x1c>
 80010bc:	f000 fab6 	bl	800162c <__errno>
 80010c0:	2413      	movs	r4, #19
 80010c2:	4606      	mov	r6, r0
 80010c4:	2700      	movs	r7, #0
 80010c6:	4620      	mov	r0, r4
 80010c8:	4639      	mov	r1, r7
 80010ca:	beab      	bkpt	0x00ab
 80010cc:	4604      	mov	r4, r0
 80010ce:	6034      	str	r4, [r6, #0]
 80010d0:	4628      	mov	r0, r5
 80010d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080010d4 <error>:
 80010d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010d6:	4605      	mov	r5, r0
 80010d8:	f000 faa8 	bl	800162c <__errno>
 80010dc:	2413      	movs	r4, #19
 80010de:	4606      	mov	r6, r0
 80010e0:	2700      	movs	r7, #0
 80010e2:	4620      	mov	r0, r4
 80010e4:	4639      	mov	r1, r7
 80010e6:	beab      	bkpt	0x00ab
 80010e8:	4604      	mov	r4, r0
 80010ea:	6034      	str	r4, [r6, #0]
 80010ec:	4628      	mov	r0, r5
 80010ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080010f0 <_swiread>:
 80010f0:	b530      	push	{r4, r5, lr}
 80010f2:	b085      	sub	sp, #20
 80010f4:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80010f8:	9203      	str	r2, [sp, #12]
 80010fa:	2406      	movs	r4, #6
 80010fc:	ad01      	add	r5, sp, #4
 80010fe:	4620      	mov	r0, r4
 8001100:	4629      	mov	r1, r5
 8001102:	beab      	bkpt	0x00ab
 8001104:	4604      	mov	r4, r0
 8001106:	4620      	mov	r0, r4
 8001108:	f7ff ffd4 	bl	80010b4 <checkerror>
 800110c:	b005      	add	sp, #20
 800110e:	bd30      	pop	{r4, r5, pc}

08001110 <_read>:
 8001110:	b570      	push	{r4, r5, r6, lr}
 8001112:	460e      	mov	r6, r1
 8001114:	4615      	mov	r5, r2
 8001116:	f7ff ffb3 	bl	8001080 <findslot>
 800111a:	4604      	mov	r4, r0
 800111c:	b930      	cbnz	r0, 800112c <_read+0x1c>
 800111e:	f000 fa85 	bl	800162c <__errno>
 8001122:	2309      	movs	r3, #9
 8001124:	6003      	str	r3, [r0, #0]
 8001126:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800112a:	bd70      	pop	{r4, r5, r6, pc}
 800112c:	462a      	mov	r2, r5
 800112e:	4631      	mov	r1, r6
 8001130:	6800      	ldr	r0, [r0, #0]
 8001132:	f7ff ffdd 	bl	80010f0 <_swiread>
 8001136:	1c43      	adds	r3, r0, #1
 8001138:	bf1f      	itttt	ne
 800113a:	6863      	ldrne	r3, [r4, #4]
 800113c:	1a28      	subne	r0, r5, r0
 800113e:	181b      	addne	r3, r3, r0
 8001140:	6063      	strne	r3, [r4, #4]
 8001142:	e7f2      	b.n	800112a <_read+0x1a>

08001144 <_swilseek>:
 8001144:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001146:	460c      	mov	r4, r1
 8001148:	4616      	mov	r6, r2
 800114a:	f7ff ff99 	bl	8001080 <findslot>
 800114e:	4605      	mov	r5, r0
 8001150:	b940      	cbnz	r0, 8001164 <_swilseek+0x20>
 8001152:	f000 fa6b 	bl	800162c <__errno>
 8001156:	2309      	movs	r3, #9
 8001158:	6003      	str	r3, [r0, #0]
 800115a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800115e:	4620      	mov	r0, r4
 8001160:	b003      	add	sp, #12
 8001162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001164:	2e02      	cmp	r6, #2
 8001166:	d903      	bls.n	8001170 <_swilseek+0x2c>
 8001168:	f000 fa60 	bl	800162c <__errno>
 800116c:	2316      	movs	r3, #22
 800116e:	e7f3      	b.n	8001158 <_swilseek+0x14>
 8001170:	2e01      	cmp	r6, #1
 8001172:	d112      	bne.n	800119a <_swilseek+0x56>
 8001174:	6843      	ldr	r3, [r0, #4]
 8001176:	18e4      	adds	r4, r4, r3
 8001178:	d4f6      	bmi.n	8001168 <_swilseek+0x24>
 800117a:	682b      	ldr	r3, [r5, #0]
 800117c:	260a      	movs	r6, #10
 800117e:	e9cd 3400 	strd	r3, r4, [sp]
 8001182:	466f      	mov	r7, sp
 8001184:	4630      	mov	r0, r6
 8001186:	4639      	mov	r1, r7
 8001188:	beab      	bkpt	0x00ab
 800118a:	4606      	mov	r6, r0
 800118c:	4630      	mov	r0, r6
 800118e:	f7ff ff91 	bl	80010b4 <checkerror>
 8001192:	2800      	cmp	r0, #0
 8001194:	dbe1      	blt.n	800115a <_swilseek+0x16>
 8001196:	606c      	str	r4, [r5, #4]
 8001198:	e7e1      	b.n	800115e <_swilseek+0x1a>
 800119a:	2e02      	cmp	r6, #2
 800119c:	d1ed      	bne.n	800117a <_swilseek+0x36>
 800119e:	af02      	add	r7, sp, #8
 80011a0:	6803      	ldr	r3, [r0, #0]
 80011a2:	f847 3d08 	str.w	r3, [r7, #-8]!
 80011a6:	260c      	movs	r6, #12
 80011a8:	4630      	mov	r0, r6
 80011aa:	4639      	mov	r1, r7
 80011ac:	beab      	bkpt	0x00ab
 80011ae:	4606      	mov	r6, r0
 80011b0:	4630      	mov	r0, r6
 80011b2:	f7ff ff7f 	bl	80010b4 <checkerror>
 80011b6:	1c43      	adds	r3, r0, #1
 80011b8:	d0cf      	beq.n	800115a <_swilseek+0x16>
 80011ba:	4404      	add	r4, r0
 80011bc:	e7dd      	b.n	800117a <_swilseek+0x36>

080011be <_lseek>:
 80011be:	f7ff bfc1 	b.w	8001144 <_swilseek>

080011c2 <_swiwrite>:
 80011c2:	b530      	push	{r4, r5, lr}
 80011c4:	b085      	sub	sp, #20
 80011c6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80011ca:	9203      	str	r2, [sp, #12]
 80011cc:	2405      	movs	r4, #5
 80011ce:	ad01      	add	r5, sp, #4
 80011d0:	4620      	mov	r0, r4
 80011d2:	4629      	mov	r1, r5
 80011d4:	beab      	bkpt	0x00ab
 80011d6:	4604      	mov	r4, r0
 80011d8:	4620      	mov	r0, r4
 80011da:	f7ff ff6b 	bl	80010b4 <checkerror>
 80011de:	b005      	add	sp, #20
 80011e0:	bd30      	pop	{r4, r5, pc}

080011e2 <_write>:
 80011e2:	b570      	push	{r4, r5, r6, lr}
 80011e4:	460e      	mov	r6, r1
 80011e6:	4615      	mov	r5, r2
 80011e8:	f7ff ff4a 	bl	8001080 <findslot>
 80011ec:	4604      	mov	r4, r0
 80011ee:	b930      	cbnz	r0, 80011fe <_write+0x1c>
 80011f0:	f000 fa1c 	bl	800162c <__errno>
 80011f4:	2309      	movs	r3, #9
 80011f6:	6003      	str	r3, [r0, #0]
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011fc:	bd70      	pop	{r4, r5, r6, pc}
 80011fe:	462a      	mov	r2, r5
 8001200:	4631      	mov	r1, r6
 8001202:	6800      	ldr	r0, [r0, #0]
 8001204:	f7ff ffdd 	bl	80011c2 <_swiwrite>
 8001208:	1e02      	subs	r2, r0, #0
 800120a:	dbf5      	blt.n	80011f8 <_write+0x16>
 800120c:	6863      	ldr	r3, [r4, #4]
 800120e:	1aa8      	subs	r0, r5, r2
 8001210:	4403      	add	r3, r0
 8001212:	42aa      	cmp	r2, r5
 8001214:	6063      	str	r3, [r4, #4]
 8001216:	d1f1      	bne.n	80011fc <_write+0x1a>
 8001218:	2000      	movs	r0, #0
 800121a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800121e:	f7ff bf59 	b.w	80010d4 <error>

08001222 <_swiclose>:
 8001222:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001224:	ad02      	add	r5, sp, #8
 8001226:	2402      	movs	r4, #2
 8001228:	f845 0d04 	str.w	r0, [r5, #-4]!
 800122c:	4620      	mov	r0, r4
 800122e:	4629      	mov	r1, r5
 8001230:	beab      	bkpt	0x00ab
 8001232:	4604      	mov	r4, r0
 8001234:	4620      	mov	r0, r4
 8001236:	f7ff ff3d 	bl	80010b4 <checkerror>
 800123a:	b003      	add	sp, #12
 800123c:	bd30      	pop	{r4, r5, pc}
	...

08001240 <_close>:
 8001240:	b538      	push	{r3, r4, r5, lr}
 8001242:	4605      	mov	r5, r0
 8001244:	f7ff ff1c 	bl	8001080 <findslot>
 8001248:	4604      	mov	r4, r0
 800124a:	b930      	cbnz	r0, 800125a <_close+0x1a>
 800124c:	f000 f9ee 	bl	800162c <__errno>
 8001250:	2309      	movs	r3, #9
 8001252:	6003      	str	r3, [r0, #0]
 8001254:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001258:	bd38      	pop	{r3, r4, r5, pc}
 800125a:	3d01      	subs	r5, #1
 800125c:	2d01      	cmp	r5, #1
 800125e:	d809      	bhi.n	8001274 <_close+0x34>
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <_close+0x48>)
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	691b      	ldr	r3, [r3, #16]
 8001266:	429a      	cmp	r2, r3
 8001268:	d104      	bne.n	8001274 <_close+0x34>
 800126a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800126e:	6003      	str	r3, [r0, #0]
 8001270:	2000      	movs	r0, #0
 8001272:	e7f1      	b.n	8001258 <_close+0x18>
 8001274:	6820      	ldr	r0, [r4, #0]
 8001276:	f7ff ffd4 	bl	8001222 <_swiclose>
 800127a:	2800      	cmp	r0, #0
 800127c:	d1ec      	bne.n	8001258 <_close+0x18>
 800127e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001282:	6023      	str	r3, [r4, #0]
 8001284:	e7e8      	b.n	8001258 <_close+0x18>
 8001286:	bf00      	nop
 8001288:	2000009c 	.word	0x2000009c

0800128c <_getpid>:
 800128c:	2001      	movs	r0, #1
 800128e:	4770      	bx	lr

08001290 <_sbrk>:
 8001290:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <_sbrk+0x38>)
 8001292:	6819      	ldr	r1, [r3, #0]
 8001294:	b510      	push	{r4, lr}
 8001296:	4602      	mov	r2, r0
 8001298:	b909      	cbnz	r1, 800129e <_sbrk+0xe>
 800129a:	490c      	ldr	r1, [pc, #48]	; (80012cc <_sbrk+0x3c>)
 800129c:	6019      	str	r1, [r3, #0]
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	4669      	mov	r1, sp
 80012a2:	4402      	add	r2, r0
 80012a4:	428a      	cmp	r2, r1
 80012a6:	d806      	bhi.n	80012b6 <_sbrk+0x26>
 80012a8:	4909      	ldr	r1, [pc, #36]	; (80012d0 <_sbrk+0x40>)
 80012aa:	4c0a      	ldr	r4, [pc, #40]	; (80012d4 <_sbrk+0x44>)
 80012ac:	6809      	ldr	r1, [r1, #0]
 80012ae:	42a1      	cmp	r1, r4
 80012b0:	d008      	beq.n	80012c4 <_sbrk+0x34>
 80012b2:	428a      	cmp	r2, r1
 80012b4:	d906      	bls.n	80012c4 <_sbrk+0x34>
 80012b6:	f000 f9b9 	bl	800162c <__errno>
 80012ba:	230c      	movs	r3, #12
 80012bc:	6003      	str	r3, [r0, #0]
 80012be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012c2:	bd10      	pop	{r4, pc}
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	e7fc      	b.n	80012c2 <_sbrk+0x32>
 80012c8:	2000008c 	.word	0x2000008c
 80012cc:	20000150 	.word	0x20000150
 80012d0:	20000000 	.word	0x20000000
 80012d4:	cafedead 	.word	0xcafedead

080012d8 <_swistat>:
 80012d8:	b570      	push	{r4, r5, r6, lr}
 80012da:	460c      	mov	r4, r1
 80012dc:	f7ff fed0 	bl	8001080 <findslot>
 80012e0:	4606      	mov	r6, r0
 80012e2:	b930      	cbnz	r0, 80012f2 <_swistat+0x1a>
 80012e4:	f000 f9a2 	bl	800162c <__errno>
 80012e8:	2309      	movs	r3, #9
 80012ea:	6003      	str	r3, [r0, #0]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012f0:	bd70      	pop	{r4, r5, r6, pc}
 80012f2:	6863      	ldr	r3, [r4, #4]
 80012f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012f8:	6063      	str	r3, [r4, #4]
 80012fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012fe:	6463      	str	r3, [r4, #68]	; 0x44
 8001300:	250c      	movs	r5, #12
 8001302:	4628      	mov	r0, r5
 8001304:	4631      	mov	r1, r6
 8001306:	beab      	bkpt	0x00ab
 8001308:	4605      	mov	r5, r0
 800130a:	4628      	mov	r0, r5
 800130c:	f7ff fed2 	bl	80010b4 <checkerror>
 8001310:	1c43      	adds	r3, r0, #1
 8001312:	bf1c      	itt	ne
 8001314:	6120      	strne	r0, [r4, #16]
 8001316:	2000      	movne	r0, #0
 8001318:	e7ea      	b.n	80012f0 <_swistat+0x18>

0800131a <_fstat>:
 800131a:	460b      	mov	r3, r1
 800131c:	b510      	push	{r4, lr}
 800131e:	2100      	movs	r1, #0
 8001320:	4604      	mov	r4, r0
 8001322:	2258      	movs	r2, #88	; 0x58
 8001324:	4618      	mov	r0, r3
 8001326:	f000 fa75 	bl	8001814 <memset>
 800132a:	4601      	mov	r1, r0
 800132c:	4620      	mov	r0, r4
 800132e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001332:	f7ff bfd1 	b.w	80012d8 <_swistat>

08001336 <_stat>:
 8001336:	b538      	push	{r3, r4, r5, lr}
 8001338:	460d      	mov	r5, r1
 800133a:	4604      	mov	r4, r0
 800133c:	2258      	movs	r2, #88	; 0x58
 800133e:	2100      	movs	r1, #0
 8001340:	4628      	mov	r0, r5
 8001342:	f000 fa67 	bl	8001814 <memset>
 8001346:	4620      	mov	r0, r4
 8001348:	2100      	movs	r1, #0
 800134a:	f000 f811 	bl	8001370 <_swiopen>
 800134e:	1c43      	adds	r3, r0, #1
 8001350:	4604      	mov	r4, r0
 8001352:	d00b      	beq.n	800136c <_stat+0x36>
 8001354:	686b      	ldr	r3, [r5, #4]
 8001356:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800135a:	606b      	str	r3, [r5, #4]
 800135c:	4629      	mov	r1, r5
 800135e:	f7ff ffbb 	bl	80012d8 <_swistat>
 8001362:	4605      	mov	r5, r0
 8001364:	4620      	mov	r0, r4
 8001366:	f7ff ff6b 	bl	8001240 <_close>
 800136a:	462c      	mov	r4, r5
 800136c:	4620      	mov	r0, r4
 800136e:	bd38      	pop	{r3, r4, r5, pc}

08001370 <_swiopen>:
 8001370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001374:	4b2b      	ldr	r3, [pc, #172]	; (8001424 <_swiopen+0xb4>)
 8001376:	b096      	sub	sp, #88	; 0x58
 8001378:	4682      	mov	sl, r0
 800137a:	460e      	mov	r6, r1
 800137c:	2500      	movs	r5, #0
 800137e:	4698      	mov	r8, r3
 8001380:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8001384:	1c61      	adds	r1, r4, #1
 8001386:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 800138a:	d036      	beq.n	80013fa <_swiopen+0x8a>
 800138c:	3501      	adds	r5, #1
 800138e:	2d14      	cmp	r5, #20
 8001390:	d1f6      	bne.n	8001380 <_swiopen+0x10>
 8001392:	f000 f94b 	bl	800162c <__errno>
 8001396:	2318      	movs	r3, #24
 8001398:	6003      	str	r3, [r0, #0]
 800139a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800139e:	e03c      	b.n	800141a <_swiopen+0xaa>
 80013a0:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80013a4:	f240 6301 	movw	r3, #1537	; 0x601
 80013a8:	07b2      	lsls	r2, r6, #30
 80013aa:	bf48      	it	mi
 80013ac:	f044 0402 	orrmi.w	r4, r4, #2
 80013b0:	421e      	tst	r6, r3
 80013b2:	bf18      	it	ne
 80013b4:	f044 0404 	orrne.w	r4, r4, #4
 80013b8:	0733      	lsls	r3, r6, #28
 80013ba:	bf48      	it	mi
 80013bc:	f024 0404 	bicmi.w	r4, r4, #4
 80013c0:	4650      	mov	r0, sl
 80013c2:	bf48      	it	mi
 80013c4:	f044 0408 	orrmi.w	r4, r4, #8
 80013c8:	f8cd a000 	str.w	sl, [sp]
 80013cc:	f7fe ff20 	bl	8000210 <strlen>
 80013d0:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80013d4:	2401      	movs	r4, #1
 80013d6:	4620      	mov	r0, r4
 80013d8:	4649      	mov	r1, r9
 80013da:	beab      	bkpt	0x00ab
 80013dc:	4604      	mov	r4, r0
 80013de:	2c00      	cmp	r4, #0
 80013e0:	db06      	blt.n	80013f0 <_swiopen+0x80>
 80013e2:	4447      	add	r7, r8
 80013e4:	2300      	movs	r3, #0
 80013e6:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	462c      	mov	r4, r5
 80013ee:	e014      	b.n	800141a <_swiopen+0xaa>
 80013f0:	4620      	mov	r0, r4
 80013f2:	f7ff fe6f 	bl	80010d4 <error>
 80013f6:	4604      	mov	r4, r0
 80013f8:	e00f      	b.n	800141a <_swiopen+0xaa>
 80013fa:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 80013fe:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8001402:	46e9      	mov	r9, sp
 8001404:	d1cc      	bne.n	80013a0 <_swiopen+0x30>
 8001406:	4649      	mov	r1, r9
 8001408:	4650      	mov	r0, sl
 800140a:	f7ff ff94 	bl	8001336 <_stat>
 800140e:	3001      	adds	r0, #1
 8001410:	d0c6      	beq.n	80013a0 <_swiopen+0x30>
 8001412:	f000 f90b 	bl	800162c <__errno>
 8001416:	2311      	movs	r3, #17
 8001418:	6003      	str	r3, [r0, #0]
 800141a:	4620      	mov	r0, r4
 800141c:	b016      	add	sp, #88	; 0x58
 800141e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001422:	bf00      	nop
 8001424:	2000009c 	.word	0x2000009c

08001428 <_get_semihosting_exts>:
 8001428:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800142c:	4607      	mov	r7, r0
 800142e:	4688      	mov	r8, r1
 8001430:	4829      	ldr	r0, [pc, #164]	; (80014d8 <_get_semihosting_exts+0xb0>)
 8001432:	2100      	movs	r1, #0
 8001434:	4615      	mov	r5, r2
 8001436:	f7ff ff9b 	bl	8001370 <_swiopen>
 800143a:	462a      	mov	r2, r5
 800143c:	4604      	mov	r4, r0
 800143e:	2100      	movs	r1, #0
 8001440:	4638      	mov	r0, r7
 8001442:	f000 f9e7 	bl	8001814 <memset>
 8001446:	1c63      	adds	r3, r4, #1
 8001448:	d015      	beq.n	8001476 <_get_semihosting_exts+0x4e>
 800144a:	4620      	mov	r0, r4
 800144c:	f7ff fe18 	bl	8001080 <findslot>
 8001450:	260c      	movs	r6, #12
 8001452:	4681      	mov	r9, r0
 8001454:	4630      	mov	r0, r6
 8001456:	4649      	mov	r1, r9
 8001458:	beab      	bkpt	0x00ab
 800145a:	4606      	mov	r6, r0
 800145c:	4630      	mov	r0, r6
 800145e:	f7ff fe29 	bl	80010b4 <checkerror>
 8001462:	2803      	cmp	r0, #3
 8001464:	dd02      	ble.n	800146c <_get_semihosting_exts+0x44>
 8001466:	3803      	subs	r0, #3
 8001468:	42a8      	cmp	r0, r5
 800146a:	dc08      	bgt.n	800147e <_get_semihosting_exts+0x56>
 800146c:	4620      	mov	r0, r4
 800146e:	f7ff fee7 	bl	8001240 <_close>
 8001472:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001476:	4620      	mov	r0, r4
 8001478:	b003      	add	sp, #12
 800147a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800147e:	2204      	movs	r2, #4
 8001480:	eb0d 0102 	add.w	r1, sp, r2
 8001484:	4620      	mov	r0, r4
 8001486:	f7ff fe43 	bl	8001110 <_read>
 800148a:	2803      	cmp	r0, #3
 800148c:	ddee      	ble.n	800146c <_get_semihosting_exts+0x44>
 800148e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001492:	2b53      	cmp	r3, #83	; 0x53
 8001494:	d1ea      	bne.n	800146c <_get_semihosting_exts+0x44>
 8001496:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800149a:	2b48      	cmp	r3, #72	; 0x48
 800149c:	d1e6      	bne.n	800146c <_get_semihosting_exts+0x44>
 800149e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80014a2:	2b46      	cmp	r3, #70	; 0x46
 80014a4:	d1e2      	bne.n	800146c <_get_semihosting_exts+0x44>
 80014a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80014aa:	2b42      	cmp	r3, #66	; 0x42
 80014ac:	d1de      	bne.n	800146c <_get_semihosting_exts+0x44>
 80014ae:	2201      	movs	r2, #1
 80014b0:	4641      	mov	r1, r8
 80014b2:	4620      	mov	r0, r4
 80014b4:	f7ff fe46 	bl	8001144 <_swilseek>
 80014b8:	2800      	cmp	r0, #0
 80014ba:	dbd7      	blt.n	800146c <_get_semihosting_exts+0x44>
 80014bc:	462a      	mov	r2, r5
 80014be:	4639      	mov	r1, r7
 80014c0:	4620      	mov	r0, r4
 80014c2:	f7ff fe25 	bl	8001110 <_read>
 80014c6:	4605      	mov	r5, r0
 80014c8:	4620      	mov	r0, r4
 80014ca:	f7ff feb9 	bl	8001240 <_close>
 80014ce:	4628      	mov	r0, r5
 80014d0:	f7ff fdf0 	bl	80010b4 <checkerror>
 80014d4:	4604      	mov	r4, r0
 80014d6:	e7ce      	b.n	8001476 <_get_semihosting_exts+0x4e>
 80014d8:	080027a5 	.word	0x080027a5

080014dc <initialise_semihosting_exts>:
 80014dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80014de:	4d0a      	ldr	r5, [pc, #40]	; (8001508 <initialise_semihosting_exts+0x2c>)
 80014e0:	4c0a      	ldr	r4, [pc, #40]	; (800150c <initialise_semihosting_exts+0x30>)
 80014e2:	2100      	movs	r1, #0
 80014e4:	2201      	movs	r2, #1
 80014e6:	a801      	add	r0, sp, #4
 80014e8:	6029      	str	r1, [r5, #0]
 80014ea:	6022      	str	r2, [r4, #0]
 80014ec:	f7ff ff9c 	bl	8001428 <_get_semihosting_exts>
 80014f0:	2800      	cmp	r0, #0
 80014f2:	dd07      	ble.n	8001504 <initialise_semihosting_exts+0x28>
 80014f4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80014f8:	f003 0201 	and.w	r2, r3, #1
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	602a      	str	r2, [r5, #0]
 8001502:	6023      	str	r3, [r4, #0]
 8001504:	b003      	add	sp, #12
 8001506:	bd30      	pop	{r4, r5, pc}
 8001508:	20000004 	.word	0x20000004
 800150c:	20000008 	.word	0x20000008

08001510 <_has_ext_stdout_stderr>:
 8001510:	b510      	push	{r4, lr}
 8001512:	4c04      	ldr	r4, [pc, #16]	; (8001524 <_has_ext_stdout_stderr+0x14>)
 8001514:	6822      	ldr	r2, [r4, #0]
 8001516:	2a00      	cmp	r2, #0
 8001518:	da01      	bge.n	800151e <_has_ext_stdout_stderr+0xe>
 800151a:	f7ff ffdf 	bl	80014dc <initialise_semihosting_exts>
 800151e:	6820      	ldr	r0, [r4, #0]
 8001520:	bd10      	pop	{r4, pc}
 8001522:	bf00      	nop
 8001524:	20000008 	.word	0x20000008

08001528 <initialise_monitor_handles>:
 8001528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800152c:	b085      	sub	sp, #20
 800152e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80015e0 <initialise_monitor_handles+0xb8>
 8001532:	f8cd 9004 	str.w	r9, [sp, #4]
 8001536:	2303      	movs	r3, #3
 8001538:	2400      	movs	r4, #0
 800153a:	9303      	str	r3, [sp, #12]
 800153c:	f10d 0804 	add.w	r8, sp, #4
 8001540:	9402      	str	r4, [sp, #8]
 8001542:	2501      	movs	r5, #1
 8001544:	4628      	mov	r0, r5
 8001546:	4641      	mov	r1, r8
 8001548:	beab      	bkpt	0x00ab
 800154a:	4605      	mov	r5, r0
 800154c:	4e20      	ldr	r6, [pc, #128]	; (80015d0 <initialise_monitor_handles+0xa8>)
 800154e:	4a21      	ldr	r2, [pc, #132]	; (80015d4 <initialise_monitor_handles+0xac>)
 8001550:	6035      	str	r5, [r6, #0]
 8001552:	4623      	mov	r3, r4
 8001554:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001558:	4614      	mov	r4, r2
 800155a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 800155e:	3301      	adds	r3, #1
 8001560:	2b14      	cmp	r3, #20
 8001562:	d1fa      	bne.n	800155a <initialise_monitor_handles+0x32>
 8001564:	f7ff ffd4 	bl	8001510 <_has_ext_stdout_stderr>
 8001568:	4d1b      	ldr	r5, [pc, #108]	; (80015d8 <initialise_monitor_handles+0xb0>)
 800156a:	b1d0      	cbz	r0, 80015a2 <initialise_monitor_handles+0x7a>
 800156c:	f04f 0a03 	mov.w	sl, #3
 8001570:	2304      	movs	r3, #4
 8001572:	f8cd 9004 	str.w	r9, [sp, #4]
 8001576:	2701      	movs	r7, #1
 8001578:	f8cd a00c 	str.w	sl, [sp, #12]
 800157c:	9302      	str	r3, [sp, #8]
 800157e:	4638      	mov	r0, r7
 8001580:	4641      	mov	r1, r8
 8001582:	beab      	bkpt	0x00ab
 8001584:	4683      	mov	fp, r0
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <initialise_monitor_handles+0xb4>)
 8001588:	f8cd 9004 	str.w	r9, [sp, #4]
 800158c:	f8c3 b000 	str.w	fp, [r3]
 8001590:	2308      	movs	r3, #8
 8001592:	f8cd a00c 	str.w	sl, [sp, #12]
 8001596:	9302      	str	r3, [sp, #8]
 8001598:	4638      	mov	r0, r7
 800159a:	4641      	mov	r1, r8
 800159c:	beab      	bkpt	0x00ab
 800159e:	4607      	mov	r7, r0
 80015a0:	602f      	str	r7, [r5, #0]
 80015a2:	682b      	ldr	r3, [r5, #0]
 80015a4:	3301      	adds	r3, #1
 80015a6:	bf02      	ittt	eq
 80015a8:	4b0c      	ldreq	r3, [pc, #48]	; (80015dc <initialise_monitor_handles+0xb4>)
 80015aa:	681b      	ldreq	r3, [r3, #0]
 80015ac:	602b      	streq	r3, [r5, #0]
 80015ae:	6833      	ldr	r3, [r6, #0]
 80015b0:	6023      	str	r3, [r4, #0]
 80015b2:	2600      	movs	r6, #0
 80015b4:	6066      	str	r6, [r4, #4]
 80015b6:	f7ff ffab 	bl	8001510 <_has_ext_stdout_stderr>
 80015ba:	b130      	cbz	r0, 80015ca <initialise_monitor_handles+0xa2>
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <initialise_monitor_handles+0xb4>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80015c4:	682b      	ldr	r3, [r5, #0]
 80015c6:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80015ca:	b005      	add	sp, #20
 80015cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80015d0:	20000094 	.word	0x20000094
 80015d4:	2000009c 	.word	0x2000009c
 80015d8:	20000090 	.word	0x20000090
 80015dc:	20000098 	.word	0x20000098
 80015e0:	080027bb 	.word	0x080027bb

080015e4 <_isatty>:
 80015e4:	b570      	push	{r4, r5, r6, lr}
 80015e6:	f7ff fd4b 	bl	8001080 <findslot>
 80015ea:	2509      	movs	r5, #9
 80015ec:	4604      	mov	r4, r0
 80015ee:	b920      	cbnz	r0, 80015fa <_isatty+0x16>
 80015f0:	f000 f81c 	bl	800162c <__errno>
 80015f4:	6005      	str	r5, [r0, #0]
 80015f6:	4620      	mov	r0, r4
 80015f8:	bd70      	pop	{r4, r5, r6, pc}
 80015fa:	4628      	mov	r0, r5
 80015fc:	4621      	mov	r1, r4
 80015fe:	beab      	bkpt	0x00ab
 8001600:	4604      	mov	r4, r0
 8001602:	2c01      	cmp	r4, #1
 8001604:	d0f7      	beq.n	80015f6 <_isatty+0x12>
 8001606:	f000 f811 	bl	800162c <__errno>
 800160a:	2400      	movs	r4, #0
 800160c:	4606      	mov	r6, r0
 800160e:	2513      	movs	r5, #19
 8001610:	4628      	mov	r0, r5
 8001612:	4621      	mov	r1, r4
 8001614:	beab      	bkpt	0x00ab
 8001616:	4605      	mov	r5, r0
 8001618:	6035      	str	r5, [r6, #0]
 800161a:	e7ec      	b.n	80015f6 <_isatty+0x12>

0800161c <abort>:
 800161c:	b508      	push	{r3, lr}
 800161e:	2006      	movs	r0, #6
 8001620:	f000 fa0e 	bl	8001a40 <raise>
 8001624:	2001      	movs	r0, #1
 8001626:	f000 ffc7 	bl	80025b8 <_exit>
	...

0800162c <__errno>:
 800162c:	4b01      	ldr	r3, [pc, #4]	; (8001634 <__errno+0x8>)
 800162e:	6818      	ldr	r0, [r3, #0]
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	2000000c 	.word	0x2000000c

08001638 <std>:
 8001638:	2300      	movs	r3, #0
 800163a:	b510      	push	{r4, lr}
 800163c:	4604      	mov	r4, r0
 800163e:	e9c0 3300 	strd	r3, r3, [r0]
 8001642:	6083      	str	r3, [r0, #8]
 8001644:	8181      	strh	r1, [r0, #12]
 8001646:	6643      	str	r3, [r0, #100]	; 0x64
 8001648:	81c2      	strh	r2, [r0, #14]
 800164a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800164e:	6183      	str	r3, [r0, #24]
 8001650:	4619      	mov	r1, r3
 8001652:	2208      	movs	r2, #8
 8001654:	305c      	adds	r0, #92	; 0x5c
 8001656:	f000 f8dd 	bl	8001814 <memset>
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <std+0x38>)
 800165c:	6263      	str	r3, [r4, #36]	; 0x24
 800165e:	4b05      	ldr	r3, [pc, #20]	; (8001674 <std+0x3c>)
 8001660:	62a3      	str	r3, [r4, #40]	; 0x28
 8001662:	4b05      	ldr	r3, [pc, #20]	; (8001678 <std+0x40>)
 8001664:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <std+0x44>)
 8001668:	6224      	str	r4, [r4, #32]
 800166a:	6323      	str	r3, [r4, #48]	; 0x30
 800166c:	bd10      	pop	{r4, pc}
 800166e:	bf00      	nop
 8001670:	08001a79 	.word	0x08001a79
 8001674:	08001a9b 	.word	0x08001a9b
 8001678:	08001ad3 	.word	0x08001ad3
 800167c:	08001af7 	.word	0x08001af7

08001680 <_cleanup_r>:
 8001680:	4901      	ldr	r1, [pc, #4]	; (8001688 <_cleanup_r+0x8>)
 8001682:	f000 b885 	b.w	8001790 <_fwalk_reent>
 8001686:	bf00      	nop
 8001688:	08001dd1 	.word	0x08001dd1

0800168c <__sfmoreglue>:
 800168c:	b570      	push	{r4, r5, r6, lr}
 800168e:	1e4a      	subs	r2, r1, #1
 8001690:	2568      	movs	r5, #104	; 0x68
 8001692:	4355      	muls	r5, r2
 8001694:	460e      	mov	r6, r1
 8001696:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800169a:	f000 f8c3 	bl	8001824 <_malloc_r>
 800169e:	4604      	mov	r4, r0
 80016a0:	b140      	cbz	r0, 80016b4 <__sfmoreglue+0x28>
 80016a2:	2100      	movs	r1, #0
 80016a4:	e9c0 1600 	strd	r1, r6, [r0]
 80016a8:	300c      	adds	r0, #12
 80016aa:	60a0      	str	r0, [r4, #8]
 80016ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80016b0:	f000 f8b0 	bl	8001814 <memset>
 80016b4:	4620      	mov	r0, r4
 80016b6:	bd70      	pop	{r4, r5, r6, pc}

080016b8 <__sinit>:
 80016b8:	6983      	ldr	r3, [r0, #24]
 80016ba:	b510      	push	{r4, lr}
 80016bc:	4604      	mov	r4, r0
 80016be:	bb33      	cbnz	r3, 800170e <__sinit+0x56>
 80016c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80016c4:	6503      	str	r3, [r0, #80]	; 0x50
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <__sinit+0x58>)
 80016c8:	4a12      	ldr	r2, [pc, #72]	; (8001714 <__sinit+0x5c>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6282      	str	r2, [r0, #40]	; 0x28
 80016ce:	4298      	cmp	r0, r3
 80016d0:	bf04      	itt	eq
 80016d2:	2301      	moveq	r3, #1
 80016d4:	6183      	streq	r3, [r0, #24]
 80016d6:	f000 f81f 	bl	8001718 <__sfp>
 80016da:	6060      	str	r0, [r4, #4]
 80016dc:	4620      	mov	r0, r4
 80016de:	f000 f81b 	bl	8001718 <__sfp>
 80016e2:	60a0      	str	r0, [r4, #8]
 80016e4:	4620      	mov	r0, r4
 80016e6:	f000 f817 	bl	8001718 <__sfp>
 80016ea:	2200      	movs	r2, #0
 80016ec:	60e0      	str	r0, [r4, #12]
 80016ee:	2104      	movs	r1, #4
 80016f0:	6860      	ldr	r0, [r4, #4]
 80016f2:	f7ff ffa1 	bl	8001638 <std>
 80016f6:	2201      	movs	r2, #1
 80016f8:	2109      	movs	r1, #9
 80016fa:	68a0      	ldr	r0, [r4, #8]
 80016fc:	f7ff ff9c 	bl	8001638 <std>
 8001700:	2202      	movs	r2, #2
 8001702:	2112      	movs	r1, #18
 8001704:	68e0      	ldr	r0, [r4, #12]
 8001706:	f7ff ff97 	bl	8001638 <std>
 800170a:	2301      	movs	r3, #1
 800170c:	61a3      	str	r3, [r4, #24]
 800170e:	bd10      	pop	{r4, pc}
 8001710:	08002820 	.word	0x08002820
 8001714:	08001681 	.word	0x08001681

08001718 <__sfp>:
 8001718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800171a:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <__sfp+0x70>)
 800171c:	681e      	ldr	r6, [r3, #0]
 800171e:	69b3      	ldr	r3, [r6, #24]
 8001720:	4607      	mov	r7, r0
 8001722:	b913      	cbnz	r3, 800172a <__sfp+0x12>
 8001724:	4630      	mov	r0, r6
 8001726:	f7ff ffc7 	bl	80016b8 <__sinit>
 800172a:	3648      	adds	r6, #72	; 0x48
 800172c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001730:	3b01      	subs	r3, #1
 8001732:	d503      	bpl.n	800173c <__sfp+0x24>
 8001734:	6833      	ldr	r3, [r6, #0]
 8001736:	b133      	cbz	r3, 8001746 <__sfp+0x2e>
 8001738:	6836      	ldr	r6, [r6, #0]
 800173a:	e7f7      	b.n	800172c <__sfp+0x14>
 800173c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001740:	b16d      	cbz	r5, 800175e <__sfp+0x46>
 8001742:	3468      	adds	r4, #104	; 0x68
 8001744:	e7f4      	b.n	8001730 <__sfp+0x18>
 8001746:	2104      	movs	r1, #4
 8001748:	4638      	mov	r0, r7
 800174a:	f7ff ff9f 	bl	800168c <__sfmoreglue>
 800174e:	6030      	str	r0, [r6, #0]
 8001750:	2800      	cmp	r0, #0
 8001752:	d1f1      	bne.n	8001738 <__sfp+0x20>
 8001754:	230c      	movs	r3, #12
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	4604      	mov	r4, r0
 800175a:	4620      	mov	r0, r4
 800175c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <__sfp+0x74>)
 8001760:	6665      	str	r5, [r4, #100]	; 0x64
 8001762:	e9c4 5500 	strd	r5, r5, [r4]
 8001766:	60a5      	str	r5, [r4, #8]
 8001768:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800176c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001770:	2208      	movs	r2, #8
 8001772:	4629      	mov	r1, r5
 8001774:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001778:	f000 f84c 	bl	8001814 <memset>
 800177c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001780:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001784:	e7e9      	b.n	800175a <__sfp+0x42>
 8001786:	bf00      	nop
 8001788:	08002820 	.word	0x08002820
 800178c:	ffff0001 	.word	0xffff0001

08001790 <_fwalk_reent>:
 8001790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001794:	4680      	mov	r8, r0
 8001796:	4689      	mov	r9, r1
 8001798:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800179c:	2600      	movs	r6, #0
 800179e:	b914      	cbnz	r4, 80017a6 <_fwalk_reent+0x16>
 80017a0:	4630      	mov	r0, r6
 80017a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017a6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80017aa:	3f01      	subs	r7, #1
 80017ac:	d501      	bpl.n	80017b2 <_fwalk_reent+0x22>
 80017ae:	6824      	ldr	r4, [r4, #0]
 80017b0:	e7f5      	b.n	800179e <_fwalk_reent+0xe>
 80017b2:	89ab      	ldrh	r3, [r5, #12]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d907      	bls.n	80017c8 <_fwalk_reent+0x38>
 80017b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80017bc:	3301      	adds	r3, #1
 80017be:	d003      	beq.n	80017c8 <_fwalk_reent+0x38>
 80017c0:	4629      	mov	r1, r5
 80017c2:	4640      	mov	r0, r8
 80017c4:	47c8      	blx	r9
 80017c6:	4306      	orrs	r6, r0
 80017c8:	3568      	adds	r5, #104	; 0x68
 80017ca:	e7ee      	b.n	80017aa <_fwalk_reent+0x1a>

080017cc <__libc_init_array>:
 80017cc:	b570      	push	{r4, r5, r6, lr}
 80017ce:	4e0d      	ldr	r6, [pc, #52]	; (8001804 <__libc_init_array+0x38>)
 80017d0:	4c0d      	ldr	r4, [pc, #52]	; (8001808 <__libc_init_array+0x3c>)
 80017d2:	1ba4      	subs	r4, r4, r6
 80017d4:	10a4      	asrs	r4, r4, #2
 80017d6:	2500      	movs	r5, #0
 80017d8:	42a5      	cmp	r5, r4
 80017da:	d109      	bne.n	80017f0 <__libc_init_array+0x24>
 80017dc:	4e0b      	ldr	r6, [pc, #44]	; (800180c <__libc_init_array+0x40>)
 80017de:	4c0c      	ldr	r4, [pc, #48]	; (8001810 <__libc_init_array+0x44>)
 80017e0:	f000 feec 	bl	80025bc <_init>
 80017e4:	1ba4      	subs	r4, r4, r6
 80017e6:	10a4      	asrs	r4, r4, #2
 80017e8:	2500      	movs	r5, #0
 80017ea:	42a5      	cmp	r5, r4
 80017ec:	d105      	bne.n	80017fa <__libc_init_array+0x2e>
 80017ee:	bd70      	pop	{r4, r5, r6, pc}
 80017f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017f4:	4798      	blx	r3
 80017f6:	3501      	adds	r5, #1
 80017f8:	e7ee      	b.n	80017d8 <__libc_init_array+0xc>
 80017fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017fe:	4798      	blx	r3
 8001800:	3501      	adds	r5, #1
 8001802:	e7f2      	b.n	80017ea <__libc_init_array+0x1e>
 8001804:	08002858 	.word	0x08002858
 8001808:	08002858 	.word	0x08002858
 800180c:	08002858 	.word	0x08002858
 8001810:	0800285c 	.word	0x0800285c

08001814 <memset>:
 8001814:	4402      	add	r2, r0
 8001816:	4603      	mov	r3, r0
 8001818:	4293      	cmp	r3, r2
 800181a:	d100      	bne.n	800181e <memset+0xa>
 800181c:	4770      	bx	lr
 800181e:	f803 1b01 	strb.w	r1, [r3], #1
 8001822:	e7f9      	b.n	8001818 <memset+0x4>

08001824 <_malloc_r>:
 8001824:	b570      	push	{r4, r5, r6, lr}
 8001826:	1ccd      	adds	r5, r1, #3
 8001828:	f025 0503 	bic.w	r5, r5, #3
 800182c:	3508      	adds	r5, #8
 800182e:	2d0c      	cmp	r5, #12
 8001830:	bf38      	it	cc
 8001832:	250c      	movcc	r5, #12
 8001834:	2d00      	cmp	r5, #0
 8001836:	4606      	mov	r6, r0
 8001838:	db01      	blt.n	800183e <_malloc_r+0x1a>
 800183a:	42a9      	cmp	r1, r5
 800183c:	d903      	bls.n	8001846 <_malloc_r+0x22>
 800183e:	230c      	movs	r3, #12
 8001840:	6033      	str	r3, [r6, #0]
 8001842:	2000      	movs	r0, #0
 8001844:	bd70      	pop	{r4, r5, r6, pc}
 8001846:	f000 fb63 	bl	8001f10 <__malloc_lock>
 800184a:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <_malloc_r+0xac>)
 800184c:	6814      	ldr	r4, [r2, #0]
 800184e:	4621      	mov	r1, r4
 8001850:	b991      	cbnz	r1, 8001878 <_malloc_r+0x54>
 8001852:	4c20      	ldr	r4, [pc, #128]	; (80018d4 <_malloc_r+0xb0>)
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	b91b      	cbnz	r3, 8001860 <_malloc_r+0x3c>
 8001858:	4630      	mov	r0, r6
 800185a:	f000 f8b9 	bl	80019d0 <_sbrk_r>
 800185e:	6020      	str	r0, [r4, #0]
 8001860:	4629      	mov	r1, r5
 8001862:	4630      	mov	r0, r6
 8001864:	f000 f8b4 	bl	80019d0 <_sbrk_r>
 8001868:	1c43      	adds	r3, r0, #1
 800186a:	d124      	bne.n	80018b6 <_malloc_r+0x92>
 800186c:	230c      	movs	r3, #12
 800186e:	6033      	str	r3, [r6, #0]
 8001870:	4630      	mov	r0, r6
 8001872:	f000 fb4e 	bl	8001f12 <__malloc_unlock>
 8001876:	e7e4      	b.n	8001842 <_malloc_r+0x1e>
 8001878:	680b      	ldr	r3, [r1, #0]
 800187a:	1b5b      	subs	r3, r3, r5
 800187c:	d418      	bmi.n	80018b0 <_malloc_r+0x8c>
 800187e:	2b0b      	cmp	r3, #11
 8001880:	d90f      	bls.n	80018a2 <_malloc_r+0x7e>
 8001882:	600b      	str	r3, [r1, #0]
 8001884:	50cd      	str	r5, [r1, r3]
 8001886:	18cc      	adds	r4, r1, r3
 8001888:	4630      	mov	r0, r6
 800188a:	f000 fb42 	bl	8001f12 <__malloc_unlock>
 800188e:	f104 000b 	add.w	r0, r4, #11
 8001892:	1d23      	adds	r3, r4, #4
 8001894:	f020 0007 	bic.w	r0, r0, #7
 8001898:	1ac3      	subs	r3, r0, r3
 800189a:	d0d3      	beq.n	8001844 <_malloc_r+0x20>
 800189c:	425a      	negs	r2, r3
 800189e:	50e2      	str	r2, [r4, r3]
 80018a0:	e7d0      	b.n	8001844 <_malloc_r+0x20>
 80018a2:	428c      	cmp	r4, r1
 80018a4:	684b      	ldr	r3, [r1, #4]
 80018a6:	bf16      	itet	ne
 80018a8:	6063      	strne	r3, [r4, #4]
 80018aa:	6013      	streq	r3, [r2, #0]
 80018ac:	460c      	movne	r4, r1
 80018ae:	e7eb      	b.n	8001888 <_malloc_r+0x64>
 80018b0:	460c      	mov	r4, r1
 80018b2:	6849      	ldr	r1, [r1, #4]
 80018b4:	e7cc      	b.n	8001850 <_malloc_r+0x2c>
 80018b6:	1cc4      	adds	r4, r0, #3
 80018b8:	f024 0403 	bic.w	r4, r4, #3
 80018bc:	42a0      	cmp	r0, r4
 80018be:	d005      	beq.n	80018cc <_malloc_r+0xa8>
 80018c0:	1a21      	subs	r1, r4, r0
 80018c2:	4630      	mov	r0, r6
 80018c4:	f000 f884 	bl	80019d0 <_sbrk_r>
 80018c8:	3001      	adds	r0, #1
 80018ca:	d0cf      	beq.n	800186c <_malloc_r+0x48>
 80018cc:	6025      	str	r5, [r4, #0]
 80018ce:	e7db      	b.n	8001888 <_malloc_r+0x64>
 80018d0:	2000013c 	.word	0x2000013c
 80018d4:	20000140 	.word	0x20000140

080018d8 <iprintf>:
 80018d8:	b40f      	push	{r0, r1, r2, r3}
 80018da:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <iprintf+0x2c>)
 80018dc:	b513      	push	{r0, r1, r4, lr}
 80018de:	681c      	ldr	r4, [r3, #0]
 80018e0:	b124      	cbz	r4, 80018ec <iprintf+0x14>
 80018e2:	69a3      	ldr	r3, [r4, #24]
 80018e4:	b913      	cbnz	r3, 80018ec <iprintf+0x14>
 80018e6:	4620      	mov	r0, r4
 80018e8:	f7ff fee6 	bl	80016b8 <__sinit>
 80018ec:	ab05      	add	r3, sp, #20
 80018ee:	9a04      	ldr	r2, [sp, #16]
 80018f0:	68a1      	ldr	r1, [r4, #8]
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	4620      	mov	r0, r4
 80018f6:	f000 fb85 	bl	8002004 <_vfiprintf_r>
 80018fa:	b002      	add	sp, #8
 80018fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001900:	b004      	add	sp, #16
 8001902:	4770      	bx	lr
 8001904:	2000000c 	.word	0x2000000c

08001908 <_puts_r>:
 8001908:	b570      	push	{r4, r5, r6, lr}
 800190a:	460e      	mov	r6, r1
 800190c:	4605      	mov	r5, r0
 800190e:	b118      	cbz	r0, 8001918 <_puts_r+0x10>
 8001910:	6983      	ldr	r3, [r0, #24]
 8001912:	b90b      	cbnz	r3, 8001918 <_puts_r+0x10>
 8001914:	f7ff fed0 	bl	80016b8 <__sinit>
 8001918:	69ab      	ldr	r3, [r5, #24]
 800191a:	68ac      	ldr	r4, [r5, #8]
 800191c:	b913      	cbnz	r3, 8001924 <_puts_r+0x1c>
 800191e:	4628      	mov	r0, r5
 8001920:	f7ff feca 	bl	80016b8 <__sinit>
 8001924:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <_puts_r+0xac>)
 8001926:	429c      	cmp	r4, r3
 8001928:	d117      	bne.n	800195a <_puts_r+0x52>
 800192a:	686c      	ldr	r4, [r5, #4]
 800192c:	89a3      	ldrh	r3, [r4, #12]
 800192e:	071b      	lsls	r3, r3, #28
 8001930:	d51d      	bpl.n	800196e <_puts_r+0x66>
 8001932:	6923      	ldr	r3, [r4, #16]
 8001934:	b1db      	cbz	r3, 800196e <_puts_r+0x66>
 8001936:	3e01      	subs	r6, #1
 8001938:	68a3      	ldr	r3, [r4, #8]
 800193a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800193e:	3b01      	subs	r3, #1
 8001940:	60a3      	str	r3, [r4, #8]
 8001942:	b9e9      	cbnz	r1, 8001980 <_puts_r+0x78>
 8001944:	2b00      	cmp	r3, #0
 8001946:	da2e      	bge.n	80019a6 <_puts_r+0x9e>
 8001948:	4622      	mov	r2, r4
 800194a:	210a      	movs	r1, #10
 800194c:	4628      	mov	r0, r5
 800194e:	f000 f8d7 	bl	8001b00 <__swbuf_r>
 8001952:	3001      	adds	r0, #1
 8001954:	d011      	beq.n	800197a <_puts_r+0x72>
 8001956:	200a      	movs	r0, #10
 8001958:	e011      	b.n	800197e <_puts_r+0x76>
 800195a:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <_puts_r+0xb0>)
 800195c:	429c      	cmp	r4, r3
 800195e:	d101      	bne.n	8001964 <_puts_r+0x5c>
 8001960:	68ac      	ldr	r4, [r5, #8]
 8001962:	e7e3      	b.n	800192c <_puts_r+0x24>
 8001964:	4b15      	ldr	r3, [pc, #84]	; (80019bc <_puts_r+0xb4>)
 8001966:	429c      	cmp	r4, r3
 8001968:	bf08      	it	eq
 800196a:	68ec      	ldreq	r4, [r5, #12]
 800196c:	e7de      	b.n	800192c <_puts_r+0x24>
 800196e:	4621      	mov	r1, r4
 8001970:	4628      	mov	r0, r5
 8001972:	f000 f929 	bl	8001bc8 <__swsetup_r>
 8001976:	2800      	cmp	r0, #0
 8001978:	d0dd      	beq.n	8001936 <_puts_r+0x2e>
 800197a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800197e:	bd70      	pop	{r4, r5, r6, pc}
 8001980:	2b00      	cmp	r3, #0
 8001982:	da04      	bge.n	800198e <_puts_r+0x86>
 8001984:	69a2      	ldr	r2, [r4, #24]
 8001986:	429a      	cmp	r2, r3
 8001988:	dc06      	bgt.n	8001998 <_puts_r+0x90>
 800198a:	290a      	cmp	r1, #10
 800198c:	d004      	beq.n	8001998 <_puts_r+0x90>
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	6022      	str	r2, [r4, #0]
 8001994:	7019      	strb	r1, [r3, #0]
 8001996:	e7cf      	b.n	8001938 <_puts_r+0x30>
 8001998:	4622      	mov	r2, r4
 800199a:	4628      	mov	r0, r5
 800199c:	f000 f8b0 	bl	8001b00 <__swbuf_r>
 80019a0:	3001      	adds	r0, #1
 80019a2:	d1c9      	bne.n	8001938 <_puts_r+0x30>
 80019a4:	e7e9      	b.n	800197a <_puts_r+0x72>
 80019a6:	6823      	ldr	r3, [r4, #0]
 80019a8:	200a      	movs	r0, #10
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	6022      	str	r2, [r4, #0]
 80019ae:	7018      	strb	r0, [r3, #0]
 80019b0:	e7e5      	b.n	800197e <_puts_r+0x76>
 80019b2:	bf00      	nop
 80019b4:	080027e0 	.word	0x080027e0
 80019b8:	08002800 	.word	0x08002800
 80019bc:	080027c0 	.word	0x080027c0

080019c0 <puts>:
 80019c0:	4b02      	ldr	r3, [pc, #8]	; (80019cc <puts+0xc>)
 80019c2:	4601      	mov	r1, r0
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	f7ff bf9f 	b.w	8001908 <_puts_r>
 80019ca:	bf00      	nop
 80019cc:	2000000c 	.word	0x2000000c

080019d0 <_sbrk_r>:
 80019d0:	b538      	push	{r3, r4, r5, lr}
 80019d2:	4c06      	ldr	r4, [pc, #24]	; (80019ec <_sbrk_r+0x1c>)
 80019d4:	2300      	movs	r3, #0
 80019d6:	4605      	mov	r5, r0
 80019d8:	4608      	mov	r0, r1
 80019da:	6023      	str	r3, [r4, #0]
 80019dc:	f7ff fc58 	bl	8001290 <_sbrk>
 80019e0:	1c43      	adds	r3, r0, #1
 80019e2:	d102      	bne.n	80019ea <_sbrk_r+0x1a>
 80019e4:	6823      	ldr	r3, [r4, #0]
 80019e6:	b103      	cbz	r3, 80019ea <_sbrk_r+0x1a>
 80019e8:	602b      	str	r3, [r5, #0]
 80019ea:	bd38      	pop	{r3, r4, r5, pc}
 80019ec:	20000148 	.word	0x20000148

080019f0 <_raise_r>:
 80019f0:	291f      	cmp	r1, #31
 80019f2:	b538      	push	{r3, r4, r5, lr}
 80019f4:	4604      	mov	r4, r0
 80019f6:	460d      	mov	r5, r1
 80019f8:	d904      	bls.n	8001a04 <_raise_r+0x14>
 80019fa:	2316      	movs	r3, #22
 80019fc:	6003      	str	r3, [r0, #0]
 80019fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a02:	bd38      	pop	{r3, r4, r5, pc}
 8001a04:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001a06:	b112      	cbz	r2, 8001a0e <_raise_r+0x1e>
 8001a08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001a0c:	b94b      	cbnz	r3, 8001a22 <_raise_r+0x32>
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f000 f830 	bl	8001a74 <_getpid_r>
 8001a14:	462a      	mov	r2, r5
 8001a16:	4601      	mov	r1, r0
 8001a18:	4620      	mov	r0, r4
 8001a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a1e:	f000 b817 	b.w	8001a50 <_kill_r>
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d00a      	beq.n	8001a3c <_raise_r+0x4c>
 8001a26:	1c59      	adds	r1, r3, #1
 8001a28:	d103      	bne.n	8001a32 <_raise_r+0x42>
 8001a2a:	2316      	movs	r3, #22
 8001a2c:	6003      	str	r3, [r0, #0]
 8001a2e:	2001      	movs	r0, #1
 8001a30:	e7e7      	b.n	8001a02 <_raise_r+0x12>
 8001a32:	2400      	movs	r4, #0
 8001a34:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8001a38:	4628      	mov	r0, r5
 8001a3a:	4798      	blx	r3
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	e7e0      	b.n	8001a02 <_raise_r+0x12>

08001a40 <raise>:
 8001a40:	4b02      	ldr	r3, [pc, #8]	; (8001a4c <raise+0xc>)
 8001a42:	4601      	mov	r1, r0
 8001a44:	6818      	ldr	r0, [r3, #0]
 8001a46:	f7ff bfd3 	b.w	80019f0 <_raise_r>
 8001a4a:	bf00      	nop
 8001a4c:	2000000c 	.word	0x2000000c

08001a50 <_kill_r>:
 8001a50:	b538      	push	{r3, r4, r5, lr}
 8001a52:	4c07      	ldr	r4, [pc, #28]	; (8001a70 <_kill_r+0x20>)
 8001a54:	2300      	movs	r3, #0
 8001a56:	4605      	mov	r5, r0
 8001a58:	4608      	mov	r0, r1
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	6023      	str	r3, [r4, #0]
 8001a5e:	f000 fda3 	bl	80025a8 <_kill>
 8001a62:	1c43      	adds	r3, r0, #1
 8001a64:	d102      	bne.n	8001a6c <_kill_r+0x1c>
 8001a66:	6823      	ldr	r3, [r4, #0]
 8001a68:	b103      	cbz	r3, 8001a6c <_kill_r+0x1c>
 8001a6a:	602b      	str	r3, [r5, #0]
 8001a6c:	bd38      	pop	{r3, r4, r5, pc}
 8001a6e:	bf00      	nop
 8001a70:	20000148 	.word	0x20000148

08001a74 <_getpid_r>:
 8001a74:	f7ff bc0a 	b.w	800128c <_getpid>

08001a78 <__sread>:
 8001a78:	b510      	push	{r4, lr}
 8001a7a:	460c      	mov	r4, r1
 8001a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a80:	f000 fd5e 	bl	8002540 <_read_r>
 8001a84:	2800      	cmp	r0, #0
 8001a86:	bfab      	itete	ge
 8001a88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8001a8c:	181b      	addge	r3, r3, r0
 8001a8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001a92:	bfac      	ite	ge
 8001a94:	6563      	strge	r3, [r4, #84]	; 0x54
 8001a96:	81a3      	strhlt	r3, [r4, #12]
 8001a98:	bd10      	pop	{r4, pc}

08001a9a <__swrite>:
 8001a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a9e:	461f      	mov	r7, r3
 8001aa0:	898b      	ldrh	r3, [r1, #12]
 8001aa2:	05db      	lsls	r3, r3, #23
 8001aa4:	4605      	mov	r5, r0
 8001aa6:	460c      	mov	r4, r1
 8001aa8:	4616      	mov	r6, r2
 8001aaa:	d505      	bpl.n	8001ab8 <__swrite+0x1e>
 8001aac:	2302      	movs	r3, #2
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ab4:	f000 f9b6 	bl	8001e24 <_lseek_r>
 8001ab8:	89a3      	ldrh	r3, [r4, #12]
 8001aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ac2:	81a3      	strh	r3, [r4, #12]
 8001ac4:	4632      	mov	r2, r6
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	4628      	mov	r0, r5
 8001aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ace:	f000 b869 	b.w	8001ba4 <_write_r>

08001ad2 <__sseek>:
 8001ad2:	b510      	push	{r4, lr}
 8001ad4:	460c      	mov	r4, r1
 8001ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ada:	f000 f9a3 	bl	8001e24 <_lseek_r>
 8001ade:	1c43      	adds	r3, r0, #1
 8001ae0:	89a3      	ldrh	r3, [r4, #12]
 8001ae2:	bf15      	itete	ne
 8001ae4:	6560      	strne	r0, [r4, #84]	; 0x54
 8001ae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001aea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001aee:	81a3      	strheq	r3, [r4, #12]
 8001af0:	bf18      	it	ne
 8001af2:	81a3      	strhne	r3, [r4, #12]
 8001af4:	bd10      	pop	{r4, pc}

08001af6 <__sclose>:
 8001af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001afa:	f000 b8d3 	b.w	8001ca4 <_close_r>
	...

08001b00 <__swbuf_r>:
 8001b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b02:	460e      	mov	r6, r1
 8001b04:	4614      	mov	r4, r2
 8001b06:	4605      	mov	r5, r0
 8001b08:	b118      	cbz	r0, 8001b12 <__swbuf_r+0x12>
 8001b0a:	6983      	ldr	r3, [r0, #24]
 8001b0c:	b90b      	cbnz	r3, 8001b12 <__swbuf_r+0x12>
 8001b0e:	f7ff fdd3 	bl	80016b8 <__sinit>
 8001b12:	4b21      	ldr	r3, [pc, #132]	; (8001b98 <__swbuf_r+0x98>)
 8001b14:	429c      	cmp	r4, r3
 8001b16:	d12a      	bne.n	8001b6e <__swbuf_r+0x6e>
 8001b18:	686c      	ldr	r4, [r5, #4]
 8001b1a:	69a3      	ldr	r3, [r4, #24]
 8001b1c:	60a3      	str	r3, [r4, #8]
 8001b1e:	89a3      	ldrh	r3, [r4, #12]
 8001b20:	071a      	lsls	r2, r3, #28
 8001b22:	d52e      	bpl.n	8001b82 <__swbuf_r+0x82>
 8001b24:	6923      	ldr	r3, [r4, #16]
 8001b26:	b363      	cbz	r3, 8001b82 <__swbuf_r+0x82>
 8001b28:	6923      	ldr	r3, [r4, #16]
 8001b2a:	6820      	ldr	r0, [r4, #0]
 8001b2c:	1ac0      	subs	r0, r0, r3
 8001b2e:	6963      	ldr	r3, [r4, #20]
 8001b30:	b2f6      	uxtb	r6, r6
 8001b32:	4283      	cmp	r3, r0
 8001b34:	4637      	mov	r7, r6
 8001b36:	dc04      	bgt.n	8001b42 <__swbuf_r+0x42>
 8001b38:	4621      	mov	r1, r4
 8001b3a:	4628      	mov	r0, r5
 8001b3c:	f000 f948 	bl	8001dd0 <_fflush_r>
 8001b40:	bb28      	cbnz	r0, 8001b8e <__swbuf_r+0x8e>
 8001b42:	68a3      	ldr	r3, [r4, #8]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	60a3      	str	r3, [r4, #8]
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	6022      	str	r2, [r4, #0]
 8001b4e:	701e      	strb	r6, [r3, #0]
 8001b50:	6963      	ldr	r3, [r4, #20]
 8001b52:	3001      	adds	r0, #1
 8001b54:	4283      	cmp	r3, r0
 8001b56:	d004      	beq.n	8001b62 <__swbuf_r+0x62>
 8001b58:	89a3      	ldrh	r3, [r4, #12]
 8001b5a:	07db      	lsls	r3, r3, #31
 8001b5c:	d519      	bpl.n	8001b92 <__swbuf_r+0x92>
 8001b5e:	2e0a      	cmp	r6, #10
 8001b60:	d117      	bne.n	8001b92 <__swbuf_r+0x92>
 8001b62:	4621      	mov	r1, r4
 8001b64:	4628      	mov	r0, r5
 8001b66:	f000 f933 	bl	8001dd0 <_fflush_r>
 8001b6a:	b190      	cbz	r0, 8001b92 <__swbuf_r+0x92>
 8001b6c:	e00f      	b.n	8001b8e <__swbuf_r+0x8e>
 8001b6e:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <__swbuf_r+0x9c>)
 8001b70:	429c      	cmp	r4, r3
 8001b72:	d101      	bne.n	8001b78 <__swbuf_r+0x78>
 8001b74:	68ac      	ldr	r4, [r5, #8]
 8001b76:	e7d0      	b.n	8001b1a <__swbuf_r+0x1a>
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <__swbuf_r+0xa0>)
 8001b7a:	429c      	cmp	r4, r3
 8001b7c:	bf08      	it	eq
 8001b7e:	68ec      	ldreq	r4, [r5, #12]
 8001b80:	e7cb      	b.n	8001b1a <__swbuf_r+0x1a>
 8001b82:	4621      	mov	r1, r4
 8001b84:	4628      	mov	r0, r5
 8001b86:	f000 f81f 	bl	8001bc8 <__swsetup_r>
 8001b8a:	2800      	cmp	r0, #0
 8001b8c:	d0cc      	beq.n	8001b28 <__swbuf_r+0x28>
 8001b8e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001b92:	4638      	mov	r0, r7
 8001b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b96:	bf00      	nop
 8001b98:	080027e0 	.word	0x080027e0
 8001b9c:	08002800 	.word	0x08002800
 8001ba0:	080027c0 	.word	0x080027c0

08001ba4 <_write_r>:
 8001ba4:	b538      	push	{r3, r4, r5, lr}
 8001ba6:	4c07      	ldr	r4, [pc, #28]	; (8001bc4 <_write_r+0x20>)
 8001ba8:	4605      	mov	r5, r0
 8001baa:	4608      	mov	r0, r1
 8001bac:	4611      	mov	r1, r2
 8001bae:	2200      	movs	r2, #0
 8001bb0:	6022      	str	r2, [r4, #0]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	f7ff fb15 	bl	80011e2 <_write>
 8001bb8:	1c43      	adds	r3, r0, #1
 8001bba:	d102      	bne.n	8001bc2 <_write_r+0x1e>
 8001bbc:	6823      	ldr	r3, [r4, #0]
 8001bbe:	b103      	cbz	r3, 8001bc2 <_write_r+0x1e>
 8001bc0:	602b      	str	r3, [r5, #0]
 8001bc2:	bd38      	pop	{r3, r4, r5, pc}
 8001bc4:	20000148 	.word	0x20000148

08001bc8 <__swsetup_r>:
 8001bc8:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <__swsetup_r+0xcc>)
 8001bca:	b570      	push	{r4, r5, r6, lr}
 8001bcc:	681d      	ldr	r5, [r3, #0]
 8001bce:	4606      	mov	r6, r0
 8001bd0:	460c      	mov	r4, r1
 8001bd2:	b125      	cbz	r5, 8001bde <__swsetup_r+0x16>
 8001bd4:	69ab      	ldr	r3, [r5, #24]
 8001bd6:	b913      	cbnz	r3, 8001bde <__swsetup_r+0x16>
 8001bd8:	4628      	mov	r0, r5
 8001bda:	f7ff fd6d 	bl	80016b8 <__sinit>
 8001bde:	4b2e      	ldr	r3, [pc, #184]	; (8001c98 <__swsetup_r+0xd0>)
 8001be0:	429c      	cmp	r4, r3
 8001be2:	d10f      	bne.n	8001c04 <__swsetup_r+0x3c>
 8001be4:	686c      	ldr	r4, [r5, #4]
 8001be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	0715      	lsls	r5, r2, #28
 8001bee:	d42c      	bmi.n	8001c4a <__swsetup_r+0x82>
 8001bf0:	06d0      	lsls	r0, r2, #27
 8001bf2:	d411      	bmi.n	8001c18 <__swsetup_r+0x50>
 8001bf4:	2209      	movs	r2, #9
 8001bf6:	6032      	str	r2, [r6, #0]
 8001bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bfc:	81a3      	strh	r3, [r4, #12]
 8001bfe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c02:	e03e      	b.n	8001c82 <__swsetup_r+0xba>
 8001c04:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <__swsetup_r+0xd4>)
 8001c06:	429c      	cmp	r4, r3
 8001c08:	d101      	bne.n	8001c0e <__swsetup_r+0x46>
 8001c0a:	68ac      	ldr	r4, [r5, #8]
 8001c0c:	e7eb      	b.n	8001be6 <__swsetup_r+0x1e>
 8001c0e:	4b24      	ldr	r3, [pc, #144]	; (8001ca0 <__swsetup_r+0xd8>)
 8001c10:	429c      	cmp	r4, r3
 8001c12:	bf08      	it	eq
 8001c14:	68ec      	ldreq	r4, [r5, #12]
 8001c16:	e7e6      	b.n	8001be6 <__swsetup_r+0x1e>
 8001c18:	0751      	lsls	r1, r2, #29
 8001c1a:	d512      	bpl.n	8001c42 <__swsetup_r+0x7a>
 8001c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c1e:	b141      	cbz	r1, 8001c32 <__swsetup_r+0x6a>
 8001c20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c24:	4299      	cmp	r1, r3
 8001c26:	d002      	beq.n	8001c2e <__swsetup_r+0x66>
 8001c28:	4630      	mov	r0, r6
 8001c2a:	f000 f973 	bl	8001f14 <_free_r>
 8001c2e:	2300      	movs	r3, #0
 8001c30:	6363      	str	r3, [r4, #52]	; 0x34
 8001c32:	89a3      	ldrh	r3, [r4, #12]
 8001c34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c38:	81a3      	strh	r3, [r4, #12]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	6063      	str	r3, [r4, #4]
 8001c3e:	6923      	ldr	r3, [r4, #16]
 8001c40:	6023      	str	r3, [r4, #0]
 8001c42:	89a3      	ldrh	r3, [r4, #12]
 8001c44:	f043 0308 	orr.w	r3, r3, #8
 8001c48:	81a3      	strh	r3, [r4, #12]
 8001c4a:	6923      	ldr	r3, [r4, #16]
 8001c4c:	b94b      	cbnz	r3, 8001c62 <__swsetup_r+0x9a>
 8001c4e:	89a3      	ldrh	r3, [r4, #12]
 8001c50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c58:	d003      	beq.n	8001c62 <__swsetup_r+0x9a>
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	4630      	mov	r0, r6
 8001c5e:	f000 f917 	bl	8001e90 <__smakebuf_r>
 8001c62:	89a2      	ldrh	r2, [r4, #12]
 8001c64:	f012 0301 	ands.w	r3, r2, #1
 8001c68:	d00c      	beq.n	8001c84 <__swsetup_r+0xbc>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60a3      	str	r3, [r4, #8]
 8001c6e:	6963      	ldr	r3, [r4, #20]
 8001c70:	425b      	negs	r3, r3
 8001c72:	61a3      	str	r3, [r4, #24]
 8001c74:	6923      	ldr	r3, [r4, #16]
 8001c76:	b953      	cbnz	r3, 8001c8e <__swsetup_r+0xc6>
 8001c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c7c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001c80:	d1ba      	bne.n	8001bf8 <__swsetup_r+0x30>
 8001c82:	bd70      	pop	{r4, r5, r6, pc}
 8001c84:	0792      	lsls	r2, r2, #30
 8001c86:	bf58      	it	pl
 8001c88:	6963      	ldrpl	r3, [r4, #20]
 8001c8a:	60a3      	str	r3, [r4, #8]
 8001c8c:	e7f2      	b.n	8001c74 <__swsetup_r+0xac>
 8001c8e:	2000      	movs	r0, #0
 8001c90:	e7f7      	b.n	8001c82 <__swsetup_r+0xba>
 8001c92:	bf00      	nop
 8001c94:	2000000c 	.word	0x2000000c
 8001c98:	080027e0 	.word	0x080027e0
 8001c9c:	08002800 	.word	0x08002800
 8001ca0:	080027c0 	.word	0x080027c0

08001ca4 <_close_r>:
 8001ca4:	b538      	push	{r3, r4, r5, lr}
 8001ca6:	4c06      	ldr	r4, [pc, #24]	; (8001cc0 <_close_r+0x1c>)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	4605      	mov	r5, r0
 8001cac:	4608      	mov	r0, r1
 8001cae:	6023      	str	r3, [r4, #0]
 8001cb0:	f7ff fac6 	bl	8001240 <_close>
 8001cb4:	1c43      	adds	r3, r0, #1
 8001cb6:	d102      	bne.n	8001cbe <_close_r+0x1a>
 8001cb8:	6823      	ldr	r3, [r4, #0]
 8001cba:	b103      	cbz	r3, 8001cbe <_close_r+0x1a>
 8001cbc:	602b      	str	r3, [r5, #0]
 8001cbe:	bd38      	pop	{r3, r4, r5, pc}
 8001cc0:	20000148 	.word	0x20000148

08001cc4 <__sflush_r>:
 8001cc4:	898a      	ldrh	r2, [r1, #12]
 8001cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cca:	4605      	mov	r5, r0
 8001ccc:	0710      	lsls	r0, r2, #28
 8001cce:	460c      	mov	r4, r1
 8001cd0:	d458      	bmi.n	8001d84 <__sflush_r+0xc0>
 8001cd2:	684b      	ldr	r3, [r1, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	dc05      	bgt.n	8001ce4 <__sflush_r+0x20>
 8001cd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	dc02      	bgt.n	8001ce4 <__sflush_r+0x20>
 8001cde:	2000      	movs	r0, #0
 8001ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ce4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001ce6:	2e00      	cmp	r6, #0
 8001ce8:	d0f9      	beq.n	8001cde <__sflush_r+0x1a>
 8001cea:	2300      	movs	r3, #0
 8001cec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001cf0:	682f      	ldr	r7, [r5, #0]
 8001cf2:	6a21      	ldr	r1, [r4, #32]
 8001cf4:	602b      	str	r3, [r5, #0]
 8001cf6:	d032      	beq.n	8001d5e <__sflush_r+0x9a>
 8001cf8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001cfa:	89a3      	ldrh	r3, [r4, #12]
 8001cfc:	075a      	lsls	r2, r3, #29
 8001cfe:	d505      	bpl.n	8001d0c <__sflush_r+0x48>
 8001d00:	6863      	ldr	r3, [r4, #4]
 8001d02:	1ac0      	subs	r0, r0, r3
 8001d04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d06:	b10b      	cbz	r3, 8001d0c <__sflush_r+0x48>
 8001d08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d0a:	1ac0      	subs	r0, r0, r3
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	4602      	mov	r2, r0
 8001d10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d12:	6a21      	ldr	r1, [r4, #32]
 8001d14:	4628      	mov	r0, r5
 8001d16:	47b0      	blx	r6
 8001d18:	1c43      	adds	r3, r0, #1
 8001d1a:	89a3      	ldrh	r3, [r4, #12]
 8001d1c:	d106      	bne.n	8001d2c <__sflush_r+0x68>
 8001d1e:	6829      	ldr	r1, [r5, #0]
 8001d20:	291d      	cmp	r1, #29
 8001d22:	d848      	bhi.n	8001db6 <__sflush_r+0xf2>
 8001d24:	4a29      	ldr	r2, [pc, #164]	; (8001dcc <__sflush_r+0x108>)
 8001d26:	40ca      	lsrs	r2, r1
 8001d28:	07d6      	lsls	r6, r2, #31
 8001d2a:	d544      	bpl.n	8001db6 <__sflush_r+0xf2>
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	6062      	str	r2, [r4, #4]
 8001d30:	04d9      	lsls	r1, r3, #19
 8001d32:	6922      	ldr	r2, [r4, #16]
 8001d34:	6022      	str	r2, [r4, #0]
 8001d36:	d504      	bpl.n	8001d42 <__sflush_r+0x7e>
 8001d38:	1c42      	adds	r2, r0, #1
 8001d3a:	d101      	bne.n	8001d40 <__sflush_r+0x7c>
 8001d3c:	682b      	ldr	r3, [r5, #0]
 8001d3e:	b903      	cbnz	r3, 8001d42 <__sflush_r+0x7e>
 8001d40:	6560      	str	r0, [r4, #84]	; 0x54
 8001d42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d44:	602f      	str	r7, [r5, #0]
 8001d46:	2900      	cmp	r1, #0
 8001d48:	d0c9      	beq.n	8001cde <__sflush_r+0x1a>
 8001d4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d4e:	4299      	cmp	r1, r3
 8001d50:	d002      	beq.n	8001d58 <__sflush_r+0x94>
 8001d52:	4628      	mov	r0, r5
 8001d54:	f000 f8de 	bl	8001f14 <_free_r>
 8001d58:	2000      	movs	r0, #0
 8001d5a:	6360      	str	r0, [r4, #52]	; 0x34
 8001d5c:	e7c0      	b.n	8001ce0 <__sflush_r+0x1c>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	4628      	mov	r0, r5
 8001d62:	47b0      	blx	r6
 8001d64:	1c41      	adds	r1, r0, #1
 8001d66:	d1c8      	bne.n	8001cfa <__sflush_r+0x36>
 8001d68:	682b      	ldr	r3, [r5, #0]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0c5      	beq.n	8001cfa <__sflush_r+0x36>
 8001d6e:	2b1d      	cmp	r3, #29
 8001d70:	d001      	beq.n	8001d76 <__sflush_r+0xb2>
 8001d72:	2b16      	cmp	r3, #22
 8001d74:	d101      	bne.n	8001d7a <__sflush_r+0xb6>
 8001d76:	602f      	str	r7, [r5, #0]
 8001d78:	e7b1      	b.n	8001cde <__sflush_r+0x1a>
 8001d7a:	89a3      	ldrh	r3, [r4, #12]
 8001d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d80:	81a3      	strh	r3, [r4, #12]
 8001d82:	e7ad      	b.n	8001ce0 <__sflush_r+0x1c>
 8001d84:	690f      	ldr	r7, [r1, #16]
 8001d86:	2f00      	cmp	r7, #0
 8001d88:	d0a9      	beq.n	8001cde <__sflush_r+0x1a>
 8001d8a:	0793      	lsls	r3, r2, #30
 8001d8c:	680e      	ldr	r6, [r1, #0]
 8001d8e:	bf08      	it	eq
 8001d90:	694b      	ldreq	r3, [r1, #20]
 8001d92:	600f      	str	r7, [r1, #0]
 8001d94:	bf18      	it	ne
 8001d96:	2300      	movne	r3, #0
 8001d98:	eba6 0807 	sub.w	r8, r6, r7
 8001d9c:	608b      	str	r3, [r1, #8]
 8001d9e:	f1b8 0f00 	cmp.w	r8, #0
 8001da2:	dd9c      	ble.n	8001cde <__sflush_r+0x1a>
 8001da4:	4643      	mov	r3, r8
 8001da6:	463a      	mov	r2, r7
 8001da8:	6a21      	ldr	r1, [r4, #32]
 8001daa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001dac:	4628      	mov	r0, r5
 8001dae:	47b0      	blx	r6
 8001db0:	2800      	cmp	r0, #0
 8001db2:	dc06      	bgt.n	8001dc2 <__sflush_r+0xfe>
 8001db4:	89a3      	ldrh	r3, [r4, #12]
 8001db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dba:	81a3      	strh	r3, [r4, #12]
 8001dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dc0:	e78e      	b.n	8001ce0 <__sflush_r+0x1c>
 8001dc2:	4407      	add	r7, r0
 8001dc4:	eba8 0800 	sub.w	r8, r8, r0
 8001dc8:	e7e9      	b.n	8001d9e <__sflush_r+0xda>
 8001dca:	bf00      	nop
 8001dcc:	20400001 	.word	0x20400001

08001dd0 <_fflush_r>:
 8001dd0:	b538      	push	{r3, r4, r5, lr}
 8001dd2:	690b      	ldr	r3, [r1, #16]
 8001dd4:	4605      	mov	r5, r0
 8001dd6:	460c      	mov	r4, r1
 8001dd8:	b1db      	cbz	r3, 8001e12 <_fflush_r+0x42>
 8001dda:	b118      	cbz	r0, 8001de4 <_fflush_r+0x14>
 8001ddc:	6983      	ldr	r3, [r0, #24]
 8001dde:	b90b      	cbnz	r3, 8001de4 <_fflush_r+0x14>
 8001de0:	f7ff fc6a 	bl	80016b8 <__sinit>
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <_fflush_r+0x48>)
 8001de6:	429c      	cmp	r4, r3
 8001de8:	d109      	bne.n	8001dfe <_fflush_r+0x2e>
 8001dea:	686c      	ldr	r4, [r5, #4]
 8001dec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001df0:	b17b      	cbz	r3, 8001e12 <_fflush_r+0x42>
 8001df2:	4621      	mov	r1, r4
 8001df4:	4628      	mov	r0, r5
 8001df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001dfa:	f7ff bf63 	b.w	8001cc4 <__sflush_r>
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <_fflush_r+0x4c>)
 8001e00:	429c      	cmp	r4, r3
 8001e02:	d101      	bne.n	8001e08 <_fflush_r+0x38>
 8001e04:	68ac      	ldr	r4, [r5, #8]
 8001e06:	e7f1      	b.n	8001dec <_fflush_r+0x1c>
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <_fflush_r+0x50>)
 8001e0a:	429c      	cmp	r4, r3
 8001e0c:	bf08      	it	eq
 8001e0e:	68ec      	ldreq	r4, [r5, #12]
 8001e10:	e7ec      	b.n	8001dec <_fflush_r+0x1c>
 8001e12:	2000      	movs	r0, #0
 8001e14:	bd38      	pop	{r3, r4, r5, pc}
 8001e16:	bf00      	nop
 8001e18:	080027e0 	.word	0x080027e0
 8001e1c:	08002800 	.word	0x08002800
 8001e20:	080027c0 	.word	0x080027c0

08001e24 <_lseek_r>:
 8001e24:	b538      	push	{r3, r4, r5, lr}
 8001e26:	4c07      	ldr	r4, [pc, #28]	; (8001e44 <_lseek_r+0x20>)
 8001e28:	4605      	mov	r5, r0
 8001e2a:	4608      	mov	r0, r1
 8001e2c:	4611      	mov	r1, r2
 8001e2e:	2200      	movs	r2, #0
 8001e30:	6022      	str	r2, [r4, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	f7ff f9c3 	bl	80011be <_lseek>
 8001e38:	1c43      	adds	r3, r0, #1
 8001e3a:	d102      	bne.n	8001e42 <_lseek_r+0x1e>
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	b103      	cbz	r3, 8001e42 <_lseek_r+0x1e>
 8001e40:	602b      	str	r3, [r5, #0]
 8001e42:	bd38      	pop	{r3, r4, r5, pc}
 8001e44:	20000148 	.word	0x20000148

08001e48 <__swhatbuf_r>:
 8001e48:	b570      	push	{r4, r5, r6, lr}
 8001e4a:	460e      	mov	r6, r1
 8001e4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e50:	2900      	cmp	r1, #0
 8001e52:	b096      	sub	sp, #88	; 0x58
 8001e54:	4614      	mov	r4, r2
 8001e56:	461d      	mov	r5, r3
 8001e58:	da07      	bge.n	8001e6a <__swhatbuf_r+0x22>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	602b      	str	r3, [r5, #0]
 8001e5e:	89b3      	ldrh	r3, [r6, #12]
 8001e60:	061a      	lsls	r2, r3, #24
 8001e62:	d410      	bmi.n	8001e86 <__swhatbuf_r+0x3e>
 8001e64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e68:	e00e      	b.n	8001e88 <__swhatbuf_r+0x40>
 8001e6a:	466a      	mov	r2, sp
 8001e6c:	f000 fb7a 	bl	8002564 <_fstat_r>
 8001e70:	2800      	cmp	r0, #0
 8001e72:	dbf2      	blt.n	8001e5a <__swhatbuf_r+0x12>
 8001e74:	9a01      	ldr	r2, [sp, #4]
 8001e76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001e7a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001e7e:	425a      	negs	r2, r3
 8001e80:	415a      	adcs	r2, r3
 8001e82:	602a      	str	r2, [r5, #0]
 8001e84:	e7ee      	b.n	8001e64 <__swhatbuf_r+0x1c>
 8001e86:	2340      	movs	r3, #64	; 0x40
 8001e88:	2000      	movs	r0, #0
 8001e8a:	6023      	str	r3, [r4, #0]
 8001e8c:	b016      	add	sp, #88	; 0x58
 8001e8e:	bd70      	pop	{r4, r5, r6, pc}

08001e90 <__smakebuf_r>:
 8001e90:	898b      	ldrh	r3, [r1, #12]
 8001e92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e94:	079d      	lsls	r5, r3, #30
 8001e96:	4606      	mov	r6, r0
 8001e98:	460c      	mov	r4, r1
 8001e9a:	d507      	bpl.n	8001eac <__smakebuf_r+0x1c>
 8001e9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001ea0:	6023      	str	r3, [r4, #0]
 8001ea2:	6123      	str	r3, [r4, #16]
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	6163      	str	r3, [r4, #20]
 8001ea8:	b002      	add	sp, #8
 8001eaa:	bd70      	pop	{r4, r5, r6, pc}
 8001eac:	ab01      	add	r3, sp, #4
 8001eae:	466a      	mov	r2, sp
 8001eb0:	f7ff ffca 	bl	8001e48 <__swhatbuf_r>
 8001eb4:	9900      	ldr	r1, [sp, #0]
 8001eb6:	4605      	mov	r5, r0
 8001eb8:	4630      	mov	r0, r6
 8001eba:	f7ff fcb3 	bl	8001824 <_malloc_r>
 8001ebe:	b948      	cbnz	r0, 8001ed4 <__smakebuf_r+0x44>
 8001ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ec4:	059a      	lsls	r2, r3, #22
 8001ec6:	d4ef      	bmi.n	8001ea8 <__smakebuf_r+0x18>
 8001ec8:	f023 0303 	bic.w	r3, r3, #3
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	81a3      	strh	r3, [r4, #12]
 8001ed2:	e7e3      	b.n	8001e9c <__smakebuf_r+0xc>
 8001ed4:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <__smakebuf_r+0x7c>)
 8001ed6:	62b3      	str	r3, [r6, #40]	; 0x28
 8001ed8:	89a3      	ldrh	r3, [r4, #12]
 8001eda:	6020      	str	r0, [r4, #0]
 8001edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee0:	81a3      	strh	r3, [r4, #12]
 8001ee2:	9b00      	ldr	r3, [sp, #0]
 8001ee4:	6163      	str	r3, [r4, #20]
 8001ee6:	9b01      	ldr	r3, [sp, #4]
 8001ee8:	6120      	str	r0, [r4, #16]
 8001eea:	b15b      	cbz	r3, 8001f04 <__smakebuf_r+0x74>
 8001eec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ef0:	4630      	mov	r0, r6
 8001ef2:	f000 fb49 	bl	8002588 <_isatty_r>
 8001ef6:	b128      	cbz	r0, 8001f04 <__smakebuf_r+0x74>
 8001ef8:	89a3      	ldrh	r3, [r4, #12]
 8001efa:	f023 0303 	bic.w	r3, r3, #3
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	81a3      	strh	r3, [r4, #12]
 8001f04:	89a3      	ldrh	r3, [r4, #12]
 8001f06:	431d      	orrs	r5, r3
 8001f08:	81a5      	strh	r5, [r4, #12]
 8001f0a:	e7cd      	b.n	8001ea8 <__smakebuf_r+0x18>
 8001f0c:	08001681 	.word	0x08001681

08001f10 <__malloc_lock>:
 8001f10:	4770      	bx	lr

08001f12 <__malloc_unlock>:
 8001f12:	4770      	bx	lr

08001f14 <_free_r>:
 8001f14:	b538      	push	{r3, r4, r5, lr}
 8001f16:	4605      	mov	r5, r0
 8001f18:	2900      	cmp	r1, #0
 8001f1a:	d045      	beq.n	8001fa8 <_free_r+0x94>
 8001f1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f20:	1f0c      	subs	r4, r1, #4
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	bfb8      	it	lt
 8001f26:	18e4      	addlt	r4, r4, r3
 8001f28:	f7ff fff2 	bl	8001f10 <__malloc_lock>
 8001f2c:	4a1f      	ldr	r2, [pc, #124]	; (8001fac <_free_r+0x98>)
 8001f2e:	6813      	ldr	r3, [r2, #0]
 8001f30:	4610      	mov	r0, r2
 8001f32:	b933      	cbnz	r3, 8001f42 <_free_r+0x2e>
 8001f34:	6063      	str	r3, [r4, #4]
 8001f36:	6014      	str	r4, [r2, #0]
 8001f38:	4628      	mov	r0, r5
 8001f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f3e:	f7ff bfe8 	b.w	8001f12 <__malloc_unlock>
 8001f42:	42a3      	cmp	r3, r4
 8001f44:	d90c      	bls.n	8001f60 <_free_r+0x4c>
 8001f46:	6821      	ldr	r1, [r4, #0]
 8001f48:	1862      	adds	r2, r4, r1
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	bf04      	itt	eq
 8001f4e:	681a      	ldreq	r2, [r3, #0]
 8001f50:	685b      	ldreq	r3, [r3, #4]
 8001f52:	6063      	str	r3, [r4, #4]
 8001f54:	bf04      	itt	eq
 8001f56:	1852      	addeq	r2, r2, r1
 8001f58:	6022      	streq	r2, [r4, #0]
 8001f5a:	6004      	str	r4, [r0, #0]
 8001f5c:	e7ec      	b.n	8001f38 <_free_r+0x24>
 8001f5e:	4613      	mov	r3, r2
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	b10a      	cbz	r2, 8001f68 <_free_r+0x54>
 8001f64:	42a2      	cmp	r2, r4
 8001f66:	d9fa      	bls.n	8001f5e <_free_r+0x4a>
 8001f68:	6819      	ldr	r1, [r3, #0]
 8001f6a:	1858      	adds	r0, r3, r1
 8001f6c:	42a0      	cmp	r0, r4
 8001f6e:	d10b      	bne.n	8001f88 <_free_r+0x74>
 8001f70:	6820      	ldr	r0, [r4, #0]
 8001f72:	4401      	add	r1, r0
 8001f74:	1858      	adds	r0, r3, r1
 8001f76:	4282      	cmp	r2, r0
 8001f78:	6019      	str	r1, [r3, #0]
 8001f7a:	d1dd      	bne.n	8001f38 <_free_r+0x24>
 8001f7c:	6810      	ldr	r0, [r2, #0]
 8001f7e:	6852      	ldr	r2, [r2, #4]
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	4401      	add	r1, r0
 8001f84:	6019      	str	r1, [r3, #0]
 8001f86:	e7d7      	b.n	8001f38 <_free_r+0x24>
 8001f88:	d902      	bls.n	8001f90 <_free_r+0x7c>
 8001f8a:	230c      	movs	r3, #12
 8001f8c:	602b      	str	r3, [r5, #0]
 8001f8e:	e7d3      	b.n	8001f38 <_free_r+0x24>
 8001f90:	6820      	ldr	r0, [r4, #0]
 8001f92:	1821      	adds	r1, r4, r0
 8001f94:	428a      	cmp	r2, r1
 8001f96:	bf04      	itt	eq
 8001f98:	6811      	ldreq	r1, [r2, #0]
 8001f9a:	6852      	ldreq	r2, [r2, #4]
 8001f9c:	6062      	str	r2, [r4, #4]
 8001f9e:	bf04      	itt	eq
 8001fa0:	1809      	addeq	r1, r1, r0
 8001fa2:	6021      	streq	r1, [r4, #0]
 8001fa4:	605c      	str	r4, [r3, #4]
 8001fa6:	e7c7      	b.n	8001f38 <_free_r+0x24>
 8001fa8:	bd38      	pop	{r3, r4, r5, pc}
 8001faa:	bf00      	nop
 8001fac:	2000013c 	.word	0x2000013c

08001fb0 <__sfputc_r>:
 8001fb0:	6893      	ldr	r3, [r2, #8]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	b410      	push	{r4}
 8001fb8:	6093      	str	r3, [r2, #8]
 8001fba:	da08      	bge.n	8001fce <__sfputc_r+0x1e>
 8001fbc:	6994      	ldr	r4, [r2, #24]
 8001fbe:	42a3      	cmp	r3, r4
 8001fc0:	db01      	blt.n	8001fc6 <__sfputc_r+0x16>
 8001fc2:	290a      	cmp	r1, #10
 8001fc4:	d103      	bne.n	8001fce <__sfputc_r+0x1e>
 8001fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fca:	f7ff bd99 	b.w	8001b00 <__swbuf_r>
 8001fce:	6813      	ldr	r3, [r2, #0]
 8001fd0:	1c58      	adds	r0, r3, #1
 8001fd2:	6010      	str	r0, [r2, #0]
 8001fd4:	7019      	strb	r1, [r3, #0]
 8001fd6:	4608      	mov	r0, r1
 8001fd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <__sfputs_r>:
 8001fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fe0:	4606      	mov	r6, r0
 8001fe2:	460f      	mov	r7, r1
 8001fe4:	4614      	mov	r4, r2
 8001fe6:	18d5      	adds	r5, r2, r3
 8001fe8:	42ac      	cmp	r4, r5
 8001fea:	d101      	bne.n	8001ff0 <__sfputs_r+0x12>
 8001fec:	2000      	movs	r0, #0
 8001fee:	e007      	b.n	8002000 <__sfputs_r+0x22>
 8001ff0:	463a      	mov	r2, r7
 8001ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ff6:	4630      	mov	r0, r6
 8001ff8:	f7ff ffda 	bl	8001fb0 <__sfputc_r>
 8001ffc:	1c43      	adds	r3, r0, #1
 8001ffe:	d1f3      	bne.n	8001fe8 <__sfputs_r+0xa>
 8002000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002004 <_vfiprintf_r>:
 8002004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002008:	460c      	mov	r4, r1
 800200a:	b09d      	sub	sp, #116	; 0x74
 800200c:	4617      	mov	r7, r2
 800200e:	461d      	mov	r5, r3
 8002010:	4606      	mov	r6, r0
 8002012:	b118      	cbz	r0, 800201c <_vfiprintf_r+0x18>
 8002014:	6983      	ldr	r3, [r0, #24]
 8002016:	b90b      	cbnz	r3, 800201c <_vfiprintf_r+0x18>
 8002018:	f7ff fb4e 	bl	80016b8 <__sinit>
 800201c:	4b7c      	ldr	r3, [pc, #496]	; (8002210 <_vfiprintf_r+0x20c>)
 800201e:	429c      	cmp	r4, r3
 8002020:	d158      	bne.n	80020d4 <_vfiprintf_r+0xd0>
 8002022:	6874      	ldr	r4, [r6, #4]
 8002024:	89a3      	ldrh	r3, [r4, #12]
 8002026:	0718      	lsls	r0, r3, #28
 8002028:	d55e      	bpl.n	80020e8 <_vfiprintf_r+0xe4>
 800202a:	6923      	ldr	r3, [r4, #16]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d05b      	beq.n	80020e8 <_vfiprintf_r+0xe4>
 8002030:	2300      	movs	r3, #0
 8002032:	9309      	str	r3, [sp, #36]	; 0x24
 8002034:	2320      	movs	r3, #32
 8002036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800203a:	2330      	movs	r3, #48	; 0x30
 800203c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002040:	9503      	str	r5, [sp, #12]
 8002042:	f04f 0b01 	mov.w	fp, #1
 8002046:	46b8      	mov	r8, r7
 8002048:	4645      	mov	r5, r8
 800204a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800204e:	b10b      	cbz	r3, 8002054 <_vfiprintf_r+0x50>
 8002050:	2b25      	cmp	r3, #37	; 0x25
 8002052:	d154      	bne.n	80020fe <_vfiprintf_r+0xfa>
 8002054:	ebb8 0a07 	subs.w	sl, r8, r7
 8002058:	d00b      	beq.n	8002072 <_vfiprintf_r+0x6e>
 800205a:	4653      	mov	r3, sl
 800205c:	463a      	mov	r2, r7
 800205e:	4621      	mov	r1, r4
 8002060:	4630      	mov	r0, r6
 8002062:	f7ff ffbc 	bl	8001fde <__sfputs_r>
 8002066:	3001      	adds	r0, #1
 8002068:	f000 80c2 	beq.w	80021f0 <_vfiprintf_r+0x1ec>
 800206c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800206e:	4453      	add	r3, sl
 8002070:	9309      	str	r3, [sp, #36]	; 0x24
 8002072:	f898 3000 	ldrb.w	r3, [r8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 80ba 	beq.w	80021f0 <_vfiprintf_r+0x1ec>
 800207c:	2300      	movs	r3, #0
 800207e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002082:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002086:	9304      	str	r3, [sp, #16]
 8002088:	9307      	str	r3, [sp, #28]
 800208a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800208e:	931a      	str	r3, [sp, #104]	; 0x68
 8002090:	46a8      	mov	r8, r5
 8002092:	2205      	movs	r2, #5
 8002094:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002098:	485e      	ldr	r0, [pc, #376]	; (8002214 <_vfiprintf_r+0x210>)
 800209a:	f7fe f8c1 	bl	8000220 <memchr>
 800209e:	9b04      	ldr	r3, [sp, #16]
 80020a0:	bb78      	cbnz	r0, 8002102 <_vfiprintf_r+0xfe>
 80020a2:	06d9      	lsls	r1, r3, #27
 80020a4:	bf44      	itt	mi
 80020a6:	2220      	movmi	r2, #32
 80020a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80020ac:	071a      	lsls	r2, r3, #28
 80020ae:	bf44      	itt	mi
 80020b0:	222b      	movmi	r2, #43	; 0x2b
 80020b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80020b6:	782a      	ldrb	r2, [r5, #0]
 80020b8:	2a2a      	cmp	r2, #42	; 0x2a
 80020ba:	d02a      	beq.n	8002112 <_vfiprintf_r+0x10e>
 80020bc:	9a07      	ldr	r2, [sp, #28]
 80020be:	46a8      	mov	r8, r5
 80020c0:	2000      	movs	r0, #0
 80020c2:	250a      	movs	r5, #10
 80020c4:	4641      	mov	r1, r8
 80020c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80020ca:	3b30      	subs	r3, #48	; 0x30
 80020cc:	2b09      	cmp	r3, #9
 80020ce:	d969      	bls.n	80021a4 <_vfiprintf_r+0x1a0>
 80020d0:	b360      	cbz	r0, 800212c <_vfiprintf_r+0x128>
 80020d2:	e024      	b.n	800211e <_vfiprintf_r+0x11a>
 80020d4:	4b50      	ldr	r3, [pc, #320]	; (8002218 <_vfiprintf_r+0x214>)
 80020d6:	429c      	cmp	r4, r3
 80020d8:	d101      	bne.n	80020de <_vfiprintf_r+0xda>
 80020da:	68b4      	ldr	r4, [r6, #8]
 80020dc:	e7a2      	b.n	8002024 <_vfiprintf_r+0x20>
 80020de:	4b4f      	ldr	r3, [pc, #316]	; (800221c <_vfiprintf_r+0x218>)
 80020e0:	429c      	cmp	r4, r3
 80020e2:	bf08      	it	eq
 80020e4:	68f4      	ldreq	r4, [r6, #12]
 80020e6:	e79d      	b.n	8002024 <_vfiprintf_r+0x20>
 80020e8:	4621      	mov	r1, r4
 80020ea:	4630      	mov	r0, r6
 80020ec:	f7ff fd6c 	bl	8001bc8 <__swsetup_r>
 80020f0:	2800      	cmp	r0, #0
 80020f2:	d09d      	beq.n	8002030 <_vfiprintf_r+0x2c>
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020f8:	b01d      	add	sp, #116	; 0x74
 80020fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020fe:	46a8      	mov	r8, r5
 8002100:	e7a2      	b.n	8002048 <_vfiprintf_r+0x44>
 8002102:	4a44      	ldr	r2, [pc, #272]	; (8002214 <_vfiprintf_r+0x210>)
 8002104:	1a80      	subs	r0, r0, r2
 8002106:	fa0b f000 	lsl.w	r0, fp, r0
 800210a:	4318      	orrs	r0, r3
 800210c:	9004      	str	r0, [sp, #16]
 800210e:	4645      	mov	r5, r8
 8002110:	e7be      	b.n	8002090 <_vfiprintf_r+0x8c>
 8002112:	9a03      	ldr	r2, [sp, #12]
 8002114:	1d11      	adds	r1, r2, #4
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	9103      	str	r1, [sp, #12]
 800211a:	2a00      	cmp	r2, #0
 800211c:	db01      	blt.n	8002122 <_vfiprintf_r+0x11e>
 800211e:	9207      	str	r2, [sp, #28]
 8002120:	e004      	b.n	800212c <_vfiprintf_r+0x128>
 8002122:	4252      	negs	r2, r2
 8002124:	f043 0302 	orr.w	r3, r3, #2
 8002128:	9207      	str	r2, [sp, #28]
 800212a:	9304      	str	r3, [sp, #16]
 800212c:	f898 3000 	ldrb.w	r3, [r8]
 8002130:	2b2e      	cmp	r3, #46	; 0x2e
 8002132:	d10e      	bne.n	8002152 <_vfiprintf_r+0x14e>
 8002134:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002138:	2b2a      	cmp	r3, #42	; 0x2a
 800213a:	d138      	bne.n	80021ae <_vfiprintf_r+0x1aa>
 800213c:	9b03      	ldr	r3, [sp, #12]
 800213e:	1d1a      	adds	r2, r3, #4
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	9203      	str	r2, [sp, #12]
 8002144:	2b00      	cmp	r3, #0
 8002146:	bfb8      	it	lt
 8002148:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800214c:	f108 0802 	add.w	r8, r8, #2
 8002150:	9305      	str	r3, [sp, #20]
 8002152:	4d33      	ldr	r5, [pc, #204]	; (8002220 <_vfiprintf_r+0x21c>)
 8002154:	f898 1000 	ldrb.w	r1, [r8]
 8002158:	2203      	movs	r2, #3
 800215a:	4628      	mov	r0, r5
 800215c:	f7fe f860 	bl	8000220 <memchr>
 8002160:	b140      	cbz	r0, 8002174 <_vfiprintf_r+0x170>
 8002162:	2340      	movs	r3, #64	; 0x40
 8002164:	1b40      	subs	r0, r0, r5
 8002166:	fa03 f000 	lsl.w	r0, r3, r0
 800216a:	9b04      	ldr	r3, [sp, #16]
 800216c:	4303      	orrs	r3, r0
 800216e:	f108 0801 	add.w	r8, r8, #1
 8002172:	9304      	str	r3, [sp, #16]
 8002174:	f898 1000 	ldrb.w	r1, [r8]
 8002178:	482a      	ldr	r0, [pc, #168]	; (8002224 <_vfiprintf_r+0x220>)
 800217a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800217e:	2206      	movs	r2, #6
 8002180:	f108 0701 	add.w	r7, r8, #1
 8002184:	f7fe f84c 	bl	8000220 <memchr>
 8002188:	2800      	cmp	r0, #0
 800218a:	d037      	beq.n	80021fc <_vfiprintf_r+0x1f8>
 800218c:	4b26      	ldr	r3, [pc, #152]	; (8002228 <_vfiprintf_r+0x224>)
 800218e:	bb1b      	cbnz	r3, 80021d8 <_vfiprintf_r+0x1d4>
 8002190:	9b03      	ldr	r3, [sp, #12]
 8002192:	3307      	adds	r3, #7
 8002194:	f023 0307 	bic.w	r3, r3, #7
 8002198:	3308      	adds	r3, #8
 800219a:	9303      	str	r3, [sp, #12]
 800219c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800219e:	444b      	add	r3, r9
 80021a0:	9309      	str	r3, [sp, #36]	; 0x24
 80021a2:	e750      	b.n	8002046 <_vfiprintf_r+0x42>
 80021a4:	fb05 3202 	mla	r2, r5, r2, r3
 80021a8:	2001      	movs	r0, #1
 80021aa:	4688      	mov	r8, r1
 80021ac:	e78a      	b.n	80020c4 <_vfiprintf_r+0xc0>
 80021ae:	2300      	movs	r3, #0
 80021b0:	f108 0801 	add.w	r8, r8, #1
 80021b4:	9305      	str	r3, [sp, #20]
 80021b6:	4619      	mov	r1, r3
 80021b8:	250a      	movs	r5, #10
 80021ba:	4640      	mov	r0, r8
 80021bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80021c0:	3a30      	subs	r2, #48	; 0x30
 80021c2:	2a09      	cmp	r2, #9
 80021c4:	d903      	bls.n	80021ce <_vfiprintf_r+0x1ca>
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0c3      	beq.n	8002152 <_vfiprintf_r+0x14e>
 80021ca:	9105      	str	r1, [sp, #20]
 80021cc:	e7c1      	b.n	8002152 <_vfiprintf_r+0x14e>
 80021ce:	fb05 2101 	mla	r1, r5, r1, r2
 80021d2:	2301      	movs	r3, #1
 80021d4:	4680      	mov	r8, r0
 80021d6:	e7f0      	b.n	80021ba <_vfiprintf_r+0x1b6>
 80021d8:	ab03      	add	r3, sp, #12
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	4622      	mov	r2, r4
 80021de:	4b13      	ldr	r3, [pc, #76]	; (800222c <_vfiprintf_r+0x228>)
 80021e0:	a904      	add	r1, sp, #16
 80021e2:	4630      	mov	r0, r6
 80021e4:	f3af 8000 	nop.w
 80021e8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80021ec:	4681      	mov	r9, r0
 80021ee:	d1d5      	bne.n	800219c <_vfiprintf_r+0x198>
 80021f0:	89a3      	ldrh	r3, [r4, #12]
 80021f2:	065b      	lsls	r3, r3, #25
 80021f4:	f53f af7e 	bmi.w	80020f4 <_vfiprintf_r+0xf0>
 80021f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80021fa:	e77d      	b.n	80020f8 <_vfiprintf_r+0xf4>
 80021fc:	ab03      	add	r3, sp, #12
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	4622      	mov	r2, r4
 8002202:	4b0a      	ldr	r3, [pc, #40]	; (800222c <_vfiprintf_r+0x228>)
 8002204:	a904      	add	r1, sp, #16
 8002206:	4630      	mov	r0, r6
 8002208:	f000 f888 	bl	800231c <_printf_i>
 800220c:	e7ec      	b.n	80021e8 <_vfiprintf_r+0x1e4>
 800220e:	bf00      	nop
 8002210:	080027e0 	.word	0x080027e0
 8002214:	08002824 	.word	0x08002824
 8002218:	08002800 	.word	0x08002800
 800221c:	080027c0 	.word	0x080027c0
 8002220:	0800282a 	.word	0x0800282a
 8002224:	0800282e 	.word	0x0800282e
 8002228:	00000000 	.word	0x00000000
 800222c:	08001fdf 	.word	0x08001fdf

08002230 <_printf_common>:
 8002230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002234:	4691      	mov	r9, r2
 8002236:	461f      	mov	r7, r3
 8002238:	688a      	ldr	r2, [r1, #8]
 800223a:	690b      	ldr	r3, [r1, #16]
 800223c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002240:	4293      	cmp	r3, r2
 8002242:	bfb8      	it	lt
 8002244:	4613      	movlt	r3, r2
 8002246:	f8c9 3000 	str.w	r3, [r9]
 800224a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800224e:	4606      	mov	r6, r0
 8002250:	460c      	mov	r4, r1
 8002252:	b112      	cbz	r2, 800225a <_printf_common+0x2a>
 8002254:	3301      	adds	r3, #1
 8002256:	f8c9 3000 	str.w	r3, [r9]
 800225a:	6823      	ldr	r3, [r4, #0]
 800225c:	0699      	lsls	r1, r3, #26
 800225e:	bf42      	ittt	mi
 8002260:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002264:	3302      	addmi	r3, #2
 8002266:	f8c9 3000 	strmi.w	r3, [r9]
 800226a:	6825      	ldr	r5, [r4, #0]
 800226c:	f015 0506 	ands.w	r5, r5, #6
 8002270:	d107      	bne.n	8002282 <_printf_common+0x52>
 8002272:	f104 0a19 	add.w	sl, r4, #25
 8002276:	68e3      	ldr	r3, [r4, #12]
 8002278:	f8d9 2000 	ldr.w	r2, [r9]
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	42ab      	cmp	r3, r5
 8002280:	dc28      	bgt.n	80022d4 <_printf_common+0xa4>
 8002282:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002286:	6822      	ldr	r2, [r4, #0]
 8002288:	3300      	adds	r3, #0
 800228a:	bf18      	it	ne
 800228c:	2301      	movne	r3, #1
 800228e:	0692      	lsls	r2, r2, #26
 8002290:	d42d      	bmi.n	80022ee <_printf_common+0xbe>
 8002292:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002296:	4639      	mov	r1, r7
 8002298:	4630      	mov	r0, r6
 800229a:	47c0      	blx	r8
 800229c:	3001      	adds	r0, #1
 800229e:	d020      	beq.n	80022e2 <_printf_common+0xb2>
 80022a0:	6823      	ldr	r3, [r4, #0]
 80022a2:	68e5      	ldr	r5, [r4, #12]
 80022a4:	f8d9 2000 	ldr.w	r2, [r9]
 80022a8:	f003 0306 	and.w	r3, r3, #6
 80022ac:	2b04      	cmp	r3, #4
 80022ae:	bf08      	it	eq
 80022b0:	1aad      	subeq	r5, r5, r2
 80022b2:	68a3      	ldr	r3, [r4, #8]
 80022b4:	6922      	ldr	r2, [r4, #16]
 80022b6:	bf0c      	ite	eq
 80022b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80022bc:	2500      	movne	r5, #0
 80022be:	4293      	cmp	r3, r2
 80022c0:	bfc4      	itt	gt
 80022c2:	1a9b      	subgt	r3, r3, r2
 80022c4:	18ed      	addgt	r5, r5, r3
 80022c6:	f04f 0900 	mov.w	r9, #0
 80022ca:	341a      	adds	r4, #26
 80022cc:	454d      	cmp	r5, r9
 80022ce:	d11a      	bne.n	8002306 <_printf_common+0xd6>
 80022d0:	2000      	movs	r0, #0
 80022d2:	e008      	b.n	80022e6 <_printf_common+0xb6>
 80022d4:	2301      	movs	r3, #1
 80022d6:	4652      	mov	r2, sl
 80022d8:	4639      	mov	r1, r7
 80022da:	4630      	mov	r0, r6
 80022dc:	47c0      	blx	r8
 80022de:	3001      	adds	r0, #1
 80022e0:	d103      	bne.n	80022ea <_printf_common+0xba>
 80022e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022ea:	3501      	adds	r5, #1
 80022ec:	e7c3      	b.n	8002276 <_printf_common+0x46>
 80022ee:	18e1      	adds	r1, r4, r3
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	2030      	movs	r0, #48	; 0x30
 80022f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80022f8:	4422      	add	r2, r4
 80022fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80022fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002302:	3302      	adds	r3, #2
 8002304:	e7c5      	b.n	8002292 <_printf_common+0x62>
 8002306:	2301      	movs	r3, #1
 8002308:	4622      	mov	r2, r4
 800230a:	4639      	mov	r1, r7
 800230c:	4630      	mov	r0, r6
 800230e:	47c0      	blx	r8
 8002310:	3001      	adds	r0, #1
 8002312:	d0e6      	beq.n	80022e2 <_printf_common+0xb2>
 8002314:	f109 0901 	add.w	r9, r9, #1
 8002318:	e7d8      	b.n	80022cc <_printf_common+0x9c>
	...

0800231c <_printf_i>:
 800231c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002320:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002324:	460c      	mov	r4, r1
 8002326:	7e09      	ldrb	r1, [r1, #24]
 8002328:	b085      	sub	sp, #20
 800232a:	296e      	cmp	r1, #110	; 0x6e
 800232c:	4617      	mov	r7, r2
 800232e:	4606      	mov	r6, r0
 8002330:	4698      	mov	r8, r3
 8002332:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002334:	f000 80b3 	beq.w	800249e <_printf_i+0x182>
 8002338:	d822      	bhi.n	8002380 <_printf_i+0x64>
 800233a:	2963      	cmp	r1, #99	; 0x63
 800233c:	d036      	beq.n	80023ac <_printf_i+0x90>
 800233e:	d80a      	bhi.n	8002356 <_printf_i+0x3a>
 8002340:	2900      	cmp	r1, #0
 8002342:	f000 80b9 	beq.w	80024b8 <_printf_i+0x19c>
 8002346:	2958      	cmp	r1, #88	; 0x58
 8002348:	f000 8083 	beq.w	8002452 <_printf_i+0x136>
 800234c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002350:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002354:	e032      	b.n	80023bc <_printf_i+0xa0>
 8002356:	2964      	cmp	r1, #100	; 0x64
 8002358:	d001      	beq.n	800235e <_printf_i+0x42>
 800235a:	2969      	cmp	r1, #105	; 0x69
 800235c:	d1f6      	bne.n	800234c <_printf_i+0x30>
 800235e:	6820      	ldr	r0, [r4, #0]
 8002360:	6813      	ldr	r3, [r2, #0]
 8002362:	0605      	lsls	r5, r0, #24
 8002364:	f103 0104 	add.w	r1, r3, #4
 8002368:	d52a      	bpl.n	80023c0 <_printf_i+0xa4>
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6011      	str	r1, [r2, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	da03      	bge.n	800237a <_printf_i+0x5e>
 8002372:	222d      	movs	r2, #45	; 0x2d
 8002374:	425b      	negs	r3, r3
 8002376:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800237a:	486f      	ldr	r0, [pc, #444]	; (8002538 <_printf_i+0x21c>)
 800237c:	220a      	movs	r2, #10
 800237e:	e039      	b.n	80023f4 <_printf_i+0xd8>
 8002380:	2973      	cmp	r1, #115	; 0x73
 8002382:	f000 809d 	beq.w	80024c0 <_printf_i+0x1a4>
 8002386:	d808      	bhi.n	800239a <_printf_i+0x7e>
 8002388:	296f      	cmp	r1, #111	; 0x6f
 800238a:	d020      	beq.n	80023ce <_printf_i+0xb2>
 800238c:	2970      	cmp	r1, #112	; 0x70
 800238e:	d1dd      	bne.n	800234c <_printf_i+0x30>
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	f043 0320 	orr.w	r3, r3, #32
 8002396:	6023      	str	r3, [r4, #0]
 8002398:	e003      	b.n	80023a2 <_printf_i+0x86>
 800239a:	2975      	cmp	r1, #117	; 0x75
 800239c:	d017      	beq.n	80023ce <_printf_i+0xb2>
 800239e:	2978      	cmp	r1, #120	; 0x78
 80023a0:	d1d4      	bne.n	800234c <_printf_i+0x30>
 80023a2:	2378      	movs	r3, #120	; 0x78
 80023a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80023a8:	4864      	ldr	r0, [pc, #400]	; (800253c <_printf_i+0x220>)
 80023aa:	e055      	b.n	8002458 <_printf_i+0x13c>
 80023ac:	6813      	ldr	r3, [r2, #0]
 80023ae:	1d19      	adds	r1, r3, #4
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6011      	str	r1, [r2, #0]
 80023b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80023b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023bc:	2301      	movs	r3, #1
 80023be:	e08c      	b.n	80024da <_printf_i+0x1be>
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6011      	str	r1, [r2, #0]
 80023c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80023c8:	bf18      	it	ne
 80023ca:	b21b      	sxthne	r3, r3
 80023cc:	e7cf      	b.n	800236e <_printf_i+0x52>
 80023ce:	6813      	ldr	r3, [r2, #0]
 80023d0:	6825      	ldr	r5, [r4, #0]
 80023d2:	1d18      	adds	r0, r3, #4
 80023d4:	6010      	str	r0, [r2, #0]
 80023d6:	0628      	lsls	r0, r5, #24
 80023d8:	d501      	bpl.n	80023de <_printf_i+0xc2>
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	e002      	b.n	80023e4 <_printf_i+0xc8>
 80023de:	0668      	lsls	r0, r5, #25
 80023e0:	d5fb      	bpl.n	80023da <_printf_i+0xbe>
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	4854      	ldr	r0, [pc, #336]	; (8002538 <_printf_i+0x21c>)
 80023e6:	296f      	cmp	r1, #111	; 0x6f
 80023e8:	bf14      	ite	ne
 80023ea:	220a      	movne	r2, #10
 80023ec:	2208      	moveq	r2, #8
 80023ee:	2100      	movs	r1, #0
 80023f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80023f4:	6865      	ldr	r5, [r4, #4]
 80023f6:	60a5      	str	r5, [r4, #8]
 80023f8:	2d00      	cmp	r5, #0
 80023fa:	f2c0 8095 	blt.w	8002528 <_printf_i+0x20c>
 80023fe:	6821      	ldr	r1, [r4, #0]
 8002400:	f021 0104 	bic.w	r1, r1, #4
 8002404:	6021      	str	r1, [r4, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d13d      	bne.n	8002486 <_printf_i+0x16a>
 800240a:	2d00      	cmp	r5, #0
 800240c:	f040 808e 	bne.w	800252c <_printf_i+0x210>
 8002410:	4665      	mov	r5, ip
 8002412:	2a08      	cmp	r2, #8
 8002414:	d10b      	bne.n	800242e <_printf_i+0x112>
 8002416:	6823      	ldr	r3, [r4, #0]
 8002418:	07db      	lsls	r3, r3, #31
 800241a:	d508      	bpl.n	800242e <_printf_i+0x112>
 800241c:	6923      	ldr	r3, [r4, #16]
 800241e:	6862      	ldr	r2, [r4, #4]
 8002420:	429a      	cmp	r2, r3
 8002422:	bfde      	ittt	le
 8002424:	2330      	movle	r3, #48	; 0x30
 8002426:	f805 3c01 	strble.w	r3, [r5, #-1]
 800242a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800242e:	ebac 0305 	sub.w	r3, ip, r5
 8002432:	6123      	str	r3, [r4, #16]
 8002434:	f8cd 8000 	str.w	r8, [sp]
 8002438:	463b      	mov	r3, r7
 800243a:	aa03      	add	r2, sp, #12
 800243c:	4621      	mov	r1, r4
 800243e:	4630      	mov	r0, r6
 8002440:	f7ff fef6 	bl	8002230 <_printf_common>
 8002444:	3001      	adds	r0, #1
 8002446:	d14d      	bne.n	80024e4 <_printf_i+0x1c8>
 8002448:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800244c:	b005      	add	sp, #20
 800244e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002452:	4839      	ldr	r0, [pc, #228]	; (8002538 <_printf_i+0x21c>)
 8002454:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002458:	6813      	ldr	r3, [r2, #0]
 800245a:	6821      	ldr	r1, [r4, #0]
 800245c:	1d1d      	adds	r5, r3, #4
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6015      	str	r5, [r2, #0]
 8002462:	060a      	lsls	r2, r1, #24
 8002464:	d50b      	bpl.n	800247e <_printf_i+0x162>
 8002466:	07ca      	lsls	r2, r1, #31
 8002468:	bf44      	itt	mi
 800246a:	f041 0120 	orrmi.w	r1, r1, #32
 800246e:	6021      	strmi	r1, [r4, #0]
 8002470:	b91b      	cbnz	r3, 800247a <_printf_i+0x15e>
 8002472:	6822      	ldr	r2, [r4, #0]
 8002474:	f022 0220 	bic.w	r2, r2, #32
 8002478:	6022      	str	r2, [r4, #0]
 800247a:	2210      	movs	r2, #16
 800247c:	e7b7      	b.n	80023ee <_printf_i+0xd2>
 800247e:	064d      	lsls	r5, r1, #25
 8002480:	bf48      	it	mi
 8002482:	b29b      	uxthmi	r3, r3
 8002484:	e7ef      	b.n	8002466 <_printf_i+0x14a>
 8002486:	4665      	mov	r5, ip
 8002488:	fbb3 f1f2 	udiv	r1, r3, r2
 800248c:	fb02 3311 	mls	r3, r2, r1, r3
 8002490:	5cc3      	ldrb	r3, [r0, r3]
 8002492:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002496:	460b      	mov	r3, r1
 8002498:	2900      	cmp	r1, #0
 800249a:	d1f5      	bne.n	8002488 <_printf_i+0x16c>
 800249c:	e7b9      	b.n	8002412 <_printf_i+0xf6>
 800249e:	6813      	ldr	r3, [r2, #0]
 80024a0:	6825      	ldr	r5, [r4, #0]
 80024a2:	6961      	ldr	r1, [r4, #20]
 80024a4:	1d18      	adds	r0, r3, #4
 80024a6:	6010      	str	r0, [r2, #0]
 80024a8:	0628      	lsls	r0, r5, #24
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	d501      	bpl.n	80024b2 <_printf_i+0x196>
 80024ae:	6019      	str	r1, [r3, #0]
 80024b0:	e002      	b.n	80024b8 <_printf_i+0x19c>
 80024b2:	066a      	lsls	r2, r5, #25
 80024b4:	d5fb      	bpl.n	80024ae <_printf_i+0x192>
 80024b6:	8019      	strh	r1, [r3, #0]
 80024b8:	2300      	movs	r3, #0
 80024ba:	6123      	str	r3, [r4, #16]
 80024bc:	4665      	mov	r5, ip
 80024be:	e7b9      	b.n	8002434 <_printf_i+0x118>
 80024c0:	6813      	ldr	r3, [r2, #0]
 80024c2:	1d19      	adds	r1, r3, #4
 80024c4:	6011      	str	r1, [r2, #0]
 80024c6:	681d      	ldr	r5, [r3, #0]
 80024c8:	6862      	ldr	r2, [r4, #4]
 80024ca:	2100      	movs	r1, #0
 80024cc:	4628      	mov	r0, r5
 80024ce:	f7fd fea7 	bl	8000220 <memchr>
 80024d2:	b108      	cbz	r0, 80024d8 <_printf_i+0x1bc>
 80024d4:	1b40      	subs	r0, r0, r5
 80024d6:	6060      	str	r0, [r4, #4]
 80024d8:	6863      	ldr	r3, [r4, #4]
 80024da:	6123      	str	r3, [r4, #16]
 80024dc:	2300      	movs	r3, #0
 80024de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024e2:	e7a7      	b.n	8002434 <_printf_i+0x118>
 80024e4:	6923      	ldr	r3, [r4, #16]
 80024e6:	462a      	mov	r2, r5
 80024e8:	4639      	mov	r1, r7
 80024ea:	4630      	mov	r0, r6
 80024ec:	47c0      	blx	r8
 80024ee:	3001      	adds	r0, #1
 80024f0:	d0aa      	beq.n	8002448 <_printf_i+0x12c>
 80024f2:	6823      	ldr	r3, [r4, #0]
 80024f4:	079b      	lsls	r3, r3, #30
 80024f6:	d413      	bmi.n	8002520 <_printf_i+0x204>
 80024f8:	68e0      	ldr	r0, [r4, #12]
 80024fa:	9b03      	ldr	r3, [sp, #12]
 80024fc:	4298      	cmp	r0, r3
 80024fe:	bfb8      	it	lt
 8002500:	4618      	movlt	r0, r3
 8002502:	e7a3      	b.n	800244c <_printf_i+0x130>
 8002504:	2301      	movs	r3, #1
 8002506:	464a      	mov	r2, r9
 8002508:	4639      	mov	r1, r7
 800250a:	4630      	mov	r0, r6
 800250c:	47c0      	blx	r8
 800250e:	3001      	adds	r0, #1
 8002510:	d09a      	beq.n	8002448 <_printf_i+0x12c>
 8002512:	3501      	adds	r5, #1
 8002514:	68e3      	ldr	r3, [r4, #12]
 8002516:	9a03      	ldr	r2, [sp, #12]
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	42ab      	cmp	r3, r5
 800251c:	dcf2      	bgt.n	8002504 <_printf_i+0x1e8>
 800251e:	e7eb      	b.n	80024f8 <_printf_i+0x1dc>
 8002520:	2500      	movs	r5, #0
 8002522:	f104 0919 	add.w	r9, r4, #25
 8002526:	e7f5      	b.n	8002514 <_printf_i+0x1f8>
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1ac      	bne.n	8002486 <_printf_i+0x16a>
 800252c:	7803      	ldrb	r3, [r0, #0]
 800252e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002532:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002536:	e76c      	b.n	8002412 <_printf_i+0xf6>
 8002538:	08002835 	.word	0x08002835
 800253c:	08002846 	.word	0x08002846

08002540 <_read_r>:
 8002540:	b538      	push	{r3, r4, r5, lr}
 8002542:	4c07      	ldr	r4, [pc, #28]	; (8002560 <_read_r+0x20>)
 8002544:	4605      	mov	r5, r0
 8002546:	4608      	mov	r0, r1
 8002548:	4611      	mov	r1, r2
 800254a:	2200      	movs	r2, #0
 800254c:	6022      	str	r2, [r4, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	f7fe fdde 	bl	8001110 <_read>
 8002554:	1c43      	adds	r3, r0, #1
 8002556:	d102      	bne.n	800255e <_read_r+0x1e>
 8002558:	6823      	ldr	r3, [r4, #0]
 800255a:	b103      	cbz	r3, 800255e <_read_r+0x1e>
 800255c:	602b      	str	r3, [r5, #0]
 800255e:	bd38      	pop	{r3, r4, r5, pc}
 8002560:	20000148 	.word	0x20000148

08002564 <_fstat_r>:
 8002564:	b538      	push	{r3, r4, r5, lr}
 8002566:	4c07      	ldr	r4, [pc, #28]	; (8002584 <_fstat_r+0x20>)
 8002568:	2300      	movs	r3, #0
 800256a:	4605      	mov	r5, r0
 800256c:	4608      	mov	r0, r1
 800256e:	4611      	mov	r1, r2
 8002570:	6023      	str	r3, [r4, #0]
 8002572:	f7fe fed2 	bl	800131a <_fstat>
 8002576:	1c43      	adds	r3, r0, #1
 8002578:	d102      	bne.n	8002580 <_fstat_r+0x1c>
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	b103      	cbz	r3, 8002580 <_fstat_r+0x1c>
 800257e:	602b      	str	r3, [r5, #0]
 8002580:	bd38      	pop	{r3, r4, r5, pc}
 8002582:	bf00      	nop
 8002584:	20000148 	.word	0x20000148

08002588 <_isatty_r>:
 8002588:	b538      	push	{r3, r4, r5, lr}
 800258a:	4c06      	ldr	r4, [pc, #24]	; (80025a4 <_isatty_r+0x1c>)
 800258c:	2300      	movs	r3, #0
 800258e:	4605      	mov	r5, r0
 8002590:	4608      	mov	r0, r1
 8002592:	6023      	str	r3, [r4, #0]
 8002594:	f7ff f826 	bl	80015e4 <_isatty>
 8002598:	1c43      	adds	r3, r0, #1
 800259a:	d102      	bne.n	80025a2 <_isatty_r+0x1a>
 800259c:	6823      	ldr	r3, [r4, #0]
 800259e:	b103      	cbz	r3, 80025a2 <_isatty_r+0x1a>
 80025a0:	602b      	str	r3, [r5, #0]
 80025a2:	bd38      	pop	{r3, r4, r5, pc}
 80025a4:	20000148 	.word	0x20000148

080025a8 <_kill>:
 80025a8:	4b02      	ldr	r3, [pc, #8]	; (80025b4 <_kill+0xc>)
 80025aa:	2258      	movs	r2, #88	; 0x58
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025b2:	4770      	bx	lr
 80025b4:	20000148 	.word	0x20000148

080025b8 <_exit>:
 80025b8:	e7fe      	b.n	80025b8 <_exit>
	...

080025bc <_init>:
 80025bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025be:	bf00      	nop
 80025c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025c2:	bc08      	pop	{r3}
 80025c4:	469e      	mov	lr, r3
 80025c6:	4770      	bx	lr

080025c8 <_fini>:
 80025c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ca:	bf00      	nop
 80025cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ce:	bc08      	pop	{r3}
 80025d0:	469e      	mov	lr, r3
 80025d2:	4770      	bx	lr
