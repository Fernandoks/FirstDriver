
FirstDriver-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08003380  08003380  00013380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b4  080037b4  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080037b4  080037b4  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037b4  080037b4  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b4  080037b4  000137b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037b8  080037b8  000137b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080037bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000088  08003844  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  200001f8  08003844  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059ed  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fff  00000000  00000000  00025aa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003a8  00000000  00000000  00026aa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000310  00000000  00000000  00026e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000035b4  00000000  00000000  00027160  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003806  00000000  00000000  0002a714  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c2a3  00000000  00000000  0002df1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003a1bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001994  00000000  00000000  0003a238  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000024  00000000  00000000  0003bbcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  0003bbf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000088 	.word	0x20000088
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003368 	.word	0x08003368

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000008c 	.word	0x2000008c
 800020c:	08003368 	.word	0x08003368

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <circular_buffer_init>:

/******************************************************************************
 * Initialize the Circular buffer
*******************************************************************************/
cbuf_handle_t circular_buffer_init(uint8_t* buffer, size_t size)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
	assert(buffer && size); //TEST if valid
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d002      	beq.n	80002d6 <circular_buffer_init+0x16>
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d105      	bne.n	80002e2 <circular_buffer_init+0x22>
 80002d6:	4b17      	ldr	r3, [pc, #92]	; (8000334 <circular_buffer_init+0x74>)
 80002d8:	4a17      	ldr	r2, [pc, #92]	; (8000338 <circular_buffer_init+0x78>)
 80002da:	216d      	movs	r1, #109	; 0x6d
 80002dc:	4817      	ldr	r0, [pc, #92]	; (800033c <circular_buffer_init+0x7c>)
 80002de:	f001 fc05 	bl	8001aec <__assert_func>

	cbuf_handle_t cbuf = malloc(sizeof(circular_buffer_t));
 80002e2:	2014      	movs	r0, #20
 80002e4:	f002 f964 	bl	80025b0 <malloc>
 80002e8:	4603      	mov	r3, r0
 80002ea:	60fb      	str	r3, [r7, #12]
	assert(cbuf); //Tests if NULL
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d105      	bne.n	80002fe <circular_buffer_init+0x3e>
 80002f2:	4b13      	ldr	r3, [pc, #76]	; (8000340 <circular_buffer_init+0x80>)
 80002f4:	4a10      	ldr	r2, [pc, #64]	; (8000338 <circular_buffer_init+0x78>)
 80002f6:	2170      	movs	r1, #112	; 0x70
 80002f8:	4810      	ldr	r0, [pc, #64]	; (800033c <circular_buffer_init+0x7c>)
 80002fa:	f001 fbf7 	bl	8001aec <__assert_func>

	cbuf->buffer = buffer;
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	601a      	str	r2, [r3, #0]
	cbuf->maxsize = size;
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	683a      	ldr	r2, [r7, #0]
 8000308:	60da      	str	r2, [r3, #12]
	circular_buffer_reset(cbuf);
 800030a:	68f8      	ldr	r0, [r7, #12]
 800030c:	f000 f81c 	bl	8000348 <circular_buffer_reset>

	assert(circular_buffer_empty(cbuf));
 8000310:	68f8      	ldr	r0, [r7, #12]
 8000312:	f000 f89b 	bl	800044c <circular_buffer_empty>
 8000316:	4603      	mov	r3, r0
 8000318:	2b00      	cmp	r3, #0
 800031a:	d105      	bne.n	8000328 <circular_buffer_init+0x68>
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <circular_buffer_init+0x84>)
 800031e:	4a06      	ldr	r2, [pc, #24]	; (8000338 <circular_buffer_init+0x78>)
 8000320:	2176      	movs	r1, #118	; 0x76
 8000322:	4806      	ldr	r0, [pc, #24]	; (800033c <circular_buffer_init+0x7c>)
 8000324:	f001 fbe2 	bl	8001aec <__assert_func>

	return cbuf;
 8000328:	68fb      	ldr	r3, [r7, #12]

}
 800032a:	4618      	mov	r0, r3
 800032c:	3710      	adds	r7, #16
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	08003380 	.word	0x08003380
 8000338:	0800340c 	.word	0x0800340c
 800033c:	08003390 	.word	0x08003390
 8000340:	080033b0 	.word	0x080033b0
 8000344:	080033b8 	.word	0x080033b8

08000348 <circular_buffer_reset>:

/******************************************************************************
 * Empty the circular buffer, HEAD = TAIL
*******************************************************************************/
void circular_buffer_reset(cbuf_handle_t cbuf)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
    assert(cbuf);
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2b00      	cmp	r3, #0
 8000354:	d105      	bne.n	8000362 <circular_buffer_reset+0x1a>
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <circular_buffer_reset+0x34>)
 8000358:	4a09      	ldr	r2, [pc, #36]	; (8000380 <circular_buffer_reset+0x38>)
 800035a:	218b      	movs	r1, #139	; 0x8b
 800035c:	4809      	ldr	r0, [pc, #36]	; (8000384 <circular_buffer_reset+0x3c>)
 800035e:	f001 fbc5 	bl	8001aec <__assert_func>

    cbuf->head = 0;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	2200      	movs	r2, #0
 8000366:	605a      	str	r2, [r3, #4]
    cbuf->tail = 0;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
    cbuf->isfull = false;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2200      	movs	r2, #0
 8000372:	741a      	strb	r2, [r3, #16]
}
 8000374:	bf00      	nop
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	080033b0 	.word	0x080033b0
 8000380:	0800343c 	.word	0x0800343c
 8000384:	08003390 	.word	0x08003390

08000388 <circular_buffer_push>:
/******************************************************************************
 * Add data even if the buffer is full
 * OVERWIRITTEN
*******************************************************************************/
void circular_buffer_push(cbuf_handle_t cbuf, uint8_t data)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	460b      	mov	r3, r1
 8000392:	70fb      	strb	r3, [r7, #3]
	assert(cbuf && cbuf->buffer);
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	2b00      	cmp	r3, #0
 8000398:	d003      	beq.n	80003a2 <circular_buffer_push+0x1a>
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d105      	bne.n	80003ae <circular_buffer_push+0x26>
 80003a2:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <circular_buffer_push+0x44>)
 80003a4:	4a0a      	ldr	r2, [pc, #40]	; (80003d0 <circular_buffer_push+0x48>)
 80003a6:	2198      	movs	r1, #152	; 0x98
 80003a8:	480a      	ldr	r0, [pc, #40]	; (80003d4 <circular_buffer_push+0x4c>)
 80003aa:	f001 fb9f 	bl	8001aec <__assert_func>

	cbuf->buffer[cbuf->head] = data;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	685b      	ldr	r3, [r3, #4]
 80003b6:	4413      	add	r3, r2
 80003b8:	78fa      	ldrb	r2, [r7, #3]
 80003ba:	701a      	strb	r2, [r3, #0]

	advance_pointer(cbuf);
 80003bc:	6878      	ldr	r0, [r7, #4]
 80003be:	f000 f8a7 	bl	8000510 <advance_pointer>
}
 80003c2:	bf00      	nop
 80003c4:	3708      	adds	r7, #8
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}
 80003ca:	bf00      	nop
 80003cc:	080033d4 	.word	0x080033d4
 80003d0:	08003454 	.word	0x08003454
 80003d4:	08003390 	.word	0x08003390

080003d8 <circular_buffer_pop>:
/******************************************************************************
 * Get data from buffer
 *  Returns 0 on success, -1 if the buffer is empty
*******************************************************************************/
int circular_buffer_pop(cbuf_handle_t cbuf, uint8_t * data)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b084      	sub	sp, #16
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
    assert(cbuf && data && cbuf->buffer);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d006      	beq.n	80003f6 <circular_buffer_pop+0x1e>
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d003      	beq.n	80003f6 <circular_buffer_pop+0x1e>
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d105      	bne.n	8000402 <circular_buffer_pop+0x2a>
 80003f6:	4b12      	ldr	r3, [pc, #72]	; (8000440 <circular_buffer_pop+0x68>)
 80003f8:	4a12      	ldr	r2, [pc, #72]	; (8000444 <circular_buffer_pop+0x6c>)
 80003fa:	21ba      	movs	r1, #186	; 0xba
 80003fc:	4812      	ldr	r0, [pc, #72]	; (8000448 <circular_buffer_pop+0x70>)
 80003fe:	f001 fb75 	bl	8001aec <__assert_func>

    int r = -1;
 8000402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000406:	60fb      	str	r3, [r7, #12]

    if(!circular_buffer_empty(cbuf))
 8000408:	6878      	ldr	r0, [r7, #4]
 800040a:	f000 f81f 	bl	800044c <circular_buffer_empty>
 800040e:	4603      	mov	r3, r0
 8000410:	f083 0301 	eor.w	r3, r3, #1
 8000414:	b2db      	uxtb	r3, r3
 8000416:	2b00      	cmp	r3, #0
 8000418:	d00c      	beq.n	8000434 <circular_buffer_pop+0x5c>
    {
        *data = cbuf->buffer[cbuf->tail];
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	689b      	ldr	r3, [r3, #8]
 8000422:	4413      	add	r3, r2
 8000424:	781a      	ldrb	r2, [r3, #0]
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	701a      	strb	r2, [r3, #0]
        retreat_pointer(cbuf);
 800042a:	6878      	ldr	r0, [r7, #4]
 800042c:	f000 f8b0 	bl	8000590 <retreat_pointer>

        r = 0;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
    }

    return r;
 8000434:	68fb      	ldr	r3, [r7, #12]
}
 8000436:	4618      	mov	r0, r3
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	080033ec 	.word	0x080033ec
 8000444:	08003484 	.word	0x08003484
 8000448:	08003390 	.word	0x08003390

0800044c <circular_buffer_empty>:

/******************************************************************************
 * Checks if the buffer is empty
*******************************************************************************/
bool circular_buffer_empty(cbuf_handle_t cbuf)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	assert(cbuf);
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d105      	bne.n	8000466 <circular_buffer_empty+0x1a>
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <circular_buffer_empty+0x48>)
 800045c:	4a0e      	ldr	r2, [pc, #56]	; (8000498 <circular_buffer_empty+0x4c>)
 800045e:	21ce      	movs	r1, #206	; 0xce
 8000460:	480e      	ldr	r0, [pc, #56]	; (800049c <circular_buffer_empty+0x50>)
 8000462:	f001 fb43 	bl	8001aec <__assert_func>
	return( (!cbuf->isfull) && (cbuf->head == cbuf->tail) );
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	7c1b      	ldrb	r3, [r3, #16]
 800046a:	f083 0301 	eor.w	r3, r3, #1
 800046e:	b2db      	uxtb	r3, r3
 8000470:	2b00      	cmp	r3, #0
 8000472:	d007      	beq.n	8000484 <circular_buffer_empty+0x38>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	685a      	ldr	r2, [r3, #4]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	429a      	cmp	r2, r3
 800047e:	d101      	bne.n	8000484 <circular_buffer_empty+0x38>
 8000480:	2301      	movs	r3, #1
 8000482:	e000      	b.n	8000486 <circular_buffer_empty+0x3a>
 8000484:	2300      	movs	r3, #0
 8000486:	f003 0301 	and.w	r3, r3, #1
 800048a:	b2db      	uxtb	r3, r3
}
 800048c:	4618      	mov	r0, r3
 800048e:	3708      	adds	r7, #8
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	080033b0 	.word	0x080033b0
 8000498:	08003498 	.word	0x08003498
 800049c:	08003390 	.word	0x08003390

080004a0 <circular_buffer_size>:

/******************************************************************************
 * Return buffer current occupation
*******************************************************************************/
size_t circular_buffer_size(cbuf_handle_t cbuf)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
	assert(cbuf);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d105      	bne.n	80004ba <circular_buffer_size+0x1a>
 80004ae:	4b15      	ldr	r3, [pc, #84]	; (8000504 <circular_buffer_size+0x64>)
 80004b0:	4a15      	ldr	r2, [pc, #84]	; (8000508 <circular_buffer_size+0x68>)
 80004b2:	21e9      	movs	r1, #233	; 0xe9
 80004b4:	4815      	ldr	r0, [pc, #84]	; (800050c <circular_buffer_size+0x6c>)
 80004b6:	f001 fb19 	bl	8001aec <__assert_func>

	size_t size = cbuf->maxsize;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	68db      	ldr	r3, [r3, #12]
 80004be:	60fb      	str	r3, [r7, #12]

	if (!cbuf->isfull)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	7c1b      	ldrb	r3, [r3, #16]
 80004c4:	f083 0301 	eor.w	r3, r3, #1
 80004c8:	b2db      	uxtb	r3, r3
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d015      	beq.n	80004fa <circular_buffer_size+0x5a>
	{
		if(cbuf->head >= cbuf->tail)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	685a      	ldr	r2, [r3, #4]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	689b      	ldr	r3, [r3, #8]
 80004d6:	429a      	cmp	r2, r3
 80004d8:	d306      	bcc.n	80004e8 <circular_buffer_size+0x48>
		{
			size = (cbuf->head - cbuf->tail);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	685a      	ldr	r2, [r3, #4]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	689b      	ldr	r3, [r3, #8]
 80004e2:	1ad3      	subs	r3, r2, r3
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	e008      	b.n	80004fa <circular_buffer_size+0x5a>
		}
		else
		{
			size = (cbuf->maxsize + cbuf->head - cbuf->tail);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	68da      	ldr	r2, [r3, #12]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	685b      	ldr	r3, [r3, #4]
 80004f0:	441a      	add	r2, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	1ad3      	subs	r3, r2, r3
 80004f8:	60fb      	str	r3, [r7, #12]
		}
	}

	return size;
 80004fa:	68fb      	ldr	r3, [r7, #12]

}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3710      	adds	r7, #16
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	080033b0 	.word	0x080033b0
 8000508:	080034e4 	.word	0x080034e4
 800050c:	08003390 	.word	0x08003390

08000510 <advance_pointer>:
/******************************************************************************
 * HELPER FUNCTIONS - STATIC
 *****************************************************************************/

static void advance_pointer(cbuf_handle_t cbuf)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b082      	sub	sp, #8
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
	assert(cbuf);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d106      	bne.n	800052c <advance_pointer+0x1c>
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <advance_pointer+0x74>)
 8000520:	4a19      	ldr	r2, [pc, #100]	; (8000588 <advance_pointer+0x78>)
 8000522:	f240 1103 	movw	r1, #259	; 0x103
 8000526:	4819      	ldr	r0, [pc, #100]	; (800058c <advance_pointer+0x7c>)
 8000528:	f001 fae0 	bl	8001aec <__assert_func>

	if(cbuf->isfull)
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	7c1b      	ldrb	r3, [r3, #16]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d00b      	beq.n	800054c <advance_pointer+0x3c>
   	{
		cbuf->tail = (cbuf->tail + 1) % cbuf->maxsize; //If both are equal the module is 0
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	3301      	adds	r3, #1
 800053a:	687a      	ldr	r2, [r7, #4]
 800053c:	68d2      	ldr	r2, [r2, #12]
 800053e:	fbb3 f1f2 	udiv	r1, r3, r2
 8000542:	fb02 f201 	mul.w	r2, r2, r1
 8000546:	1a9a      	subs	r2, r3, r2
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	609a      	str	r2, [r3, #8]
	}

	cbuf->head = (cbuf->head + 1) % cbuf->maxsize;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	3301      	adds	r3, #1
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	68d2      	ldr	r2, [r2, #12]
 8000556:	fbb3 f1f2 	udiv	r1, r3, r2
 800055a:	fb02 f201 	mul.w	r2, r2, r1
 800055e:	1a9a      	subs	r2, r3, r2
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	605a      	str	r2, [r3, #4]
	cbuf->isfull = (cbuf->head == cbuf->tail);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	685a      	ldr	r2, [r3, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	689b      	ldr	r3, [r3, #8]
 800056c:	429a      	cmp	r2, r3
 800056e:	bf0c      	ite	eq
 8000570:	2301      	moveq	r3, #1
 8000572:	2300      	movne	r3, #0
 8000574:	b2da      	uxtb	r2, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	741a      	strb	r2, [r3, #16]
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	080033b0 	.word	0x080033b0
 8000588:	080034fc 	.word	0x080034fc
 800058c:	08003390 	.word	0x08003390

08000590 <retreat_pointer>:


static void retreat_pointer(cbuf_handle_t cbuf)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	assert(cbuf);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d106      	bne.n	80005ac <retreat_pointer+0x1c>
 800059e:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <retreat_pointer+0x44>)
 80005a0:	4a0d      	ldr	r2, [pc, #52]	; (80005d8 <retreat_pointer+0x48>)
 80005a2:	f240 1111 	movw	r1, #273	; 0x111
 80005a6:	480d      	ldr	r0, [pc, #52]	; (80005dc <retreat_pointer+0x4c>)
 80005a8:	f001 faa0 	bl	8001aec <__assert_func>

	cbuf->isfull = false;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	741a      	strb	r2, [r3, #16]
	cbuf->tail = (cbuf->tail + 1) % cbuf->maxsize;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	3301      	adds	r3, #1
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	68d2      	ldr	r2, [r2, #12]
 80005bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80005c0:	fb02 f201 	mul.w	r2, r2, r1
 80005c4:	1a9a      	subs	r2, r3, r2
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	609a      	str	r2, [r3, #8]
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	080033b0 	.word	0x080033b0
 80005d8:	0800350c 	.word	0x0800350c
 80005dc:	08003390 	.word	0x08003390

080005e0 <CircularUART_Init>:
/******************************************************************************
* Function Definitions
*******************************************************************************/

cbuf_handle_t CircularUART_Init(uint8_t* buffer, size_t size)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
	cbuf_handle_t cbuf =  circular_buffer_init(buffer, size);
 80005ea:	6839      	ldr	r1, [r7, #0]
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f7ff fe67 	bl	80002c0 <circular_buffer_init>
 80005f2:	60f8      	str	r0, [r7, #12]
	return cbuf;
 80005f4:	68fb      	ldr	r3, [r7, #12]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <CircularUART_Send>:

}


uint16_t CircularUART_Send(cbuf_handle_t cbuf, UART_Handle_t* pUART)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b092      	sub	sp, #72	; 0x48
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	6039      	str	r1, [r7, #0]
		size_t length = circular_buffer_size(cbuf);
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff ff49 	bl	80004a0 <circular_buffer_size>
 800060e:	6438      	str	r0, [r7, #64]	; 0x40

		uint8_t data[50];
		for (int i = 0; i < length; ++i)
 8000610:	2300      	movs	r3, #0
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
 8000614:	e00e      	b.n	8000634 <CircularUART_Send+0x36>
		{
			if ( circular_buffer_pop(cbuf,&data[i]) == -1)
 8000616:	f107 020c 	add.w	r2, r7, #12
 800061a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800061c:	4413      	add	r3, r2
 800061e:	4619      	mov	r1, r3
 8000620:	6878      	ldr	r0, [r7, #4]
 8000622:	f7ff fed9 	bl	80003d8 <circular_buffer_pop>
 8000626:	4603      	mov	r3, r0
 8000628:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800062c:	d007      	beq.n	800063e <CircularUART_Send+0x40>
		for (int i = 0; i < length; ++i)
 800062e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000630:	3301      	adds	r3, #1
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
 8000634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000636:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000638:	429a      	cmp	r2, r3
 800063a:	d8ec      	bhi.n	8000616 <CircularUART_Send+0x18>
 800063c:	e000      	b.n	8000640 <CircularUART_Send+0x42>
			{
				break;
 800063e:	bf00      	nop
			}
		}
		pUART->TxLen = length;
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
		pUART->pTxBuffer = data;
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	f107 020c 	add.w	r2, r7, #12
 800064c:	61da      	str	r2, [r3, #28]
		UART_SendData(pUART);
 800064e:	6838      	ldr	r0, [r7, #0]
 8000650:	f000 ffe4 	bl	800161c <UART_SendData>
}
 8000654:	bf00      	nop
 8000656:	4618      	mov	r0, r3
 8000658:	3748      	adds	r7, #72	; 0x48
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
	...

08000660 <SysTickInit>:

volatile uint32_t ticks;


void SysTickInit (void)
{
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
	//Enable Systick
	uint32_t temp = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
	uint32_t clock = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]


	temp |= (3ul << 0U); // Enable counter and Exception
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	f043 0303 	orr.w	r3, r3, #3
 8000674:	60bb      	str	r3, [r7, #8]
	temp |= (1ul << 1U); // 1 for internal clock, 0 for external
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	f043 0302 	orr.w	r3, r3, #2
 800067c:	60bb      	str	r3, [r7, #8]
	*SYST_CSR |= temp;
 800067e:	4b0f      	ldr	r3, [pc, #60]	; (80006bc <SysTickInit+0x5c>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	490e      	ldr	r1, [pc, #56]	; (80006bc <SysTickInit+0x5c>)
 8000684:	68bb      	ldr	r3, [r7, #8]
 8000686:	4313      	orrs	r3, r2
 8000688:	600b      	str	r3, [r1, #0]
	/*
	 * Get Clock - Systick receives (SYSClock*AHBPrescaler)/8
	 */


	RCC_RegDef_t* pRCC = RCC;
 800068a:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <SysTickInit+0x60>)
 800068c:	607b      	str	r3, [r7, #4]

	if ( (pRCC->CR & (1ul << 0U)) == RESET  )
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SysTickInit+0x3e>
		//HSE
	}
	else
	{
		//clock = ( ((pRCC->CR) & (0xFF << 8U) ) >> 8U ) ; //bit 8 to 15 are HSI cal//HSI
		clock = (16000000/8); //bit 8 to 15 are HSI cal//HSI
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <SysTickInit+0x64>)
 800069c:	60fb      	str	r3, [r7, #12]
	}

	//set systick counter to interrupt each ms
	*SYST_RVR = ((clock/(1000))-1);
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	4a09      	ldr	r2, [pc, #36]	; (80006c8 <SysTickInit+0x68>)
 80006a2:	fba2 2303 	umull	r2, r3, r2, r3
 80006a6:	099b      	lsrs	r3, r3, #6
 80006a8:	4a08      	ldr	r2, [pc, #32]	; (80006cc <SysTickInit+0x6c>)
 80006aa:	3b01      	subs	r3, #1
 80006ac:	6013      	str	r3, [r2, #0]

}
 80006ae:	bf00      	nop
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	e000e010 	.word	0xe000e010
 80006c0:	40023800 	.word	0x40023800
 80006c4:	001e8480 	.word	0x001e8480
 80006c8:	10624dd3 	.word	0x10624dd3
 80006cc:	e000e014 	.word	0xe000e014

080006d0 <SysTick_Handler>:


void SysTick_Handler (void)
 {
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
   ticks++;
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <SysTick_Handler+0x18>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	4a03      	ldr	r2, [pc, #12]	; (80006e8 <SysTick_Handler+0x18>)
 80006dc:	6013      	str	r3, [r2, #0]
 }
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	2000015c 	.word	0x2000015c

080006ec <millis>:


inline uint32_t millis (void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
   return ticks;
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <millis+0x14>)
 80006f2:	681b      	ldr	r3, [r3, #0]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	2000015c 	.word	0x2000015c

08000704 <delay_ms>:




void delay_ms (uint32_t t)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  uint32_t start, end;
  start = millis();
 800070c:	f7ff ffee 	bl	80006ec <millis>
 8000710:	60f8      	str	r0, [r7, #12]
  end = start + t;
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	60bb      	str	r3, [r7, #8]
  if (start < end) {
 800071a:	68fa      	ldr	r2, [r7, #12]
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	429a      	cmp	r2, r3
 8000720:	d20d      	bcs.n	800073e <delay_ms+0x3a>
  	while ((millis() >= start) && (millis() < end)) {
 8000722:	bf00      	nop
 8000724:	f7ff ffe2 	bl	80006ec <millis>
 8000728:	4602      	mov	r2, r0
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	4293      	cmp	r3, r2
 800072e:	d813      	bhi.n	8000758 <delay_ms+0x54>
 8000730:	f7ff ffdc 	bl	80006ec <millis>
 8000734:	4602      	mov	r2, r0
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	4293      	cmp	r3, r2
 800073a:	d8f3      	bhi.n	8000724 <delay_ms+0x20>
      // do nothing
    };
  }


}
 800073c:	e00c      	b.n	8000758 <delay_ms+0x54>
    while ((millis() >= start) || (millis() < end)) {
 800073e:	bf00      	nop
 8000740:	f7ff ffd4 	bl	80006ec <millis>
 8000744:	4602      	mov	r2, r0
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	4293      	cmp	r3, r2
 800074a:	d9f9      	bls.n	8000740 <delay_ms+0x3c>
 800074c:	f7ff ffce 	bl	80006ec <millis>
 8000750:	4602      	mov	r2, r0
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	4293      	cmp	r3, r2
 8000756:	d8f3      	bhi.n	8000740 <delay_ms+0x3c>
}
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <GPIO_PeriClockControl>:
 * @Param2:					Enable or Disable macro
 * @Return:					-
 * @Note:					-
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnableDisable){
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	70fb      	strb	r3, [r7, #3]

	if (EnableDisable == ENABLE){
 800076c:	78fb      	ldrb	r3, [r7, #3]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d14c      	bne.n	800080c <GPIO_PeriClockControl+0xac>
		if(pGPIOx == GPIOA){
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4a4e      	ldr	r2, [pc, #312]	; (80008b0 <GPIO_PeriClockControl+0x150>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d106      	bne.n	8000788 <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800077a:	4b4e      	ldr	r3, [pc, #312]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a4d      	ldr	r2, [pc, #308]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}

	}
}
 8000786:	e08d      	b.n	80008a4 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOB){
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4a4b      	ldr	r2, [pc, #300]	; (80008b8 <GPIO_PeriClockControl+0x158>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d106      	bne.n	800079e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000790:	4b48      	ldr	r3, [pc, #288]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000794:	4a47      	ldr	r2, [pc, #284]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 8000796:	f043 0302 	orr.w	r3, r3, #2
 800079a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800079c:	e082      	b.n	80008a4 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOC){
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	4a46      	ldr	r2, [pc, #280]	; (80008bc <GPIO_PeriClockControl+0x15c>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d106      	bne.n	80007b4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80007a6:	4b43      	ldr	r3, [pc, #268]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a42      	ldr	r2, [pc, #264]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007b2:	e077      	b.n	80008a4 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOD){
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4a42      	ldr	r2, [pc, #264]	; (80008c0 <GPIO_PeriClockControl+0x160>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	d106      	bne.n	80007ca <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80007bc:	4b3d      	ldr	r3, [pc, #244]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 80007be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c0:	4a3c      	ldr	r2, [pc, #240]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 80007c2:	f043 0308 	orr.w	r3, r3, #8
 80007c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007c8:	e06c      	b.n	80008a4 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOE){
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a3d      	ldr	r2, [pc, #244]	; (80008c4 <GPIO_PeriClockControl+0x164>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d106      	bne.n	80007e0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80007d2:	4b38      	ldr	r3, [pc, #224]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a37      	ldr	r2, [pc, #220]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 80007d8:	f043 0310 	orr.w	r3, r3, #16
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007de:	e061      	b.n	80008a4 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOF){
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4a39      	ldr	r2, [pc, #228]	; (80008c8 <GPIO_PeriClockControl+0x168>)
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d106      	bne.n	80007f6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80007e8:	4b32      	ldr	r3, [pc, #200]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 80007ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ec:	4a31      	ldr	r2, [pc, #196]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 80007ee:	f043 0320 	orr.w	r3, r3, #32
 80007f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80007f4:	e056      	b.n	80008a4 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOH){
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a2d      	ldr	r2, [pc, #180]	; (80008b0 <GPIO_PeriClockControl+0x150>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d152      	bne.n	80008a4 <GPIO_PeriClockControl+0x144>
			GPIOH_PCLK_EN();
 80007fe:	4b2d      	ldr	r3, [pc, #180]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a2c      	ldr	r2, [pc, #176]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
}
 800080a:	e04b      	b.n	80008a4 <GPIO_PeriClockControl+0x144>
		if(pGPIOx == GPIOA){
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a28      	ldr	r2, [pc, #160]	; (80008b0 <GPIO_PeriClockControl+0x150>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d106      	bne.n	8000822 <GPIO_PeriClockControl+0xc2>
			GPIOA_PCLK_DI();
 8000814:	4b27      	ldr	r3, [pc, #156]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 8000816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000818:	4a26      	ldr	r2, [pc, #152]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 800081a:	f023 0301 	bic.w	r3, r3, #1
 800081e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000820:	e040      	b.n	80008a4 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOB){
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4a24      	ldr	r2, [pc, #144]	; (80008b8 <GPIO_PeriClockControl+0x158>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d106      	bne.n	8000838 <GPIO_PeriClockControl+0xd8>
			GPIOB_PCLK_DI();
 800082a:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a21      	ldr	r2, [pc, #132]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 8000830:	f023 0304 	bic.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000836:	e035      	b.n	80008a4 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOC){
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a20      	ldr	r2, [pc, #128]	; (80008bc <GPIO_PeriClockControl+0x15c>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d106      	bne.n	800084e <GPIO_PeriClockControl+0xee>
			GPIOC_PCLK_DI();
 8000840:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 8000842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000844:	4a1b      	ldr	r2, [pc, #108]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 8000846:	f023 0308 	bic.w	r3, r3, #8
 800084a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800084c:	e02a      	b.n	80008a4 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOD){
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <GPIO_PeriClockControl+0x160>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d106      	bne.n	8000864 <GPIO_PeriClockControl+0x104>
			GPIOD_PCLK_DI();
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a16      	ldr	r2, [pc, #88]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 800085c:	f023 0310 	bic.w	r3, r3, #16
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000862:	e01f      	b.n	80008a4 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOE){
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a17      	ldr	r2, [pc, #92]	; (80008c4 <GPIO_PeriClockControl+0x164>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d106      	bne.n	800087a <GPIO_PeriClockControl+0x11a>
			GPIOE_PCLK_DI();
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 800086e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000870:	4a10      	ldr	r2, [pc, #64]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 8000872:	f023 0320 	bic.w	r3, r3, #32
 8000876:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000878:	e014      	b.n	80008a4 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOF){
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <GPIO_PeriClockControl+0x168>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d106      	bne.n	8000890 <GPIO_PeriClockControl+0x130>
			GPIOF_PCLK_DI();
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 8000888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800088e:	e009      	b.n	80008a4 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOH){
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a07      	ldr	r2, [pc, #28]	; (80008b0 <GPIO_PeriClockControl+0x150>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d105      	bne.n	80008a4 <GPIO_PeriClockControl+0x144>
			GPIOH_PCLK_DI();
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089c:	4a05      	ldr	r2, [pc, #20]	; (80008b4 <GPIO_PeriClockControl+0x154>)
 800089e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	40020000 	.word	0x40020000
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40020400 	.word	0x40020400
 80008bc:	40020800 	.word	0x40020800
 80008c0:	40020c00 	.word	0x40020c00
 80008c4:	40021000 	.word	0x40021000
 80008c8:	40021400 	.word	0x40021400

080008cc <GPIO_Init>:
 * @Return:					-
 * @Note:					-
 */


void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]

	assert(IS_GPIO_PORT(pGPIOHandle->pGPIOX));
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a98      	ldr	r2, [pc, #608]	; (8000b3c <GPIO_Init+0x270>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d028      	beq.n	8000930 <GPIO_Init+0x64>
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a97      	ldr	r2, [pc, #604]	; (8000b40 <GPIO_Init+0x274>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d023      	beq.n	8000930 <GPIO_Init+0x64>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a95      	ldr	r2, [pc, #596]	; (8000b44 <GPIO_Init+0x278>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d01e      	beq.n	8000930 <GPIO_Init+0x64>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a94      	ldr	r2, [pc, #592]	; (8000b48 <GPIO_Init+0x27c>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d019      	beq.n	8000930 <GPIO_Init+0x64>
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a92      	ldr	r2, [pc, #584]	; (8000b4c <GPIO_Init+0x280>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d014      	beq.n	8000930 <GPIO_Init+0x64>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a91      	ldr	r2, [pc, #580]	; (8000b50 <GPIO_Init+0x284>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d00f      	beq.n	8000930 <GPIO_Init+0x64>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a8f      	ldr	r2, [pc, #572]	; (8000b54 <GPIO_Init+0x288>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d00a      	beq.n	8000930 <GPIO_Init+0x64>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a87      	ldr	r2, [pc, #540]	; (8000b3c <GPIO_Init+0x270>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d005      	beq.n	8000930 <GPIO_Init+0x64>
 8000924:	4b8c      	ldr	r3, [pc, #560]	; (8000b58 <GPIO_Init+0x28c>)
 8000926:	4a8d      	ldr	r2, [pc, #564]	; (8000b5c <GPIO_Init+0x290>)
 8000928:	2162      	movs	r1, #98	; 0x62
 800092a:	488d      	ldr	r0, [pc, #564]	; (8000b60 <GPIO_Init+0x294>)
 800092c:	f001 f8de 	bl	8001aec <__assert_func>
	assert(IS_GPIO_PIN(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	791b      	ldrb	r3, [r3, #4]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d005      	beq.n	8000944 <GPIO_Init+0x78>
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	791b      	ldrb	r3, [r3, #4]
 800093c:	0c1b      	lsrs	r3, r3, #16
 800093e:	041b      	lsls	r3, r3, #16
 8000940:	2b00      	cmp	r3, #0
 8000942:	d005      	beq.n	8000950 <GPIO_Init+0x84>
 8000944:	4b87      	ldr	r3, [pc, #540]	; (8000b64 <GPIO_Init+0x298>)
 8000946:	4a85      	ldr	r2, [pc, #532]	; (8000b5c <GPIO_Init+0x290>)
 8000948:	2163      	movs	r1, #99	; 0x63
 800094a:	4885      	ldr	r0, [pc, #532]	; (8000b60 <GPIO_Init+0x294>)
 800094c:	f001 f8ce 	bl	8001aec <__assert_func>
	assert(IS_GPIO_MODE(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode));
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	795b      	ldrb	r3, [r3, #5]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d01d      	beq.n	8000994 <GPIO_Init+0xc8>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	795b      	ldrb	r3, [r3, #5]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d019      	beq.n	8000994 <GPIO_Init+0xc8>
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	795b      	ldrb	r3, [r3, #5]
 8000964:	2b02      	cmp	r3, #2
 8000966:	d015      	beq.n	8000994 <GPIO_Init+0xc8>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	795b      	ldrb	r3, [r3, #5]
 800096c:	2b03      	cmp	r3, #3
 800096e:	d011      	beq.n	8000994 <GPIO_Init+0xc8>
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	795b      	ldrb	r3, [r3, #5]
 8000974:	2b04      	cmp	r3, #4
 8000976:	d00d      	beq.n	8000994 <GPIO_Init+0xc8>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	795b      	ldrb	r3, [r3, #5]
 800097c:	2b05      	cmp	r3, #5
 800097e:	d009      	beq.n	8000994 <GPIO_Init+0xc8>
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	795b      	ldrb	r3, [r3, #5]
 8000984:	2b06      	cmp	r3, #6
 8000986:	d005      	beq.n	8000994 <GPIO_Init+0xc8>
 8000988:	4b77      	ldr	r3, [pc, #476]	; (8000b68 <GPIO_Init+0x29c>)
 800098a:	4a74      	ldr	r2, [pc, #464]	; (8000b5c <GPIO_Init+0x290>)
 800098c:	2164      	movs	r1, #100	; 0x64
 800098e:	4874      	ldr	r0, [pc, #464]	; (8000b60 <GPIO_Init+0x294>)
 8000990:	f001 f8ac 	bl	8001aec <__assert_func>
	assert(IS_GPIO_SPEED(pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed));
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	799b      	ldrb	r3, [r3, #6]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d011      	beq.n	80009c0 <GPIO_Init+0xf4>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	799b      	ldrb	r3, [r3, #6]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d00d      	beq.n	80009c0 <GPIO_Init+0xf4>
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	799b      	ldrb	r3, [r3, #6]
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d009      	beq.n	80009c0 <GPIO_Init+0xf4>
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	799b      	ldrb	r3, [r3, #6]
 80009b0:	2b03      	cmp	r3, #3
 80009b2:	d005      	beq.n	80009c0 <GPIO_Init+0xf4>
 80009b4:	4b6d      	ldr	r3, [pc, #436]	; (8000b6c <GPIO_Init+0x2a0>)
 80009b6:	4a69      	ldr	r2, [pc, #420]	; (8000b5c <GPIO_Init+0x290>)
 80009b8:	2165      	movs	r1, #101	; 0x65
 80009ba:	4869      	ldr	r0, [pc, #420]	; (8000b60 <GPIO_Init+0x294>)
 80009bc:	f001 f896 	bl	8001aec <__assert_func>
	assert(IS_GPIO_PULL(pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl));
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	79db      	ldrb	r3, [r3, #7]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d00d      	beq.n	80009e4 <GPIO_Init+0x118>
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	79db      	ldrb	r3, [r3, #7]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d009      	beq.n	80009e4 <GPIO_Init+0x118>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	79db      	ldrb	r3, [r3, #7]
 80009d4:	2b02      	cmp	r3, #2
 80009d6:	d005      	beq.n	80009e4 <GPIO_Init+0x118>
 80009d8:	4b65      	ldr	r3, [pc, #404]	; (8000b70 <GPIO_Init+0x2a4>)
 80009da:	4a60      	ldr	r2, [pc, #384]	; (8000b5c <GPIO_Init+0x290>)
 80009dc:	2166      	movs	r1, #102	; 0x66
 80009de:	4860      	ldr	r0, [pc, #384]	; (8000b60 <GPIO_Init+0x294>)
 80009e0:	f001 f884 	bl	8001aec <__assert_func>

	GPIO_PeriClockControl(pGPIOHandle->pGPIOX, ENABLE);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2101      	movs	r1, #1
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff feb8 	bl	8000760 <GPIO_PeriClockControl>


	uint32_t temp = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
	//Configure the mode
	//This first line tests if this is a interruption mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	795b      	ldrb	r3, [r3, #5]
 80009f8:	2b03      	cmp	r3, #3
 80009fa:	d814      	bhi.n	8000a26 <GPIO_Init+0x15a>
	{
		temp |= ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode )<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Moder uses 2 bit for each position
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	795b      	ldrb	r3, [r3, #5]
 8000a00:	461a      	mov	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	791b      	ldrb	r3, [r3, #4]
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	461a      	mov	r2, r3
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOX->MODER |= temp;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	6819      	ldr	r1, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	430a      	orrs	r2, r1
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	e0cd      	b.n	8000bc2 <GPIO_Init+0x2f6>
	}
	else
	{
		/* Interrupt Mode*/
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	795b      	ldrb	r3, [r3, #5]
 8000a2a:	2b05      	cmp	r3, #5
 8000a2c:	d117      	bne.n	8000a5e <GPIO_Init+0x192>
		{
			//1.Configure FTSR and clear RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //SET FTSR
 8000a2e:	4b51      	ldr	r3, [pc, #324]	; (8000b74 <GPIO_Init+0x2a8>)
 8000a30:	68db      	ldr	r3, [r3, #12]
 8000a32:	687a      	ldr	r2, [r7, #4]
 8000a34:	7912      	ldrb	r2, [r2, #4]
 8000a36:	4611      	mov	r1, r2
 8000a38:	2201      	movs	r2, #1
 8000a3a:	408a      	lsls	r2, r1
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4a4d      	ldr	r2, [pc, #308]	; (8000b74 <GPIO_Init+0x2a8>)
 8000a40:	430b      	orrs	r3, r1
 8000a42:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //RESET RTSR
 8000a44:	4b4b      	ldr	r3, [pc, #300]	; (8000b74 <GPIO_Init+0x2a8>)
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	687a      	ldr	r2, [r7, #4]
 8000a4a:	7912      	ldrb	r2, [r2, #4]
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	2201      	movs	r2, #1
 8000a50:	408a      	lsls	r2, r1
 8000a52:	43d2      	mvns	r2, r2
 8000a54:	4611      	mov	r1, r2
 8000a56:	4a47      	ldr	r2, [pc, #284]	; (8000b74 <GPIO_Init+0x2a8>)
 8000a58:	400b      	ands	r3, r1
 8000a5a:	6093      	str	r3, [r2, #8]
 8000a5c:	e035      	b.n	8000aca <GPIO_Init+0x1fe>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	795b      	ldrb	r3, [r3, #5]
 8000a62:	2b04      	cmp	r3, #4
 8000a64:	d117      	bne.n	8000a96 <GPIO_Init+0x1ca>
		{
			//1.Configure RTSR and clear FTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //SET RTSR
 8000a66:	4b43      	ldr	r3, [pc, #268]	; (8000b74 <GPIO_Init+0x2a8>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	7912      	ldrb	r2, [r2, #4]
 8000a6e:	4611      	mov	r1, r2
 8000a70:	2201      	movs	r2, #1
 8000a72:	408a      	lsls	r2, r1
 8000a74:	4611      	mov	r1, r2
 8000a76:	4a3f      	ldr	r2, [pc, #252]	; (8000b74 <GPIO_Init+0x2a8>)
 8000a78:	430b      	orrs	r3, r1
 8000a7a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //RESET FTSR
 8000a7c:	4b3d      	ldr	r3, [pc, #244]	; (8000b74 <GPIO_Init+0x2a8>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	7912      	ldrb	r2, [r2, #4]
 8000a84:	4611      	mov	r1, r2
 8000a86:	2201      	movs	r2, #1
 8000a88:	408a      	lsls	r2, r1
 8000a8a:	43d2      	mvns	r2, r2
 8000a8c:	4611      	mov	r1, r2
 8000a8e:	4a39      	ldr	r2, [pc, #228]	; (8000b74 <GPIO_Init+0x2a8>)
 8000a90:	400b      	ands	r3, r1
 8000a92:	60d3      	str	r3, [r2, #12]
 8000a94:	e019      	b.n	8000aca <GPIO_Init+0x1fe>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	795b      	ldrb	r3, [r3, #5]
 8000a9a:	2b06      	cmp	r3, #6
 8000a9c:	d115      	bne.n	8000aca <GPIO_Init+0x1fe>
		{
			//1.configure FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //SET RTSR
 8000a9e:	4b35      	ldr	r3, [pc, #212]	; (8000b74 <GPIO_Init+0x2a8>)
 8000aa0:	689b      	ldr	r3, [r3, #8]
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	7912      	ldrb	r2, [r2, #4]
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	408a      	lsls	r2, r1
 8000aac:	4611      	mov	r1, r2
 8000aae:	4a31      	ldr	r2, [pc, #196]	; (8000b74 <GPIO_Init+0x2a8>)
 8000ab0:	430b      	orrs	r3, r1
 8000ab2:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //SET FTSR
 8000ab4:	4b2f      	ldr	r3, [pc, #188]	; (8000b74 <GPIO_Init+0x2a8>)
 8000ab6:	68db      	ldr	r3, [r3, #12]
 8000ab8:	687a      	ldr	r2, [r7, #4]
 8000aba:	7912      	ldrb	r2, [r2, #4]
 8000abc:	4611      	mov	r1, r2
 8000abe:	2201      	movs	r2, #1
 8000ac0:	408a      	lsls	r2, r1
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	4a2b      	ldr	r2, [pc, #172]	; (8000b74 <GPIO_Init+0x2a8>)
 8000ac6:	430b      	orrs	r3, r1
 8000ac8:	60d3      	str	r3, [r2, #12]
		}
		//2. Configure the GPIO port in the SYSCFG_EXTICR
		uint8_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4); //The division by 4 will identify each EXTICR register to use - 4 because each register uses 4 bits
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	791b      	ldrb	r3, [r3, #4]
 8000ace:	089b      	lsrs	r3, r3, #2
 8000ad0:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4); //This will identify the position in the register
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	791b      	ldrb	r3, [r3, #4]
 8000ad6:	f003 0303 	and.w	r3, r3, #3
 8000ada:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_PORT(pGPIOHandle->pGPIOX);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a16      	ldr	r2, [pc, #88]	; (8000b3c <GPIO_Init+0x270>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d050      	beq.n	8000b88 <GPIO_Init+0x2bc>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a15      	ldr	r2, [pc, #84]	; (8000b40 <GPIO_Init+0x274>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d049      	beq.n	8000b84 <GPIO_Init+0x2b8>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <GPIO_Init+0x278>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d042      	beq.n	8000b80 <GPIO_Init+0x2b4>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <GPIO_Init+0x27c>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d03b      	beq.n	8000b7c <GPIO_Init+0x2b0>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <GPIO_Init+0x280>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d034      	beq.n	8000b78 <GPIO_Init+0x2ac>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <GPIO_Init+0x284>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d00f      	beq.n	8000b38 <GPIO_Init+0x26c>
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	; (8000b54 <GPIO_Init+0x288>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d008      	beq.n	8000b34 <GPIO_Init+0x268>
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <GPIO_Init+0x270>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d101      	bne.n	8000b30 <GPIO_Init+0x264>
 8000b2c:	2307      	movs	r3, #7
 8000b2e:	e02c      	b.n	8000b8a <GPIO_Init+0x2be>
 8000b30:	2300      	movs	r3, #0
 8000b32:	e02a      	b.n	8000b8a <GPIO_Init+0x2be>
 8000b34:	2306      	movs	r3, #6
 8000b36:	e028      	b.n	8000b8a <GPIO_Init+0x2be>
 8000b38:	2305      	movs	r3, #5
 8000b3a:	e026      	b.n	8000b8a <GPIO_Init+0x2be>
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	40020400 	.word	0x40020400
 8000b44:	40020800 	.word	0x40020800
 8000b48:	40020c00 	.word	0x40020c00
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40021400 	.word	0x40021400
 8000b54:	40021800 	.word	0x40021800
 8000b58:	0800351c 	.word	0x0800351c
 8000b5c:	08003658 	.word	0x08003658
 8000b60:	08003540 	.word	0x08003540
 8000b64:	0800356c 	.word	0x0800356c
 8000b68:	080035a4 	.word	0x080035a4
 8000b6c:	080035dc 	.word	0x080035dc
 8000b70:	08003618 	.word	0x08003618
 8000b74:	40013c00 	.word	0x40013c00
 8000b78:	2304      	movs	r3, #4
 8000b7a:	e006      	b.n	8000b8a <GPIO_Init+0x2be>
 8000b7c:	2303      	movs	r3, #3
 8000b7e:	e004      	b.n	8000b8a <GPIO_Init+0x2be>
 8000b80:	2302      	movs	r3, #2
 8000b82:	e002      	b.n	8000b8a <GPIO_Init+0x2be>
 8000b84:	2301      	movs	r3, #1
 8000b86:	e000      	b.n	8000b8a <GPIO_Init+0x2be>
 8000b88:	2300      	movs	r3, #0
 8000b8a:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 8000b8c:	4b65      	ldr	r3, [pc, #404]	; (8000d24 <GPIO_Init+0x458>)
 8000b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b90:	4a64      	ldr	r2, [pc, #400]	; (8000d24 <GPIO_Init+0x458>)
 8000b92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b96:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = ( portcode << (temp2 * 4));
 8000b98:	7a7a      	ldrb	r2, [r7, #9]
 8000b9a:	7abb      	ldrb	r3, [r7, #10]
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	fa02 f103 	lsl.w	r1, r2, r3
 8000ba2:	4a61      	ldr	r2, [pc, #388]	; (8000d28 <GPIO_Init+0x45c>)
 8000ba4:	7afb      	ldrb	r3, [r7, #11]
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000bac:	4b5f      	ldr	r3, [pc, #380]	; (8000d2c <GPIO_Init+0x460>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	7912      	ldrb	r2, [r2, #4]
 8000bb4:	4611      	mov	r1, r2
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	408a      	lsls	r2, r1
 8000bba:	4611      	mov	r1, r2
 8000bbc:	4a5b      	ldr	r2, [pc, #364]	; (8000d2c <GPIO_Init+0x460>)
 8000bbe:	430b      	orrs	r3, r1
 8000bc0:	6013      	str	r3, [r2, #0]

	}
	temp = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60fb      	str	r3, [r7, #12]

	//Configure speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	799b      	ldrb	r3, [r3, #6]
 8000bca:	461a      	mov	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	791b      	ldrb	r3, [r3, #4]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd6:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOX->OSPEEDER &= ~(3ul << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	6899      	ldr	r1, [r3, #8]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	791b      	ldrb	r3, [r3, #4]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43da      	mvns	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	400a      	ands	r2, r1
 8000bf2:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOX->OSPEEDER |= temp; //setting
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	6899      	ldr	r1, [r3, #8]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	430a      	orrs	r2, r1
 8000c02:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]

	//configure PuPd
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	79db      	ldrb	r3, [r3, #7]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	791b      	ldrb	r3, [r3, #4]
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOX->PUPDR &= ~(3ul << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	68d9      	ldr	r1, [r3, #12]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	791b      	ldrb	r3, [r3, #4]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	2203      	movs	r2, #3
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43da      	mvns	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	400a      	ands	r2, r1
 8000c34:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOX->PUPDR |= temp;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	68d9      	ldr	r1, [r3, #12]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	430a      	orrs	r2, r1
 8000c44:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]

	// configure output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType) << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	7a1b      	ldrb	r3, [r3, #8]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	791b      	ldrb	r3, [r3, #4]
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOX->OTYPER  &= ~(1ul << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	6859      	ldr	r1, [r3, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	791b      	ldrb	r3, [r3, #4]
 8000c64:	461a      	mov	r2, r3
 8000c66:	2301      	movs	r3, #1
 8000c68:	4093      	lsls	r3, r2
 8000c6a:	43da      	mvns	r2, r3
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	400a      	ands	r2, r1
 8000c72:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOX->OTYPER |= temp;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	6859      	ldr	r1, [r3, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	430a      	orrs	r2, r1
 8000c82:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]

	//alternate function
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	795b      	ldrb	r3, [r3, #5]
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d145      	bne.n	8000d1c <GPIO_Init+0x450>
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < GPIO_PIN_8){
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	791b      	ldrb	r3, [r3, #4]
 8000c94:	2b07      	cmp	r3, #7
 8000c96:	d81f      	bhi.n	8000cd8 <GPIO_Init+0x40c>
			temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7a5b      	ldrb	r3, [r3, #9]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	791b      	ldrb	r3, [r3, #4]
 8000ca2:	009b      	lsls	r3, r3, #2
 8000ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca8:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOX->AFRL &= ~(15ul << ( 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	6a19      	ldr	r1, [r3, #32]
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	791b      	ldrb	r3, [r3, #4]
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	220f      	movs	r2, #15
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43da      	mvns	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	400a      	ands	r2, r1
 8000cc4:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOX->AFRL |= temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6a19      	ldr	r1, [r3, #32]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	621a      	str	r2, [r3, #32]
 8000cd6:	e01f      	b.n	8000d18 <GPIO_Init+0x44c>
		}
		else{
			temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	7a5b      	ldrb	r3, [r3, #9]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	791b      	ldrb	r3, [r3, #4]
 8000ce2:	3b08      	subs	r3, #8
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOX->AFRH &= ~(15ul << ( 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	791b      	ldrb	r3, [r3, #4]
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	220f      	movs	r2, #15
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	400a      	ands	r2, r1
 8000d06:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOX->AFRH |= temp;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	430a      	orrs	r2, r1
 8000d16:	625a      	str	r2, [r3, #36]	; 0x24
		}
		temp = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]
	}

}
 8000d1c:	bf00      	nop
 8000d1e:	3710      	adds	r7, #16
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40023800 	.word	0x40023800
 8000d28:	40013800 	.word	0x40013800
 8000d2c:	40013c00 	.word	0x40013c00

08000d30 <GPIO_ReadFromInputPin>:
 * @Param1:					GPIOx base address
 * @Param2:					Pin number
 * @Return:					Pin value: SET OR RESET
 * @Note:					-
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	70fb      	strb	r3, [r7, #3]

	uint8_t value = (uint8_t)((pGPIOx->IDR >> PinNumber ) & 0x00000001);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	691a      	ldr	r2, [r3, #16]
 8000d40:	78fb      	ldrb	r3, [r7, #3]
 8000d42:	fa22 f303 	lsr.w	r3, r2, r3
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	73fb      	strb	r3, [r7, #15]
	return value;
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <GPIO_WriteToOutputPin>:
 * @Param2:					Pin number
 * @Param3:					Value (SET or RESET)
 * @Return:					None
 * @Note:					-
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value){
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	70fb      	strb	r3, [r7, #3]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	70bb      	strb	r3, [r7, #2]

	if (Value == GPIO_PIN_SET){
 8000d6c:	78bb      	ldrb	r3, [r7, #2]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d109      	bne.n	8000d86 <GPIO_WriteToOutputPin+0x2a>
		pGPIOx->BSSR |= (1 << PinNumber);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	78fa      	ldrb	r2, [r7, #3]
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	619a      	str	r2, [r3, #24]
	}
	else{
		pGPIOx->BSSR |= (1 << (PinNumber + 0x10));
	}

}
 8000d84:	e009      	b.n	8000d9a <GPIO_WriteToOutputPin+0x3e>
		pGPIOx->BSSR |= (1 << (PinNumber + 0x10));
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	78fa      	ldrb	r2, [r7, #3]
 8000d8c:	3210      	adds	r2, #16
 8000d8e:	2101      	movs	r1, #1
 8000d90:	fa01 f202 	lsl.w	r2, r1, r2
 8000d94:	431a      	orrs	r2, r3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	619a      	str	r2, [r3, #24]
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr

08000da6 <GPIO_ToggleOutputPin>:
 * @Param1:					GPIOx base address
 * @Param2:					Pin number
 * @Return:					None
 * @Note:					-
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
 8000dae:	460b      	mov	r3, r1
 8000db0:	70fb      	strb	r3, [r7, #3]

	if (GPIO_ReadFromInputPin(pGPIOx, PinNumber) == SET )
 8000db2:	78fb      	ldrb	r3, [r7, #3]
 8000db4:	4619      	mov	r1, r3
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ffba 	bl	8000d30 <GPIO_ReadFromInputPin>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d106      	bne.n	8000dd0 <GPIO_ToggleOutputPin+0x2a>
	{
		GPIO_WriteToOutputPin(pGPIOx,PinNumber,GPIO_PIN_RESET);
 8000dc2:	78fb      	ldrb	r3, [r7, #3]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	6878      	ldr	r0, [r7, #4]
 8000dca:	f7ff ffc7 	bl	8000d5c <GPIO_WriteToOutputPin>
	else
	{
		GPIO_WriteToOutputPin(pGPIOx,PinNumber,GPIO_PIN_SET);
	}

}
 8000dce:	e005      	b.n	8000ddc <GPIO_ToggleOutputPin+0x36>
		GPIO_WriteToOutputPin(pGPIOx,PinNumber,GPIO_PIN_SET);
 8000dd0:	78fb      	ldrb	r3, [r7, #3]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ffc0 	bl	8000d5c <GPIO_WriteToOutputPin>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <GPIO_IRQInterruptConfig>:
 * @Param2:					IRQ priority
 * @Param3:					Enable or Disable
 * @Return:					None
 * @Note:					-
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnableDisable){
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	460a      	mov	r2, r1
 8000dee:	71fb      	strb	r3, [r7, #7]
 8000df0:	4613      	mov	r3, r2
 8000df2:	71bb      	strb	r3, [r7, #6]

	if (EnableDisable == ENABLE)
 8000df4:	79bb      	ldrb	r3, [r7, #6]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d133      	bne.n	8000e62 <GPIO_IRQInterruptConfig+0x7e>
	{
		if (IRQNumber < 32){
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	2b1f      	cmp	r3, #31
 8000dfe:	d80a      	bhi.n	8000e16 <GPIO_IRQInterruptConfig+0x32>
			//NVIC_ISER0
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000e00:	4b36      	ldr	r3, [pc, #216]	; (8000edc <GPIO_IRQInterruptConfig+0xf8>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	79fa      	ldrb	r2, [r7, #7]
 8000e06:	2101      	movs	r1, #1
 8000e08:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4a33      	ldr	r2, [pc, #204]	; (8000edc <GPIO_IRQInterruptConfig+0xf8>)
 8000e10:	430b      	orrs	r3, r1
 8000e12:	6013      	str	r3, [r2, #0]
		else if (IRQNumber >= 64 && IRQNumber < 96){
			//NVIC_ICER2
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 8000e14:	e05c      	b.n	8000ed0 <GPIO_IRQInterruptConfig+0xec>
		else if( IRQNumber >= 32 && IRQNumber < 64){
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	2b1f      	cmp	r3, #31
 8000e1a:	d90f      	bls.n	8000e3c <GPIO_IRQInterruptConfig+0x58>
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	2b3f      	cmp	r3, #63	; 0x3f
 8000e20:	d80c      	bhi.n	8000e3c <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000e22:	4b2f      	ldr	r3, [pc, #188]	; (8000ee0 <GPIO_IRQInterruptConfig+0xfc>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	79fa      	ldrb	r2, [r7, #7]
 8000e28:	f002 021f 	and.w	r2, r2, #31
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e32:	4611      	mov	r1, r2
 8000e34:	4a2a      	ldr	r2, [pc, #168]	; (8000ee0 <GPIO_IRQInterruptConfig+0xfc>)
 8000e36:	430b      	orrs	r3, r1
 8000e38:	6013      	str	r3, [r2, #0]
 8000e3a:	e049      	b.n	8000ed0 <GPIO_IRQInterruptConfig+0xec>
		else if (IRQNumber >= 64 && IRQNumber < 96){
 8000e3c:	79fb      	ldrb	r3, [r7, #7]
 8000e3e:	2b3f      	cmp	r3, #63	; 0x3f
 8000e40:	d946      	bls.n	8000ed0 <GPIO_IRQInterruptConfig+0xec>
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	2b5f      	cmp	r3, #95	; 0x5f
 8000e46:	d843      	bhi.n	8000ed0 <GPIO_IRQInterruptConfig+0xec>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000e48:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <GPIO_IRQInterruptConfig+0x100>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	79fa      	ldrb	r2, [r7, #7]
 8000e4e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000e52:	2101      	movs	r1, #1
 8000e54:	fa01 f202 	lsl.w	r2, r1, r2
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4a22      	ldr	r2, [pc, #136]	; (8000ee4 <GPIO_IRQInterruptConfig+0x100>)
 8000e5c:	430b      	orrs	r3, r1
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	e036      	b.n	8000ed0 <GPIO_IRQInterruptConfig+0xec>
	else if (EnableDisable == DISABLE){
 8000e62:	79bb      	ldrb	r3, [r7, #6]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d133      	bne.n	8000ed0 <GPIO_IRQInterruptConfig+0xec>
		if (IRQNumber < 32){
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	2b1f      	cmp	r3, #31
 8000e6c:	d80a      	bhi.n	8000e84 <GPIO_IRQInterruptConfig+0xa0>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000e6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <GPIO_IRQInterruptConfig+0x104>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	79fa      	ldrb	r2, [r7, #7]
 8000e74:	2101      	movs	r1, #1
 8000e76:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4a1a      	ldr	r2, [pc, #104]	; (8000ee8 <GPIO_IRQInterruptConfig+0x104>)
 8000e7e:	430b      	orrs	r3, r1
 8000e80:	6013      	str	r3, [r2, #0]
}
 8000e82:	e025      	b.n	8000ed0 <GPIO_IRQInterruptConfig+0xec>
		else if( IRQNumber >= 32 && IRQNumber < 64){
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b1f      	cmp	r3, #31
 8000e88:	d90f      	bls.n	8000eaa <GPIO_IRQInterruptConfig+0xc6>
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	2b3f      	cmp	r3, #63	; 0x3f
 8000e8e:	d80c      	bhi.n	8000eaa <GPIO_IRQInterruptConfig+0xc6>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <GPIO_IRQInterruptConfig+0x108>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	79fa      	ldrb	r2, [r7, #7]
 8000e96:	f002 021f 	and.w	r2, r2, #31
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4a12      	ldr	r2, [pc, #72]	; (8000eec <GPIO_IRQInterruptConfig+0x108>)
 8000ea4:	430b      	orrs	r3, r1
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	e012      	b.n	8000ed0 <GPIO_IRQInterruptConfig+0xec>
		else if (IRQNumber >= 64 && IRQNumber < 96){
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b3f      	cmp	r3, #63	; 0x3f
 8000eae:	d90f      	bls.n	8000ed0 <GPIO_IRQInterruptConfig+0xec>
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2b5f      	cmp	r3, #95	; 0x5f
 8000eb4:	d80c      	bhi.n	8000ed0 <GPIO_IRQInterruptConfig+0xec>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <GPIO_IRQInterruptConfig+0x10c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	79fa      	ldrb	r2, [r7, #7]
 8000ebc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ec0:	2101      	movs	r1, #1
 8000ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4a09      	ldr	r2, [pc, #36]	; (8000ef0 <GPIO_IRQInterruptConfig+0x10c>)
 8000eca:	430b      	orrs	r3, r1
 8000ecc:	6013      	str	r3, [r2, #0]
}
 8000ece:	e7ff      	b.n	8000ed0 <GPIO_IRQInterruptConfig+0xec>
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000e104 	.word	0xe000e104
 8000ee4:	e000e108 	.word	0xe000e108
 8000ee8:	e000e180 	.word	0xe000e180
 8000eec:	e000e184 	.word	0xe000e184
 8000ef0:	e000e188 	.word	0xe000e188

08000ef4 <GPIO_IRQPriorityConfig>:
	 *	each register is divided by 8 bits each IRQnumbers
	 *	To find which IPR register, divide by 4 (3 IRQ in each register)
 ************************************************************************/


void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority){
 8000ef4:	b480      	push	{r7}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	460a      	mov	r2, r1
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	4613      	mov	r3, r2
 8000f02:	71bb      	strb	r3, [r7, #6]
		//Here we find the IPR register that needs to be configured
		uint8_t iprx = IRQNumber / 4;
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	089b      	lsrs	r3, r3, #2
 8000f08:	73fb      	strb	r3, [r7, #15]
		//because each register is divided in 4 different IRQ, we use the MOD 4
		uint8_t iprx_section = IRQNumber % 4;
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	73bb      	strb	r3, [r7, #14]
		/*Each register is 32 bits so we multiply the register number by 4
		 * Notice the 4 lower bits are inaccessible, so we need to shift by 4
		 * to configure the 4 higher bits
		 */
		uint8_t shift_IRQ = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8000f12:	7bbb      	ldrb	r3, [r7, #14]
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	b2db      	uxtb	r3, r3
 8000f18:	3304      	adds	r3, #4
 8000f1a:	737b      	strb	r3, [r7, #13]
		*(NVIC_PR_BASEADDRESS + (iprx * 4)) = (IRQPriority << shift_IRQ);
 8000f1c:	79ba      	ldrb	r2, [r7, #6]
 8000f1e:	7b7b      	ldrb	r3, [r7, #13]
 8000f20:	409a      	lsls	r2, r3
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	011b      	lsls	r3, r3, #4
 8000f26:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000f2a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000f2e:	601a      	str	r2, [r3, #0]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <GPIO_Clear_Interrupt>:
 * @Return:					None
 * @Note:					-
 ************************************************************************/


void GPIO_Clear_Interrupt(uint8_t PinNumber){
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
/*
 * Remember to use the correct implementation of the EXTI_IRQHandler
 * those functions are weak defined in Startup file
 */
	if( (EXTI->PR & (1 << PinNumber)) != 0){
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <GPIO_Clear_Interrupt+0x3c>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	79fa      	ldrb	r2, [r7, #7]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f52:	4013      	ands	r3, r2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d009      	beq.n	8000f6c <GPIO_Clear_Interrupt+0x30>
		EXTI->PR |= (1 << PinNumber); // PR register is cleared with setting 1.
 8000f58:	4b07      	ldr	r3, [pc, #28]	; (8000f78 <GPIO_Clear_Interrupt+0x3c>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	79fa      	ldrb	r2, [r7, #7]
 8000f5e:	2101      	movs	r1, #1
 8000f60:	fa01 f202 	lsl.w	r2, r1, r2
 8000f64:	4611      	mov	r1, r2
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <GPIO_Clear_Interrupt+0x3c>)
 8000f68:	430b      	orrs	r3, r1
 8000f6a:	6153      	str	r3, [r2, #20]
	}
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	40013c00 	.word	0x40013c00

08000f7c <RCC_GetPCLK1>:
	HSE = 1,
	PLL = 2
} clocksource_t;

uint32_t RCC_GetPCLK1(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
	uint32_t pclk1 = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
	uint32_t ahbp = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
	uint32_t apb1p = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
	/*
	 * SYSTEM CLOCK
	 */
	clocksource_t clksource = ( (RCC->CFGR >> 2) & 0x3); //get RCC SW
 8000f8e:	4b23      	ldr	r3, [pc, #140]	; (800101c <RCC_GetPCLK1+0xa0>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	f003 0303 	and.w	r3, r3, #3
 8000f9a:	72fb      	strb	r3, [r7, #11]

	if (clksource == HSI)
 8000f9c:	7afb      	ldrb	r3, [r7, #11]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d102      	bne.n	8000fa8 <RCC_GetPCLK1+0x2c>
	{
		pclk1 = 16000000;
 8000fa2:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <RCC_GetPCLK1+0xa4>)
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	e008      	b.n	8000fba <RCC_GetPCLK1+0x3e>
	}
	else if (clksource == HSE)
 8000fa8:	7afb      	ldrb	r3, [r7, #11]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d102      	bne.n	8000fb4 <RCC_GetPCLK1+0x38>
	{
		pclk1 = EXTERNALCRISTAL;
 8000fae:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <RCC_GetPCLK1+0xa8>)
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	e002      	b.n	8000fba <RCC_GetPCLK1+0x3e>
	}
	else
	{
		pclk1 = RCC_GetPLLOutputClock();
 8000fb4:	f000 f896 	bl	80010e4 <RCC_GetPLLOutputClock>
 8000fb8:	6178      	str	r0, [r7, #20]
	}

	/*
	 * AHB Prescaller
	 */
	uint32_t temp = (( RCC->CFGR >> 4) & 0xF);
 8000fba:	4b18      	ldr	r3, [pc, #96]	; (800101c <RCC_GetPCLK1+0xa0>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	091b      	lsrs	r3, r3, #4
 8000fc0:	f003 030f 	and.w	r3, r3, #15
 8000fc4:	607b      	str	r3, [r7, #4]
	if (temp < 8)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b07      	cmp	r3, #7
 8000fca:	d802      	bhi.n	8000fd2 <RCC_GetPCLK1+0x56>
	{
		ahbp = 1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	613b      	str	r3, [r7, #16]
 8000fd0:	e005      	b.n	8000fde <RCC_GetPCLK1+0x62>
	}
	else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3b08      	subs	r3, #8
 8000fd6:	4a14      	ldr	r2, [pc, #80]	; (8001028 <RCC_GetPCLK1+0xac>)
 8000fd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fdc:	613b      	str	r3, [r7, #16]
	}

	/*
	 * APB1 Prescaller
	 */
	temp = (( RCC->CFGR >> 10) & 0x7);
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <RCC_GetPCLK1+0xa0>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	0a9b      	lsrs	r3, r3, #10
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	607b      	str	r3, [r7, #4]
	if (temp < 4)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	d802      	bhi.n	8000ff6 <RCC_GetPCLK1+0x7a>
	{
		apb1p = 1;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	e004      	b.n	8001000 <RCC_GetPCLK1+0x84>
	}
	else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3b04      	subs	r3, #4
 8000ffa:	4a0c      	ldr	r2, [pc, #48]	; (800102c <RCC_GetPCLK1+0xb0>)
 8000ffc:	5cd3      	ldrb	r3, [r2, r3]
 8000ffe:	60fb      	str	r3, [r7, #12]
	}


	pclk1 =  (pclk1 / ahbp) /apb1p;
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	fbb2 f2f3 	udiv	r2, r2, r3
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	fbb2 f3f3 	udiv	r3, r2, r3
 800100e:	617b      	str	r3, [r7, #20]

	return pclk1;
 8001010:	697b      	ldr	r3, [r7, #20]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40023800 	.word	0x40023800
 8001020:	00f42400 	.word	0x00f42400
 8001024:	007a1200 	.word	0x007a1200
 8001028:	20000000 	.word	0x20000000
 800102c:	20000010 	.word	0x20000010

08001030 <RCC_GetPCLK2>:
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK2(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
	uint32_t pclk2 = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
	uint32_t ahbp = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
	uint32_t apb2p = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
	/*
	 * SYSTEM CLOCK
	 */
	clocksource_t clksource = ( (RCC->CFGR >> 2) & 0x3); //get RCC SW
 8001042:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <RCC_GetPCLK2+0xa0>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	089b      	lsrs	r3, r3, #2
 8001048:	b2db      	uxtb	r3, r3
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	72fb      	strb	r3, [r7, #11]

	if (clksource == HSI)
 8001050:	7afb      	ldrb	r3, [r7, #11]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d102      	bne.n	800105c <RCC_GetPCLK2+0x2c>
	{
		pclk2 = 16000000;
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <RCC_GetPCLK2+0xa4>)
 8001058:	617b      	str	r3, [r7, #20]
 800105a:	e008      	b.n	800106e <RCC_GetPCLK2+0x3e>
	}
	else if (clksource == HSE)
 800105c:	7afb      	ldrb	r3, [r7, #11]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d102      	bne.n	8001068 <RCC_GetPCLK2+0x38>
	{
		pclk2 = EXTERNALCRISTAL;
 8001062:	4b1d      	ldr	r3, [pc, #116]	; (80010d8 <RCC_GetPCLK2+0xa8>)
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	e002      	b.n	800106e <RCC_GetPCLK2+0x3e>
	}
	else
	{
		pclk2 = RCC_GetPLLOutputClock();
 8001068:	f000 f83c 	bl	80010e4 <RCC_GetPLLOutputClock>
 800106c:	6178      	str	r0, [r7, #20]
	}

	/*
	 * AHB Prescaller
	 */
	uint32_t temp = (( RCC->CFGR >> 4) & 0xF);
 800106e:	4b18      	ldr	r3, [pc, #96]	; (80010d0 <RCC_GetPCLK2+0xa0>)
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	091b      	lsrs	r3, r3, #4
 8001074:	f003 030f 	and.w	r3, r3, #15
 8001078:	607b      	str	r3, [r7, #4]
	if (temp < 8)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2b07      	cmp	r3, #7
 800107e:	d802      	bhi.n	8001086 <RCC_GetPCLK2+0x56>
	{
		ahbp = 1;
 8001080:	2301      	movs	r3, #1
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	e005      	b.n	8001092 <RCC_GetPCLK2+0x62>
	}
	else
	{
		ahbp = AHB_PreScaler[temp-8];
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3b08      	subs	r3, #8
 800108a:	4a14      	ldr	r2, [pc, #80]	; (80010dc <RCC_GetPCLK2+0xac>)
 800108c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001090:	613b      	str	r3, [r7, #16]
	}

	/*
	 * APB2 Prescaller
	 */
	temp = (( RCC->CFGR >> 13) & 0x7);
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <RCC_GetPCLK2+0xa0>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	0b5b      	lsrs	r3, r3, #13
 8001098:	f003 0307 	and.w	r3, r3, #7
 800109c:	607b      	str	r3, [r7, #4]
	if (temp < 4)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d802      	bhi.n	80010aa <RCC_GetPCLK2+0x7a>
	{
		apb2p = 1;
 80010a4:	2301      	movs	r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	e004      	b.n	80010b4 <RCC_GetPCLK2+0x84>
	}
	else
	{
		apb2p = APB1_PreScaler[temp-4];
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3b04      	subs	r3, #4
 80010ae:	4a0c      	ldr	r2, [pc, #48]	; (80010e0 <RCC_GetPCLK2+0xb0>)
 80010b0:	5cd3      	ldrb	r3, [r2, r3]
 80010b2:	60fb      	str	r3, [r7, #12]
	}


	pclk2 =  (pclk2 / ahbp) /apb2p;
 80010b4:	697a      	ldr	r2, [r7, #20]
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	fbb2 f3f3 	udiv	r3, r2, r3
 80010c2:	617b      	str	r3, [r7, #20]

	return pclk2;
 80010c4:	697b      	ldr	r3, [r7, #20]
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800
 80010d4:	00f42400 	.word	0x00f42400
 80010d8:	007a1200 	.word	0x007a1200
 80010dc:	20000000 	.word	0x20000000
 80010e0:	20000010 	.word	0x20000010

080010e4 <RCC_GetPLLOutputClock>:



uint32_t  RCC_GetPLLOutputClock()
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0

	//TODO: Implement
	return 0;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <SPI_PeripheralControl>:
* @see SPI_PeripheralControl

*******************************************************************************/

void SPI_PeripheralControl(SPI_RegDef_t *pSPIRegDef, uint8_t EnableDisable)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	70fb      	strb	r3, [r7, #3]
	if (EnableDisable == ENABLE)
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	2b01      	cmp	r3, #1
 8001104:	d106      	bne.n	8001114 <SPI_PeripheralControl+0x20>
	{
		pSPIRegDef->CR1 |= (1 << SPI_CR1_SPE);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	601a      	str	r2, [r3, #0]
	else
	{
		pSPIRegDef->CR1 &= ~(1 << SPI_CR1_SPE);
	}

}
 8001112:	e005      	b.n	8001120 <SPI_PeripheralControl+0x2c>
		pSPIRegDef->CR1 &= ~(1 << SPI_CR1_SPE);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <SPI_GetFlagStatus>:

/*
 * FLAG Status
 */
FLAG_Status_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]

	if (pSPIx->SR & FlagName)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	4013      	ands	r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8001142:	2301      	movs	r3, #1
 8001144:	e000      	b.n	8001148 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8001146:	2300      	movs	r3, #0
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <SPI_SendData>:
/*
 * Data send and Receive - Blocking mode
 */

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTXBuffer, uint32_t Lenght)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
	while (Lenght > 0)
 8001160:	e014      	b.n	800118c <SPI_SendData+0x38>
	{
		//while( !( pSPIx->SR & (1 << SPI_SR_TXE) ) )  //This tests if the bit position is set
		while( SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET );
 8001162:	bf00      	nop
 8001164:	2102      	movs	r1, #2
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f7ff ffe0 	bl	800112c <SPI_GetFlagStatus>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f8      	beq.n	8001164 <SPI_SendData+0x10>

		//Verify the Frame format (8bits or 16 bits) using the CR1_DFF
		if ( (pSPIx->CR1 & (1 << SPI_CR1_DFF) ) == 1)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]

		}
		else
		{
			//8bits
			pSPIx->DR = *(pTXBuffer);
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	60da      	str	r2, [r3, #12]
			pTXBuffer++;
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	3301      	adds	r3, #1
 8001184:	60bb      	str	r3, [r7, #8]
		}
		Lenght--;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3b01      	subs	r3, #1
 800118a:	607b      	str	r3, [r7, #4]
	while (Lenght > 0)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d1e7      	bne.n	8001162 <SPI_SendData+0xe>
	}

}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <SPI_ReceiveData>:

/*
 * Receive data from SPI- Blocking mode
 */
void SPI_ReceiveData(SPI_RegDef_t *pSPIx, uint8_t *pRXBuffer, uint32_t Lenght)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b084      	sub	sp, #16
 800119e:	af00      	add	r7, sp, #0
 80011a0:	60f8      	str	r0, [r7, #12]
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
	while (Lenght > 0)
 80011a6:	e014      	b.n	80011d2 <SPI_ReceiveData+0x38>
	{
		//while( !( pSPIx->SR & (1 << SPI_SR_TXE) ) )  //This tests if the bit position is set
		while( SPI_GetFlagStatus(pSPIx, SPI_RXNE_FLAG) == FLAG_RESET );
 80011a8:	bf00      	nop
 80011aa:	2101      	movs	r1, #1
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f7ff ffbd 	bl	800112c <SPI_GetFlagStatus>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d0f8      	beq.n	80011aa <SPI_ReceiveData+0x10>

		//Verify the Frame format (8bits or 16 bits) using the CR1_DFF
		if ( (pSPIx->CR1 & (1 << SPI_CR1_DFF) ) == 1)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]

		}
		else
		{
			//8bits
			*((uint16_t*)pRXBuffer) = pSPIx->DR;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	801a      	strh	r2, [r3, #0]
			pRXBuffer++;
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	3301      	adds	r3, #1
 80011ca:	60bb      	str	r3, [r7, #8]
		}
		Lenght--;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	607b      	str	r3, [r7, #4]
	while (Lenght > 0)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1e7      	bne.n	80011a8 <SPI_ReceiveData+0xe>
	}

}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <UART_PeriClockControl>:

/*
 * Peripheral clock
 */
Status_t UART_PeriClockControl(UART_RegDef_t *pUARTx, uint8_t EnableDisable)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
	if (EnableDisable == ENABLE)
 80011ec:	78fb      	ldrb	r3, [r7, #3]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d145      	bne.n	800127e <UART_PeriClockControl+0x9e>
		{
			if (pUARTx == UART1)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4a      	ldr	r2, [pc, #296]	; (8001320 <UART_PeriClockControl+0x140>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d106      	bne.n	8001208 <UART_PeriClockControl+0x28>
			{
				UART1_PCLK_EN();
 80011fa:	4b4a      	ldr	r3, [pc, #296]	; (8001324 <UART_PeriClockControl+0x144>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	4a49      	ldr	r2, [pc, #292]	; (8001324 <UART_PeriClockControl+0x144>)
 8001200:	f043 0310 	orr.w	r3, r3, #16
 8001204:	6453      	str	r3, [r2, #68]	; 0x44
 8001206:	e038      	b.n	800127a <UART_PeriClockControl+0x9a>
			}
			else if(pUARTx == UART2)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a47      	ldr	r2, [pc, #284]	; (8001328 <UART_PeriClockControl+0x148>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d106      	bne.n	800121e <UART_PeriClockControl+0x3e>
			{
				UART2_PCLK_EN();
 8001210:	4b44      	ldr	r3, [pc, #272]	; (8001324 <UART_PeriClockControl+0x144>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	4a43      	ldr	r2, [pc, #268]	; (8001324 <UART_PeriClockControl+0x144>)
 8001216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800121a:	6413      	str	r3, [r2, #64]	; 0x40
 800121c:	e02d      	b.n	800127a <UART_PeriClockControl+0x9a>
			}
			else if(pUARTx == UART3)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4a42      	ldr	r2, [pc, #264]	; (800132c <UART_PeriClockControl+0x14c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d106      	bne.n	8001234 <UART_PeriClockControl+0x54>
			{
				UART3_PCLK_EN();
 8001226:	4b3f      	ldr	r3, [pc, #252]	; (8001324 <UART_PeriClockControl+0x144>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a3e      	ldr	r2, [pc, #248]	; (8001324 <UART_PeriClockControl+0x144>)
 800122c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	e022      	b.n	800127a <UART_PeriClockControl+0x9a>
			}
			else if(pUARTx == UART4)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a3e      	ldr	r2, [pc, #248]	; (8001330 <UART_PeriClockControl+0x150>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d106      	bne.n	800124a <UART_PeriClockControl+0x6a>
			{
				UART4_PCLK_EN();
 800123c:	4b39      	ldr	r3, [pc, #228]	; (8001324 <UART_PeriClockControl+0x144>)
 800123e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001240:	4a38      	ldr	r2, [pc, #224]	; (8001324 <UART_PeriClockControl+0x144>)
 8001242:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001246:	6413      	str	r3, [r2, #64]	; 0x40
 8001248:	e017      	b.n	800127a <UART_PeriClockControl+0x9a>
			}
			else if(pUARTx == UART5)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a39      	ldr	r2, [pc, #228]	; (8001334 <UART_PeriClockControl+0x154>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d106      	bne.n	8001260 <UART_PeriClockControl+0x80>
			{
				UART5_PCLK_EN();
 8001252:	4b34      	ldr	r3, [pc, #208]	; (8001324 <UART_PeriClockControl+0x144>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	4a33      	ldr	r2, [pc, #204]	; (8001324 <UART_PeriClockControl+0x144>)
 8001258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800125c:	6413      	str	r3, [r2, #64]	; 0x40
 800125e:	e00c      	b.n	800127a <UART_PeriClockControl+0x9a>
			}
			else if(pUARTx == UART6)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a35      	ldr	r2, [pc, #212]	; (8001338 <UART_PeriClockControl+0x158>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d106      	bne.n	8001276 <UART_PeriClockControl+0x96>
			{
				UART6_PCLK_EN();
 8001268:	4b2e      	ldr	r3, [pc, #184]	; (8001324 <UART_PeriClockControl+0x144>)
 800126a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126c:	4a2d      	ldr	r2, [pc, #180]	; (8001324 <UART_PeriClockControl+0x144>)
 800126e:	f043 0320 	orr.w	r3, r3, #32
 8001272:	6453      	str	r3, [r2, #68]	; 0x44
 8001274:	e001      	b.n	800127a <UART_PeriClockControl+0x9a>
			}
			else
			{
				return STATUS_ERROR;
 8001276:	2300      	movs	r3, #0
 8001278:	e04b      	b.n	8001312 <UART_PeriClockControl+0x132>
			}
			return STATUS_OK;
 800127a:	2301      	movs	r3, #1
 800127c:	e049      	b.n	8001312 <UART_PeriClockControl+0x132>
		}
	else if (EnableDisable == DISABLE)
 800127e:	78fb      	ldrb	r3, [r7, #3]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d145      	bne.n	8001310 <UART_PeriClockControl+0x130>
	{
		if (pUARTx == UART1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a26      	ldr	r2, [pc, #152]	; (8001320 <UART_PeriClockControl+0x140>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d106      	bne.n	800129a <UART_PeriClockControl+0xba>
		{
			UART1_PCLK_DI();
 800128c:	4b25      	ldr	r3, [pc, #148]	; (8001324 <UART_PeriClockControl+0x144>)
 800128e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001290:	4a24      	ldr	r2, [pc, #144]	; (8001324 <UART_PeriClockControl+0x144>)
 8001292:	f023 0310 	bic.w	r3, r3, #16
 8001296:	6453      	str	r3, [r2, #68]	; 0x44
 8001298:	e038      	b.n	800130c <UART_PeriClockControl+0x12c>
		}
		else if(pUARTx == UART2)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a22      	ldr	r2, [pc, #136]	; (8001328 <UART_PeriClockControl+0x148>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d106      	bne.n	80012b0 <UART_PeriClockControl+0xd0>
		{
			UART2_PCLK_DI();
 80012a2:	4b20      	ldr	r3, [pc, #128]	; (8001324 <UART_PeriClockControl+0x144>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	4a1f      	ldr	r2, [pc, #124]	; (8001324 <UART_PeriClockControl+0x144>)
 80012a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80012ac:	6413      	str	r3, [r2, #64]	; 0x40
 80012ae:	e02d      	b.n	800130c <UART_PeriClockControl+0x12c>
		}
		else if(pUARTx == UART3)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a1e      	ldr	r2, [pc, #120]	; (800132c <UART_PeriClockControl+0x14c>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d106      	bne.n	80012c6 <UART_PeriClockControl+0xe6>
		{
			UART3_PCLK_DI();
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <UART_PeriClockControl+0x144>)
 80012ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012bc:	4a19      	ldr	r2, [pc, #100]	; (8001324 <UART_PeriClockControl+0x144>)
 80012be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c2:	6413      	str	r3, [r2, #64]	; 0x40
 80012c4:	e022      	b.n	800130c <UART_PeriClockControl+0x12c>
		}
		else if(pUARTx == UART4)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a19      	ldr	r2, [pc, #100]	; (8001330 <UART_PeriClockControl+0x150>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d106      	bne.n	80012dc <UART_PeriClockControl+0xfc>
		{
			UART4_PCLK_DI();
 80012ce:	4b15      	ldr	r3, [pc, #84]	; (8001324 <UART_PeriClockControl+0x144>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a14      	ldr	r2, [pc, #80]	; (8001324 <UART_PeriClockControl+0x144>)
 80012d4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	e017      	b.n	800130c <UART_PeriClockControl+0x12c>
		}
		else if(pUARTx == UART5)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a15      	ldr	r2, [pc, #84]	; (8001334 <UART_PeriClockControl+0x154>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d106      	bne.n	80012f2 <UART_PeriClockControl+0x112>
		{
			UART5_PCLK_DI();
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <UART_PeriClockControl+0x144>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <UART_PeriClockControl+0x144>)
 80012ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80012ee:	6413      	str	r3, [r2, #64]	; 0x40
 80012f0:	e00c      	b.n	800130c <UART_PeriClockControl+0x12c>
		}
		else if(pUARTx == UART6)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a10      	ldr	r2, [pc, #64]	; (8001338 <UART_PeriClockControl+0x158>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d106      	bne.n	8001308 <UART_PeriClockControl+0x128>
		{
			UART6_PCLK_DI();
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <UART_PeriClockControl+0x144>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a09      	ldr	r2, [pc, #36]	; (8001324 <UART_PeriClockControl+0x144>)
 8001300:	f023 0320 	bic.w	r3, r3, #32
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	e001      	b.n	800130c <UART_PeriClockControl+0x12c>
		}
		else
		{
			return STATUS_ERROR;
 8001308:	2300      	movs	r3, #0
 800130a:	e002      	b.n	8001312 <UART_PeriClockControl+0x132>
		}
		return STATUS_OK;
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <UART_PeriClockControl+0x132>
	}
	else return STATUS_ERROR;
 8001310:	2300      	movs	r3, #0

}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40011000 	.word	0x40011000
 8001324:	40023800 	.word	0x40023800
 8001328:	40004400 	.word	0x40004400
 800132c:	40004800 	.word	0x40004800
 8001330:	40004c00 	.word	0x40004c00
 8001334:	40005000 	.word	0x40005000
 8001338:	40011400 	.word	0x40011400

0800133c <UART_Init>:

/*
 * Init and De-Init
 */
Status_t UART_Init(UART_Handle_t *pUARTHandle)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
	UART_PeriClockControl(pUARTHandle->pUARTx, ENABLE);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2101      	movs	r1, #1
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff48 	bl	80011e0 <UART_PeriClockControl>

	uint32_t CR1temp = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
	uint32_t CR2temp = 0;
 8001354:	2300      	movs	r3, #0
 8001356:	613b      	str	r3, [r7, #16]
	uint32_t CR3temp = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	60fb      	str	r3, [r7, #12]

	//Mode
	if ( pUARTHandle->UARTConfig.USART_Mode == UART_MODE_TX)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d108      	bne.n	8001376 <UART_Init+0x3a>
	{
		CR1temp |= (1ul << UART_CR1_TE);
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	617b      	str	r3, [r7, #20]
		CR1temp &= ~(1ul << UART_CR1_RE);
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f023 0304 	bic.w	r3, r3, #4
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	e01b      	b.n	80013ae <UART_Init+0x72>
	}
	else if (pUARTHandle->UARTConfig.USART_Mode == UART_MODE_RX)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d108      	bne.n	8001390 <UART_Init+0x54>
	{
		CR1temp &= ~(1ul << UART_CR1_TE);
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	f023 0308 	bic.w	r3, r3, #8
 8001384:	617b      	str	r3, [r7, #20]
		CR1temp |= (1ul << UART_CR1_RE);
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	e00e      	b.n	80013ae <UART_Init+0x72>
	}
	else if (pUARTHandle->UARTConfig.USART_Mode == UART_MODE_TXRX)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d108      	bne.n	80013aa <UART_Init+0x6e>
	{
		CR1temp |= (1ul << UART_CR1_TE);
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f043 0308 	orr.w	r3, r3, #8
 800139e:	617b      	str	r3, [r7, #20]
		CR1temp |= (1ul << UART_CR1_RE);
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	f043 0304 	orr.w	r3, r3, #4
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	e001      	b.n	80013ae <UART_Init+0x72>
	}
	else return STATUS_ERROR;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e0bb      	b.n	8001526 <UART_Init+0x1ea>

	//Wordlength
	if ( pUARTHandle->UARTConfig.USART_WordLength == UART_WORD_8BITS)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d104      	bne.n	80013c0 <UART_Init+0x84>
	{
		CR1temp &= ~(1ul << UART_CR1_M);
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	e00a      	b.n	80013d6 <UART_Init+0x9a>
	}
	else if (pUARTHandle->UARTConfig.USART_WordLength == UART_WORD_9BITS)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d104      	bne.n	80013d2 <UART_Init+0x96>
	{
		CR1temp |= (1ul << UART_CR1_M);
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	e001      	b.n	80013d6 <UART_Init+0x9a>
	}
	else return STATUS_ERROR;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e0a7      	b.n	8001526 <UART_Init+0x1ea>

	//Parity
	if ( pUARTHandle->UARTConfig.USART_Parity == UART_PARITY_DISABLE)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d104      	bne.n	80013e8 <UART_Init+0xac>
	{
		CR1temp &= ~(1ul << UART_CR1_PCE);
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	e01b      	b.n	8001420 <UART_Init+0xe4>
	}
	else if (pUARTHandle->UARTConfig.USART_Parity == UART_PARITY_EN_EVEN)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	695b      	ldr	r3, [r3, #20]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d108      	bne.n	8001402 <UART_Init+0xc6>
	{
		CR1temp |= (1ul << UART_CR1_PCE);
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013f6:	617b      	str	r3, [r7, #20]
		CR1temp &= ~(1ul << UART_CR1_PS);
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	e00e      	b.n	8001420 <UART_Init+0xe4>
	}
	else if (pUARTHandle->UARTConfig.USART_Parity == UART_PARITY_EN_ODD)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	2b02      	cmp	r3, #2
 8001408:	d108      	bne.n	800141c <UART_Init+0xe0>
	{
		CR1temp |= (1ul << UART_CR1_PCE);
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001410:	617b      	str	r3, [r7, #20]
		CR1temp |= (1ul << UART_CR1_PS);
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	e001      	b.n	8001420 <UART_Init+0xe4>
	}
	else return STATUS_ERROR;
 800141c:	2300      	movs	r3, #0
 800141e:	e082      	b.n	8001526 <UART_Init+0x1ea>

	//Stopbits - default 1
	if (pUARTHandle->UARTConfig.USART_StopBits == UART_STOPBITS_1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d104      	bne.n	8001432 <UART_Init+0xf6>
	{
		CR2temp &= ~(3ul << UART_CR2_STOP);
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	e01c      	b.n	800146c <UART_Init+0x130>
	}
	else if (pUARTHandle->UARTConfig.USART_StopBits == UART_STOPBITS_HALF)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d104      	bne.n	8001444 <UART_Init+0x108>
	{
		CR2temp |= (1ul << UART_CR2_STOP);
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	e013      	b.n	800146c <UART_Init+0x130>
	}
	else if (pUARTHandle->UARTConfig.USART_StopBits == UART_STOPBITS_2)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d104      	bne.n	8001456 <UART_Init+0x11a>
	{
		CR2temp |= (2ul << UART_CR2_STOP);
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	e00a      	b.n	800146c <UART_Init+0x130>
	}
	else if (pUARTHandle->UARTConfig.USART_StopBits == UART_STOPBITS_1HALF)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	2b03      	cmp	r3, #3
 800145c:	d104      	bne.n	8001468 <UART_Init+0x12c>
	{
		CR2temp|= (3ul << UART_CR2_STOP);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	e001      	b.n	800146c <UART_Init+0x130>
	}
	else return STATUS_ERROR;
 8001468:	2300      	movs	r3, #0
 800146a:	e05c      	b.n	8001526 <UART_Init+0x1ea>



	//Flowcontrol
	if ( pUARTHandle->UARTConfig.USART_HWFlowControl == UART_FLOWCONTROL_NONE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d108      	bne.n	8001486 <UART_Init+0x14a>
	{
		CR3temp &= ~(1ul << UART_CR3_CTSE);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800147a:	60fb      	str	r3, [r7, #12]
		CR3temp &= ~(1ul << UART_CR3_RTSE);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001482:	60fb      	str	r3, [r7, #12]
 8001484:	e028      	b.n	80014d8 <UART_Init+0x19c>
	}
	else if (pUARTHandle->UARTConfig.USART_HWFlowControl == UART_FLOWCONTROL_CTS)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d108      	bne.n	80014a0 <UART_Init+0x164>
	{
		CR3temp |= (1ul << UART_CR3_CTSE);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001494:	60fb      	str	r3, [r7, #12]
		CR3temp &= ~(1ul << UART_CR3_RTSE);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	e01b      	b.n	80014d8 <UART_Init+0x19c>
	}
	else if (pUARTHandle->UARTConfig.USART_HWFlowControl == UART_FLOWCONTROL_RTS)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d108      	bne.n	80014ba <UART_Init+0x17e>
	{
		CR3temp &= ~(1ul << UART_CR3_CTSE);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80014ae:	60fb      	str	r3, [r7, #12]
		CR3temp |= (1ul << UART_CR3_RTSE);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	e00e      	b.n	80014d8 <UART_Init+0x19c>
	}
	else if (pUARTHandle->UARTConfig.USART_HWFlowControl == UART_FLOWCONTROL_CTS_RTS)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d108      	bne.n	80014d4 <UART_Init+0x198>
	{
		CR3temp |= (1ul << UART_CR3_CTSE);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014c8:	60fb      	str	r3, [r7, #12]
		CR3temp |= (1ul << UART_CR3_RTSE);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	e001      	b.n	80014d8 <UART_Init+0x19c>
	}
	else return STATUS_ERROR;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e026      	b.n	8001526 <UART_Init+0x1ea>


	//baudrate
	if ( UART_SetBaudRate(pUARTHandle) == STATUS_ERROR)
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f000 f829 	bl	8001530 <UART_SetBaudRate>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <UART_Init+0x1ac>
	{
		return STATUS_ERROR;
 80014e4:	2300      	movs	r3, #0
 80014e6:	e01e      	b.n	8001526 <UART_Init+0x1ea>
	}

	/*
	 * Using temporary functions to guarantee atomic functions
	 */
	pUARTHandle->pUARTx->CR1 |= CR1temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68d9      	ldr	r1, [r3, #12]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	697a      	ldr	r2, [r7, #20]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	60da      	str	r2, [r3, #12]
	pUARTHandle->pUARTx->CR2 |= CR2temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6919      	ldr	r1, [r3, #16]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	430a      	orrs	r2, r1
 8001506:	611a      	str	r2, [r3, #16]
	pUARTHandle->pUARTx->CR3 |= CR3temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6959      	ldr	r1, [r3, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	430a      	orrs	r2, r1
 8001516:	615a      	str	r2, [r3, #20]


	UART_PeripheralControl(pUARTHandle->pUARTx, ENABLE);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2101      	movs	r1, #1
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f9bb 	bl	800189a <UART_PeripheralControl>

	return STATUS_OK;
 8001524:	2301      	movs	r3, #1
}
 8001526:	4618      	mov	r0, r3
 8001528:	3718      	adds	r7, #24
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
	...

08001530 <UART_SetBaudRate>:

}


Status_t UART_SetBaudRate(UART_Handle_t *pUARTHandle)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
	 * UART_BRR
	 * Fraction - 4 bits
	 * Mantissa - 12 bits
	 * USARTDivider = fclk/ ( 8 * (2-over8) * BaudRate )
	 */
	uint32_t tempreg=0;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]

	// USART_BaudRate;
	uint32_t UART_Div = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	61bb      	str	r3, [r7, #24]
	uint32_t UART_Clk = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t mantissa, fraction;

	uint32_t BaudRate = pUARTHandle->UARTConfig.USART_BaudRate;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	617b      	str	r3, [r7, #20]

	if ( (pUARTHandle->pUARTx == UART1) || (pUARTHandle->pUARTx == UART6))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a30      	ldr	r2, [pc, #192]	; (8001610 <UART_SetBaudRate+0xe0>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d004      	beq.n	800155e <UART_SetBaudRate+0x2e>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a2e      	ldr	r2, [pc, #184]	; (8001614 <UART_SetBaudRate+0xe4>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d103      	bne.n	8001566 <UART_SetBaudRate+0x36>
	{
		UART_Clk = RCC_GetPCLK1();
 800155e:	f7ff fd0d 	bl	8000f7c <RCC_GetPCLK1>
 8001562:	6278      	str	r0, [r7, #36]	; 0x24
 8001564:	e002      	b.n	800156c <UART_SetBaudRate+0x3c>
	}
	else
	{
		UART_Clk = RCC_GetPCLK2();
 8001566:	f7ff fd63 	bl	8001030 <RCC_GetPCLK2>
 800156a:	6278      	str	r0, [r7, #36]	; 0x24
	}

	uint32_t OVER8 =  ((pUARTHandle->pUARTx->CR1 & (1 << UART_CR1_OVER8)) >> UART_CR1_OVER8);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	0bdb      	lsrs	r3, r3, #15
 8001574:	f003 0301 	and.w	r3, r3, #1
 8001578:	613b      	str	r3, [r7, #16]

	//Test OVER8
	UART_Div = (100 * UART_Clk)/(8 * (2 - OVER8) * BaudRate);
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	2264      	movs	r2, #100	; 0x64
 800157e:	fb02 f103 	mul.w	r1, r2, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4613      	mov	r3, r2
 8001586:	075b      	lsls	r3, r3, #29
 8001588:	1a9b      	subs	r3, r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	3310      	adds	r3, #16
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	fb02 f303 	mul.w	r3, r2, r3
 8001594:	fbb1 f3f3 	udiv	r3, r1, r3
 8001598:	61bb      	str	r3, [r7, #24]

	//Mantissa
	mantissa = UART_Div/100;
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	4a1e      	ldr	r2, [pc, #120]	; (8001618 <UART_SetBaudRate+0xe8>)
 800159e:	fba2 2303 	umull	r2, r3, r2, r3
 80015a2:	095b      	lsrs	r3, r3, #5
 80015a4:	60fb      	str	r3, [r7, #12]
	tempreg |= mantissa << 4;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	011b      	lsls	r3, r3, #4
 80015aa:	69fa      	ldr	r2, [r7, #28]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61fb      	str	r3, [r7, #28]

	//Fraction
	fraction = (UART_Div - (mantissa* 100));
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2264      	movs	r2, #100	; 0x64
 80015b4:	fb02 f303 	mul.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	623b      	str	r3, [r7, #32]

	if(pUARTHandle->pUARTx->CR1 & ( 1 << UART_CR1_OVER8))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00a      	beq.n	80015e2 <UART_SetBaudRate+0xb2>
	{
	  //OVER8 = 1 , DIV_Fraction3 bit is not considered and must be kept cleared
		fraction = ((( fraction * 8)+ 50) / 100)& ((uint8_t)0x07); //The 50 is a round up factor because we multiply by 100 (0,5*100).
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	3332      	adds	r3, #50	; 0x32
 80015d2:	4a11      	ldr	r2, [pc, #68]	; (8001618 <UART_SetBaudRate+0xe8>)
 80015d4:	fba2 2303 	umull	r2, r3, r2, r3
 80015d8:	095b      	lsrs	r3, r3, #5
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	623b      	str	r3, [r7, #32]
 80015e0:	e009      	b.n	80015f6 <UART_SetBaudRate+0xc6>

	}else
	{
	   //over sampling by 16
		fraction = ((( fraction * 16)+ 50) / 100) & ((uint8_t)0x0F);
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	011b      	lsls	r3, r3, #4
 80015e6:	3332      	adds	r3, #50	; 0x32
 80015e8:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <UART_SetBaudRate+0xe8>)
 80015ea:	fba2 2303 	umull	r2, r3, r2, r3
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	f003 030f 	and.w	r3, r3, #15
 80015f4:	623b      	str	r3, [r7, #32]

	}
	tempreg |= fraction;
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61fb      	str	r3, [r7, #28]

	//copy the value of tempreg in to BRR register
	pUARTHandle->pUARTx->BRR = tempreg;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	69fa      	ldr	r2, [r7, #28]
 8001604:	609a      	str	r2, [r3, #8]


	return STATUS_OK;
 8001606:	2301      	movs	r3, #1
}
 8001608:	4618      	mov	r0, r3
 800160a:	3728      	adds	r7, #40	; 0x28
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40011000 	.word	0x40011000
 8001614:	40011400 	.word	0x40011400
 8001618:	51eb851f 	.word	0x51eb851f

0800161c <UART_SendData>:
 *  SEND / RECEIVE - BLOCKING
 *
 *********************************************************************/

void UART_SendData(UART_Handle_t *pUARTHandle)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	uint8_t *pTxBuffer =  pUARTHandle->pTxBuffer;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69db      	ldr	r3, [r3, #28]
 8001628:	617b      	str	r3, [r7, #20]
	uint32_t Lenght = pUARTHandle->TxLen;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	60fb      	str	r3, [r7, #12]

	for(uint32_t i = 0 ; i < Lenght; ++i)
 8001630:	2300      	movs	r3, #0
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	e02f      	b.n	8001696 <UART_SendData+0x7a>
	{
		//Wait until TXE is set
		while( UART_GetFlagStatus(pUARTHandle->pUARTx,UART_TXE_FLAG) != FLAG_SET);
 8001636:	bf00      	nop
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	4618      	mov	r0, r3
 8001640:	f000 f917 	bl	8001872 <UART_GetFlagStatus>
 8001644:	4603      	mov	r3, r0
 8001646:	2b01      	cmp	r3, #1
 8001648:	d1f6      	bne.n	8001638 <UART_SendData+0x1c>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUARTHandle->UARTConfig.USART_WordLength == UART_WORD_9BITS)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d116      	bne.n	8001680 <UART_SendData+0x64>
		{
			//if 9BIT, DR is loaded with 2bytes masking the bits other than first 9 bits
			pUARTHandle->pUARTx->DR = ( *((uint16_t*)pTxBuffer) & ((uint16_t)0x01FF) );
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	881b      	ldrh	r3, [r3, #0]
 8001656:	461a      	mov	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001660:	605a      	str	r2, [r3, #4]
			//Parity
			if(pUARTHandle->UARTConfig.USART_Parity == UART_PARITY_DISABLE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d106      	bne.n	8001678 <UART_SendData+0x5c>
			{
				//If no Parity we will transmitt 9bits of data
				pTxBuffer++;
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	3301      	adds	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
				pTxBuffer++;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	3301      	adds	r3, #1
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	e00b      	b.n	8001690 <UART_SendData+0x74>
			}
			else
			{
				//Parity bit is used in this transfer so the 9th bit is the parity
				pTxBuffer++;
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	3301      	adds	r3, #1
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	e007      	b.n	8001690 <UART_SendData+0x74>
			}
		}
		else
		{
			//8bits
			pUARTHandle->pUARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	781a      	ldrb	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
			pTxBuffer++;
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	3301      	adds	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
	for(uint32_t i = 0 ; i < Lenght; ++i)
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	3301      	adds	r3, #1
 8001694:	613b      	str	r3, [r7, #16]
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	429a      	cmp	r2, r3
 800169c:	d3cb      	bcc.n	8001636 <UART_SendData+0x1a>
		}
	}
	//wait till TC flag is set
	while( UART_GetFlagStatus(pUARTHandle->pUARTx,UART_TC_FLAG) != FLAG_SET);
 800169e:	bf00      	nop
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2140      	movs	r1, #64	; 0x40
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f8e3 	bl	8001872 <UART_GetFlagStatus>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d1f6      	bne.n	80016a0 <UART_SendData+0x84>
}
 80016b2:	bf00      	nop
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <UART_IRQInterruptConfig>:
 *  INTERRUPT
 *
 *********************************************************************/

void UART_IRQInterruptConfig(IRQn_Type IRQNumber, uint8_t EnableDisable)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	460a      	mov	r2, r1
 80016c6:	71fb      	strb	r3, [r7, #7]
 80016c8:	4613      	mov	r3, r2
 80016ca:	71bb      	strb	r3, [r7, #6]

	if (EnableDisable == ENABLE)
 80016cc:	79bb      	ldrb	r3, [r7, #6]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d145      	bne.n	800175e <UART_IRQInterruptConfig+0xa2>
	{
		if (IRQNumber < 32){
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	2b1f      	cmp	r3, #31
 80016d8:	dc0b      	bgt.n	80016f2 <UART_IRQInterruptConfig+0x36>
			//NVIC_ISER0
			*NVIC_ISER0 |= (1 << IRQNumber);
 80016da:	4b48      	ldr	r3, [pc, #288]	; (80017fc <UART_IRQInterruptConfig+0x140>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80016e2:	2101      	movs	r1, #1
 80016e4:	fa01 f202 	lsl.w	r2, r1, r2
 80016e8:	4611      	mov	r1, r2
 80016ea:	4a44      	ldr	r2, [pc, #272]	; (80017fc <UART_IRQInterruptConfig+0x140>)
 80016ec:	430b      	orrs	r3, r1
 80016ee:	6013      	str	r3, [r2, #0]
			//NVIC_ICER2
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}

}
 80016f0:	e07e      	b.n	80017f0 <UART_IRQInterruptConfig+0x134>
		else if( IRQNumber >= 32 && IRQNumber < 64){
 80016f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f6:	2b1f      	cmp	r3, #31
 80016f8:	dd16      	ble.n	8001728 <UART_IRQInterruptConfig+0x6c>
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	2b3f      	cmp	r3, #63	; 0x3f
 8001700:	dc12      	bgt.n	8001728 <UART_IRQInterruptConfig+0x6c>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8001702:	4b3f      	ldr	r3, [pc, #252]	; (8001800 <UART_IRQInterruptConfig+0x144>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	4259      	negs	r1, r3
 800170c:	f003 031f 	and.w	r3, r3, #31
 8001710:	f001 011f 	and.w	r1, r1, #31
 8001714:	bf58      	it	pl
 8001716:	424b      	negpl	r3, r1
 8001718:	b25b      	sxtb	r3, r3
 800171a:	4619      	mov	r1, r3
 800171c:	2301      	movs	r3, #1
 800171e:	408b      	lsls	r3, r1
 8001720:	4937      	ldr	r1, [pc, #220]	; (8001800 <UART_IRQInterruptConfig+0x144>)
 8001722:	4313      	orrs	r3, r2
 8001724:	600b      	str	r3, [r1, #0]
 8001726:	e063      	b.n	80017f0 <UART_IRQInterruptConfig+0x134>
		else if (IRQNumber >= 64 && IRQNumber < 96){
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b3f      	cmp	r3, #63	; 0x3f
 800172e:	dd5f      	ble.n	80017f0 <UART_IRQInterruptConfig+0x134>
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	2b5f      	cmp	r3, #95	; 0x5f
 8001736:	dc5b      	bgt.n	80017f0 <UART_IRQInterruptConfig+0x134>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8001738:	4b32      	ldr	r3, [pc, #200]	; (8001804 <UART_IRQInterruptConfig+0x148>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001740:	4259      	negs	r1, r3
 8001742:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001746:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800174a:	bf58      	it	pl
 800174c:	424b      	negpl	r3, r1
 800174e:	b25b      	sxtb	r3, r3
 8001750:	4619      	mov	r1, r3
 8001752:	2301      	movs	r3, #1
 8001754:	408b      	lsls	r3, r1
 8001756:	492b      	ldr	r1, [pc, #172]	; (8001804 <UART_IRQInterruptConfig+0x148>)
 8001758:	4313      	orrs	r3, r2
 800175a:	600b      	str	r3, [r1, #0]
}
 800175c:	e048      	b.n	80017f0 <UART_IRQInterruptConfig+0x134>
	else if (EnableDisable == DISABLE)
 800175e:	79bb      	ldrb	r3, [r7, #6]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d145      	bne.n	80017f0 <UART_IRQInterruptConfig+0x134>
		if (IRQNumber < 32){
 8001764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001768:	2b1f      	cmp	r3, #31
 800176a:	dc0b      	bgt.n	8001784 <UART_IRQInterruptConfig+0xc8>
			*NVIC_ICER0 |= (1 << IRQNumber);
 800176c:	4b26      	ldr	r3, [pc, #152]	; (8001808 <UART_IRQInterruptConfig+0x14c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001774:	2101      	movs	r1, #1
 8001776:	fa01 f202 	lsl.w	r2, r1, r2
 800177a:	4611      	mov	r1, r2
 800177c:	4a22      	ldr	r2, [pc, #136]	; (8001808 <UART_IRQInterruptConfig+0x14c>)
 800177e:	430b      	orrs	r3, r1
 8001780:	6013      	str	r3, [r2, #0]
}
 8001782:	e035      	b.n	80017f0 <UART_IRQInterruptConfig+0x134>
		else if( IRQNumber >= 32 && IRQNumber < 64){
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	2b1f      	cmp	r3, #31
 800178a:	dd16      	ble.n	80017ba <UART_IRQInterruptConfig+0xfe>
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	2b3f      	cmp	r3, #63	; 0x3f
 8001792:	dc12      	bgt.n	80017ba <UART_IRQInterruptConfig+0xfe>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <UART_IRQInterruptConfig+0x150>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	4259      	negs	r1, r3
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	f001 011f 	and.w	r1, r1, #31
 80017a6:	bf58      	it	pl
 80017a8:	424b      	negpl	r3, r1
 80017aa:	b25b      	sxtb	r3, r3
 80017ac:	4619      	mov	r1, r3
 80017ae:	2301      	movs	r3, #1
 80017b0:	408b      	lsls	r3, r1
 80017b2:	4916      	ldr	r1, [pc, #88]	; (800180c <UART_IRQInterruptConfig+0x150>)
 80017b4:	4313      	orrs	r3, r2
 80017b6:	600b      	str	r3, [r1, #0]
 80017b8:	e01a      	b.n	80017f0 <UART_IRQInterruptConfig+0x134>
		else if (IRQNumber >= 64 && IRQNumber < 96){
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	2b3f      	cmp	r3, #63	; 0x3f
 80017c0:	dd16      	ble.n	80017f0 <UART_IRQInterruptConfig+0x134>
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	2b5f      	cmp	r3, #95	; 0x5f
 80017c8:	dc12      	bgt.n	80017f0 <UART_IRQInterruptConfig+0x134>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <UART_IRQInterruptConfig+0x154>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	4259      	negs	r1, r3
 80017d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017d8:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80017dc:	bf58      	it	pl
 80017de:	424b      	negpl	r3, r1
 80017e0:	b25b      	sxtb	r3, r3
 80017e2:	4619      	mov	r1, r3
 80017e4:	2301      	movs	r3, #1
 80017e6:	408b      	lsls	r3, r1
 80017e8:	4909      	ldr	r1, [pc, #36]	; (8001810 <UART_IRQInterruptConfig+0x154>)
 80017ea:	4313      	orrs	r3, r2
 80017ec:	600b      	str	r3, [r1, #0]
}
 80017ee:	e7ff      	b.n	80017f0 <UART_IRQInterruptConfig+0x134>
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000e100 	.word	0xe000e100
 8001800:	e000e104 	.word	0xe000e104
 8001804:	e000e108 	.word	0xe000e108
 8001808:	e000e180 	.word	0xe000e180
 800180c:	e000e184 	.word	0xe000e184
 8001810:	e000e188 	.word	0xe000e188

08001814 <UART_IRQPriorityConfig>:

void UART_IRQPriorityConfig(IRQn_Type IRQNumber,uint32_t IRQPriority)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]

	uint8_t iprx = IRQNumber / 4;
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	da00      	bge.n	800182a <UART_IRQPriorityConfig+0x16>
 8001828:	3303      	adds	r3, #3
 800182a:	109b      	asrs	r3, r3, #2
 800182c:	b25b      	sxtb	r3, r3
 800182e:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	425a      	negs	r2, r3
 8001836:	f003 0303 	and.w	r3, r3, #3
 800183a:	f002 0203 	and.w	r2, r2, #3
 800183e:	bf58      	it	pl
 8001840:	4253      	negpl	r3, r2
 8001842:	b25b      	sxtb	r3, r3
 8001844:	73bb      	strb	r3, [r7, #14]

	uint8_t shift_IRQ = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 8001846:	7bbb      	ldrb	r3, [r7, #14]
 8001848:	00db      	lsls	r3, r3, #3
 800184a:	b2db      	uxtb	r3, r3
 800184c:	3304      	adds	r3, #4
 800184e:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASEADDRESS + (iprx * 4)) = (IRQPriority << shift_IRQ);
 8001850:	7b7a      	ldrb	r2, [r7, #13]
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800185a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800185e:	6839      	ldr	r1, [r7, #0]
 8001860:	fa01 f202 	lsl.w	r2, r1, r2
 8001864:	601a      	str	r2, [r3, #0]

}
 8001866:	bf00      	nop
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <UART_GetFlagStatus>:

/*
 * Peripheral Status
 */
FLAG_Status_t UART_GetFlagStatus(UART_RegDef_t *pUARTx, uint32_t FlagName)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	6039      	str	r1, [r7, #0]
	if ( pUARTx->SR & FlagName )
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	4013      	ands	r3, r2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <UART_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <UART_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <UART_PeripheralControl>:
}



void UART_PeripheralControl(UART_RegDef_t *pUARTx, uint32_t EnDis)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	6039      	str	r1, [r7, #0]

	if(EnDis == ENABLE)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d106      	bne.n	80018b8 <UART_PeripheralControl+0x1e>
	{
		pUARTx->CR1 |= (1 << 13);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	60da      	str	r2, [r3, #12]
	}else
	{
		pUARTx->CR1 &= ~(1 << 13);
	}

}
 80018b6:	e005      	b.n	80018c4 <UART_PeripheralControl+0x2a>
		pUARTx->CR1 &= ~(1 << 13);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	60da      	str	r2, [r3, #12]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <UART_IRQHandling>:
 * @Note              -

 */

void UART_IRQHandling(UART_Handle_t *pUARTHandle)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
	uint16_t *pbuffer;

	uint32_t SRreg = pUARTHandle->pUARTx->SR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	617b      	str	r3, [r7, #20]
	uint32_t CR1reg = pUARTHandle->pUARTx->CR1;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	613b      	str	r3, [r7, #16]
	uint32_t CR3reg = pUARTHandle->pUARTx->CR3;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	60fb      	str	r3, [r7, #12]

	//Check the state of TC and TCEIE
	if ( (SRreg & (1ul << UART_SR_TC)) && (CR1reg & (1ul << UART_CR1_TCIE) ) )
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d023      	beq.n	8001942 <UART_IRQHandling+0x72>
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001900:	2b00      	cmp	r3, #0
 8001902:	d01e      	beq.n	8001942 <UART_IRQHandling+0x72>
	{
		//close transmission and call application callback if TxLen is zero
		if ( pUARTHandle->TxState == USART_BUSY_TX)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800190a:	2b02      	cmp	r3, #2
 800190c:	d119      	bne.n	8001942 <UART_IRQHandling+0x72>
		{
			if(! pUARTHandle->TxLen )
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	2b00      	cmp	r3, #0
 8001914:	d115      	bne.n	8001942 <UART_IRQHandling+0x72>
			{
				pUARTHandle->pUARTx->SR &= ~( 1 << UART_SR_TC);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001924:	601a      	str	r2, [r3, #0]

				pUARTHandle->TxState = UART_READY;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				pUARTHandle->pTxBuffer = NULL;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	61da      	str	r2, [r3, #28]
				pUARTHandle->TxLen = 0;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	625a      	str	r2, [r3, #36]	; 0x24

				UART_EventCallback(pUARTHandle,UART_EVENT_TC);
 800193a:	2100      	movs	r1, #0
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f8c7 	bl	8001ad0 <UART_EventCallback>
			}
		}
	}

	//Check the state of TXE and TXEIE
	if ( (SRreg & (1ul << UART_SR_TXE)) && (CR1reg & (1ul << UART_CR1_TXEIE) ) )
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001948:	2b00      	cmp	r3, #0
 800194a:	d057      	beq.n	80019fc <UART_IRQHandling+0x12c>
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001952:	2b00      	cmp	r3, #0
 8001954:	d052      	beq.n	80019fc <UART_IRQHandling+0x12c>
	{
		if(pUARTHandle->TxState == USART_BUSY_TX)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800195c:	2b02      	cmp	r3, #2
 800195e:	d14d      	bne.n	80019fc <UART_IRQHandling+0x12c>
		{
			//Keep sending data until Txlen == 0
			if(pUARTHandle->TxLen > 0)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	2b00      	cmp	r3, #0
 8001966:	d03d      	beq.n	80019e4 <UART_IRQHandling+0x114>
			{
				//9BIT or 8BIT in a frame
				if(pUARTHandle->UARTConfig.USART_WordLength == UART_WORD_9BITS)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d129      	bne.n	80019c4 <UART_IRQHandling+0xf4>
				{
					pbuffer = (uint16_t*) pUARTHandle->pTxBuffer;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	69db      	ldr	r3, [r3, #28]
 8001974:	60bb      	str	r3, [r7, #8]
					pUARTHandle->pUARTx->DR = (*pbuffer & (uint16_t)0x01FF);
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001984:	605a      	str	r2, [r3, #4]

					//Parity
					if(pUARTHandle->UARTConfig.USART_Parity == UART_PARITY_DISABLE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10f      	bne.n	80019ae <UART_IRQHandling+0xde>
					{
						pUARTHandle->pTxBuffer++;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	61da      	str	r2, [r3, #28]
						pUARTHandle->pTxBuffer++;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	61da      	str	r2, [r3, #28]
						pUARTHandle->TxLen -= 2;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a6:	1e9a      	subs	r2, r3, #2
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	625a      	str	r2, [r3, #36]	; 0x24
 80019ac:	e01a      	b.n	80019e4 <UART_IRQHandling+0x114>
					}
					else
					{
						pUARTHandle->pTxBuffer++;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69db      	ldr	r3, [r3, #28]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	61da      	str	r2, [r3, #28]
						pUARTHandle->TxLen-=1;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	1e5a      	subs	r2, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24
 80019c2:	e00f      	b.n	80019e4 <UART_IRQHandling+0x114>
					}
				}
				else
				{
					//8bit data transfer
					pUARTHandle->pUARTx->DR = (*pUARTHandle->pTxBuffer  & (uint8_t)0xFF);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	69db      	ldr	r3, [r3, #28]
 80019c8:	781a      	ldrb	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]

					pUARTHandle->pTxBuffer++;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69db      	ldr	r3, [r3, #28]
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	61da      	str	r2, [r3, #28]
					pUARTHandle->TxLen-=1;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	1e5a      	subs	r2, r3, #1
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
			if (pUARTHandle->TxLen == 0 )
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d107      	bne.n	80019fc <UART_IRQHandling+0x12c>
			{
				//TxLen is zero - ClearFLAG
				pUARTHandle->pUARTx->CR1 &= ~( 1 << UART_CR1_TXEIE);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019fa:	60da      	str	r2, [r3, #12]
		}
	}


	//Check the state of RXE and RXEIE
	if ( (SRreg & (1ul << UART_SR_RXNE)) && (CR1reg & (1ul << UART_CR1_RXNEIE) ) )
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f003 0320 	and.w	r3, r3, #32
 8001a02:	2b00      	cmp	r3, #0
	{

	}

	//CTS - Check the state of CTS, CTSE and CTSIE
	if ( (SRreg & (1ul << UART_SR_CTS)) && (CR1reg & (1ul << UART_CR3_CTSIE) ) )
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d010      	beq.n	8001a30 <UART_IRQHandling+0x160>
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00b      	beq.n	8001a30 <UART_IRQHandling+0x160>
	{
		pUARTHandle->pUARTx->SR &=  ~( 1 << UART_SR_CTS);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a26:	601a      	str	r2, [r3, #0]
		UART_EventCallback(pUARTHandle,UART_EVENT_CTS);
 8001a28:	2103      	movs	r1, #3
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f000 f850 	bl	8001ad0 <UART_EventCallback>
	}

	//IDLE - Check the state of IDLE and IDLEIE
	if ( (SRreg & (1ul << UART_SR_TC)) && (CR1reg & (1ul << UART_CR1_TCIE) ) )
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d010      	beq.n	8001a5c <UART_IRQHandling+0x18c>
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00b      	beq.n	8001a5c <UART_IRQHandling+0x18c>
	{
		pUARTHandle->pUARTx->SR &=  ~( 1 << UART_SR_IDLE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0210 	bic.w	r2, r2, #16
 8001a52:	601a      	str	r2, [r3, #0]
		UART_EventCallback(pUARTHandle,UART_EVENT_IDLE);
 8001a54:	2104      	movs	r1, #4
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f83a 	bl	8001ad0 <UART_EventCallback>
	}

	//OVERUN - Check the state of ORE and RXNEIE
	if ( (SRreg & (1ul << UART_SR_TC)) && (CR1reg & (1ul << UART_CR1_TCIE) ) )
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d010      	beq.n	8001a88 <UART_IRQHandling+0x1b8>
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d00b      	beq.n	8001a88 <UART_IRQHandling+0x1b8>
	{
		pUARTHandle->pUARTx->SR &=  ~( 1 << UART_SR_ORE);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0208 	bic.w	r2, r2, #8
 8001a7e:	601a      	str	r2, [r3, #0]
		UART_EventCallback(pUARTHandle,UART_EVENT_ORE);
 8001a80:	2105      	movs	r1, #5
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f824 	bl	8001ad0 <UART_EventCallback>
	}

	//ERROR - Noise Flag, Overrun error and Framing Error

	if( CR3reg & ( 1 << UART_CR3_EIE) )
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d01a      	beq.n	8001ac8 <UART_IRQHandling+0x1f8>
	{
		if( SRreg & ( 1 << UART_SR_FE))
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d003      	beq.n	8001aa4 <UART_IRQHandling+0x1d4>
		{
			UART_EventCallback(pUARTHandle,UART_EVENT_FE);
 8001a9c:	2106      	movs	r1, #6
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 f816 	bl	8001ad0 <UART_EventCallback>
		}

		if( SRreg & ( 1 << UART_SR_NF) )
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f003 0304 	and.w	r3, r3, #4
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <UART_IRQHandling+0x1e6>
		{
			UART_EventCallback(pUARTHandle,UART_EVENT_NF);
 8001aae:	2108      	movs	r1, #8
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f80d 	bl	8001ad0 <UART_EventCallback>
		}

		if(SRreg & ( 1 << UART_SR_ORE) )
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d003      	beq.n	8001ac8 <UART_IRQHandling+0x1f8>
		{
			UART_EventCallback(pUARTHandle,UART_EVENT_ORE);
 8001ac0:	2105      	movs	r1, #5
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f000 f804 	bl	8001ad0 <UART_EventCallback>
		}
	}


}
 8001ac8:	bf00      	nop
 8001aca:	3718      	adds	r7, #24
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <UART_EventCallback>:
 *
 * @Note              -

 */
__weak void UART_EventCallback(UART_Handle_t *pUARTHandle, UART_Events_t Event)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	70fb      	strb	r3, [r7, #3]
	__NOP();
 8001adc:	bf00      	nop

}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <__assert_func>:

void
__attribute__((noreturn))
__assert_func (const char *file, int line, const char *func,
               const char *failedexpr)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af02      	add	r7, sp, #8
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	603b      	str	r3, [r7, #0]
#define SEMIHOSTING
#ifdef SEMIHOSTING
	printf("assertion \"%s\" failed: file \"%s\", line %d%s%s\n",
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <__assert_func+0x18>
 8001b00:	4a09      	ldr	r2, [pc, #36]	; (8001b28 <__assert_func+0x3c>)
 8001b02:	e000      	b.n	8001b06 <__assert_func+0x1a>
 8001b04:	4a09      	ldr	r2, [pc, #36]	; (8001b2c <__assert_func+0x40>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <__assert_func+0x24>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	e000      	b.n	8001b12 <__assert_func+0x26>
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <__assert_func+0x40>)
 8001b12:	9301      	str	r3, [sp, #4]
 8001b14:	9200      	str	r2, [sp, #0]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	68fa      	ldr	r2, [r7, #12]
 8001b1a:	6839      	ldr	r1, [r7, #0]
 8001b1c:	4804      	ldr	r0, [pc, #16]	; (8001b30 <__assert_func+0x44>)
 8001b1e:	f000 fdff 	bl	8002720 <iprintf>
                failedexpr, file, line, func ? ", function: " : "",
                func ? func : "");
#endif


	abort ();
 8001b22:	f000 fc49 	bl	80023b8 <abort>
 8001b26:	bf00      	nop
 8001b28:	08003664 	.word	0x08003664
 8001b2c:	08003674 	.word	0x08003674
 8001b30:	08003678 	.word	0x08003678

08001b34 <main>:

/*
 * START PROGRAM
 */
int main()
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b086      	sub	sp, #24
 8001b38:	af00      	add	r7, sp, #0


	initialise_monitor_handles();
 8001b3a:	f000 fbc3 	bl	80022c4 <initialise_monitor_handles>

	printf("Program starting\n");
 8001b3e:	4829      	ldr	r0, [pc, #164]	; (8001be4 <main+0xb0>)
 8001b40:	f000 fe62 	bl	8002808 <puts>

	SysTickInit();
 8001b44:	f7fe fd8c 	bl	8000660 <SysTickInit>
	GPIO_Conf();
 8001b48:	f000 f90a 	bl	8001d60 <GPIO_Conf>
	SPI_Conf();
 8001b4c:	f000 f900 	bl	8001d50 <SPI_Conf>
	UART_Conf(&pUART2);
 8001b50:	4825      	ldr	r0, [pc, #148]	; (8001be8 <main+0xb4>)
 8001b52:	f000 f8bd 	bl	8001cd0 <UART_Conf>


	pUART2.pTxBuffer = (uint8_t*)"Program Starting\r\n";
 8001b56:	4b24      	ldr	r3, [pc, #144]	; (8001be8 <main+0xb4>)
 8001b58:	4a24      	ldr	r2, [pc, #144]	; (8001bec <main+0xb8>)
 8001b5a:	61da      	str	r2, [r3, #28]
	pUART2.TxLen = strlen((char*)pUART2.pTxBuffer);
 8001b5c:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <main+0xb4>)
 8001b5e:	69db      	ldr	r3, [r3, #28]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fb55 	bl	8000210 <strlen>
 8001b66:	4602      	mov	r2, r0
 8001b68:	4b1f      	ldr	r3, [pc, #124]	; (8001be8 <main+0xb4>)
 8001b6a:	625a      	str	r2, [r3, #36]	; 0x24
	UART_SendData(&pUART2);
 8001b6c:	481e      	ldr	r0, [pc, #120]	; (8001be8 <main+0xb4>)
 8001b6e:	f7ff fd55 	bl	800161c <UART_SendData>

	UART_IRQInterruptConfig(USART2_IRQn, ENABLE);
 8001b72:	2101      	movs	r1, #1
 8001b74:	2026      	movs	r0, #38	; 0x26
 8001b76:	f7ff fda1 	bl	80016bc <UART_IRQInterruptConfig>
	UART_IRQPriorityConfig(USART2_IRQn,0);
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	2026      	movs	r0, #38	; 0x26
 8001b7e:	f7ff fe49 	bl	8001814 <UART_IRQPriorityConfig>

	size_t size = 64;
 8001b82:	2340      	movs	r3, #64	; 0x40
 8001b84:	613b      	str	r3, [r7, #16]
	uint8_t* buffer = (uint8_t*)malloc((int)size*sizeof(uint8_t));
 8001b86:	6938      	ldr	r0, [r7, #16]
 8001b88:	f000 fd12 	bl	80025b0 <malloc>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	60fb      	str	r3, [r7, #12]

	cbuf_handle_t cbuf = CircularUART_Init(buffer, size);
 8001b90:	6939      	ldr	r1, [r7, #16]
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f7fe fd24 	bl	80005e0 <CircularUART_Init>
 8001b98:	60b8      	str	r0, [r7, #8]

	uint32_t txdatalen = strlen(TxData);
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <main+0xbc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fb36 	bl	8000210 <strlen>
 8001ba4:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < txdatalen; ++i)
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
 8001baa:	e00b      	b.n	8001bc4 <main+0x90>
	{
		circular_buffer_push(cbuf, TxData[i]);
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <main+0xbc>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	68b8      	ldr	r0, [r7, #8]
 8001bba:	f7fe fbe5 	bl	8000388 <circular_buffer_push>
	for (int i = 0; i < txdatalen; ++i)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d8ef      	bhi.n	8001bac <main+0x78>
	}

	 CircularUART_Send(cbuf, &pUART2);
 8001bcc:	4906      	ldr	r1, [pc, #24]	; (8001be8 <main+0xb4>)
 8001bce:	68b8      	ldr	r0, [r7, #8]
 8001bd0:	f7fe fd15 	bl	80005fe <CircularUART_Send>


	while(1)
	{

		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_5);
 8001bd4:	2105      	movs	r1, #5
 8001bd6:	4807      	ldr	r0, [pc, #28]	; (8001bf4 <main+0xc0>)
 8001bd8:	f7ff f8e5 	bl	8000da6 <GPIO_ToggleOutputPin>
		delay_ms(100);
 8001bdc:	2064      	movs	r0, #100	; 0x64
 8001bde:	f7fe fd91 	bl	8000704 <delay_ms>
		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_5);
 8001be2:	e7f7      	b.n	8001bd4 <main+0xa0>
 8001be4:	080036b8 	.word	0x080036b8
 8001be8:	20000160 	.word	0x20000160
 8001bec:	080036cc 	.word	0x080036cc
 8001bf0:	20000014 	.word	0x20000014
 8001bf4:	40020000 	.word	0x40020000

08001bf8 <USART2_IRQHandler>:
	return 0;
}


void USART2_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
	UART_IRQHandling(&pUART2);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <USART2_IRQHandler+0x10>)
 8001bfe:	f7ff fe67 	bl	80018d0 <UART_IRQHandling>
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000160 	.word	0x20000160

08001c0c <EXTI15_10_IRQHandler>:

/*
 * EXTI Handler
 */
void EXTI15_10_IRQHandler(void){
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
	uint8_t CMDCode = COMMAND_LED_CTRL;
 8001c12:	2350      	movs	r3, #80	; 0x50
 8001c14:	71bb      	strb	r3, [r7, #6]
	uint8_t Ack_byte = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	717b      	strb	r3, [r7, #5]
	uint8_t Dummy_Read = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	713b      	strb	r3, [r7, #4]
	uint8_t Dummy_Write = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	71fb      	strb	r3, [r7, #7]
	uint8_t args[2] = {0};
 8001c22:	2300      	movs	r3, #0
 8001c24:	803b      	strh	r3, [r7, #0]

	GPIO_Clear_Interrupt(GPIO_PIN_13);
 8001c26:	200d      	movs	r0, #13
 8001c28:	f7ff f988 	bl	8000f3c <GPIO_Clear_Interrupt>

	SPI_PeripheralControl(ARDUINO_SPI, ENABLE);
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	4825      	ldr	r0, [pc, #148]	; (8001cc4 <EXTI15_10_IRQHandler+0xb8>)
 8001c30:	f7ff fa60 	bl	80010f4 <SPI_PeripheralControl>

	//Send the command
	SPI_SendData(ARDUINO_SPI, &CMDCode, 1);
 8001c34:	1dbb      	adds	r3, r7, #6
 8001c36:	2201      	movs	r2, #1
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4822      	ldr	r0, [pc, #136]	; (8001cc4 <EXTI15_10_IRQHandler+0xb8>)
 8001c3c:	f7ff fa8a 	bl	8001154 <SPI_SendData>
	printf("SPI SEND: %d\n",CMDCode);
 8001c40:	79bb      	ldrb	r3, [r7, #6]
 8001c42:	4619      	mov	r1, r3
 8001c44:	4820      	ldr	r0, [pc, #128]	; (8001cc8 <EXTI15_10_IRQHandler+0xbc>)
 8001c46:	f000 fd6b 	bl	8002720 <iprintf>
	//Dummy read to clean
	SPI_ReceiveData(ARDUINO_SPI, &Dummy_Read, 1);
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	4619      	mov	r1, r3
 8001c50:	481c      	ldr	r0, [pc, #112]	; (8001cc4 <EXTI15_10_IRQHandler+0xb8>)
 8001c52:	f7ff faa2 	bl	800119a <SPI_ReceiveData>
	printf("SPI Receive: %d\n",Dummy_Read);
 8001c56:	793b      	ldrb	r3, [r7, #4]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	481c      	ldr	r0, [pc, #112]	; (8001ccc <EXTI15_10_IRQHandler+0xc0>)
 8001c5c:	f000 fd60 	bl	8002720 <iprintf>
	//Send the Dummy byte to shift
	SPI_SendData(ARDUINO_SPI, Dummy_Write, 1);
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	2201      	movs	r2, #1
 8001c64:	4619      	mov	r1, r3
 8001c66:	4817      	ldr	r0, [pc, #92]	; (8001cc4 <EXTI15_10_IRQHandler+0xb8>)
 8001c68:	f7ff fa74 	bl	8001154 <SPI_SendData>
	printf("SPI SEND: %d\n",Dummy_Write);
 8001c6c:	79fb      	ldrb	r3, [r7, #7]
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4815      	ldr	r0, [pc, #84]	; (8001cc8 <EXTI15_10_IRQHandler+0xbc>)
 8001c72:	f000 fd55 	bl	8002720 <iprintf>
	//get the ACK
	SPI_ReceiveData(ARDUINO_SPI, &Ack_byte, 1);
 8001c76:	1d7b      	adds	r3, r7, #5
 8001c78:	2201      	movs	r2, #1
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4811      	ldr	r0, [pc, #68]	; (8001cc4 <EXTI15_10_IRQHandler+0xb8>)
 8001c7e:	f7ff fa8c 	bl	800119a <SPI_ReceiveData>
	if ( Ack_byte == ACK)
 8001c82:	797b      	ldrb	r3, [r7, #5]
 8001c84:	2bf5      	cmp	r3, #245	; 0xf5
 8001c86:	d10d      	bne.n	8001ca4 <EXTI15_10_IRQHandler+0x98>
	{
		args[0] = 9;
 8001c88:	2309      	movs	r3, #9
 8001c8a:	703b      	strb	r3, [r7, #0]
		args[1] = 1;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	707b      	strb	r3, [r7, #1]
		SPI_SendData(ARDUINO_SPI, &args, (uint32_t)strlen(args));
 8001c90:	463b      	mov	r3, r7
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fabc 	bl	8000210 <strlen>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	463b      	mov	r3, r7
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4809      	ldr	r0, [pc, #36]	; (8001cc4 <EXTI15_10_IRQHandler+0xb8>)
 8001ca0:	f7ff fa58 	bl	8001154 <SPI_SendData>
	}


	while(SPI_GetFlagStatus(ARDUINO_SPI, SPI_BSY_FLAG) );
 8001ca4:	bf00      	nop
 8001ca6:	2180      	movs	r1, #128	; 0x80
 8001ca8:	4806      	ldr	r0, [pc, #24]	; (8001cc4 <EXTI15_10_IRQHandler+0xb8>)
 8001caa:	f7ff fa3f 	bl	800112c <SPI_GetFlagStatus>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f8      	bne.n	8001ca6 <EXTI15_10_IRQHandler+0x9a>
	SPI_PeripheralControl(ARDUINO_SPI, DISABLE);
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <EXTI15_10_IRQHandler+0xb8>)
 8001cb8:	f7ff fa1c 	bl	80010f4 <SPI_PeripheralControl>

}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40013000 	.word	0x40013000
 8001cc8:	080036e0 	.word	0x080036e0
 8001ccc:	080036f0 	.word	0x080036f0

08001cd0 <UART_Conf>:

void UART_Conf(UART_Handle_t* _UART2Handler)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
	 * Usart2
	 * TX - PA2
	 * RX - PA3
	 */
	GPIO_Handle_t _UART_Pins;
	_UART_Pins.pGPIOX = USART2_PORT;
 8001cd8:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <UART_Conf+0x78>)
 8001cda:	60fb      	str	r3, [r7, #12]
	_UART_Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8001cdc:	2302      	movs	r3, #2
 8001cde:	747b      	strb	r3, [r7, #17]
	_UART_Pins.GPIO_PinConfig.GPIO_PinAltFunMode = GPIO_AF7;
 8001ce0:	2307      	movs	r3, #7
 8001ce2:	757b      	strb	r3, [r7, #21]
	_UART_Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	753b      	strb	r3, [r7, #20]
	_UART_Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	74fb      	strb	r3, [r7, #19]
	_UART_Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001cec:	2302      	movs	r3, #2
 8001cee:	74bb      	strb	r3, [r7, #18]

	_UART_Pins.GPIO_PinConfig.GPIO_PinNumber = USART2_TX_PIN;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&_UART_Pins);
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fde7 	bl	80008cc <GPIO_Init>

	_UART_Pins.GPIO_PinConfig.GPIO_PinNumber = USART2_RX_PIN;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	743b      	strb	r3, [r7, #16]
	GPIO_Init(&_UART_Pins);
 8001d02:	f107 030c 	add.w	r3, r7, #12
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7fe fde0 	bl	80008cc <GPIO_Init>


	_UART2Handler->pUARTx = UART2;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a0f      	ldr	r2, [pc, #60]	; (8001d4c <UART_Conf+0x7c>)
 8001d10:	601a      	str	r2, [r3, #0]
	_UART2Handler->UARTConfig.USART_BaudRate = UART_BAUDRATE_9600;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d18:	609a      	str	r2, [r3, #8]
	_UART2Handler->UARTConfig.USART_HWFlowControl = UART_FLOWCONTROL_NONE;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	619a      	str	r2, [r3, #24]
	_UART2Handler->UARTConfig.USART_Mode = UART_MODE_TXRX;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	605a      	str	r2, [r3, #4]
	_UART2Handler->UARTConfig.USART_Parity = UART_PARITY_DISABLE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	615a      	str	r2, [r3, #20]
	_UART2Handler->UARTConfig.USART_StopBits = UART_STOPBITS_1;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	60da      	str	r2, [r3, #12]
	_UART2Handler->UARTConfig.USART_WordLength = UART_FLOWCONTROL_NONE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	611a      	str	r2, [r3, #16]
	UART_Init(_UART2Handler);
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff faff 	bl	800133c <UART_Init>





}
 8001d3e:	bf00      	nop
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40020000 	.word	0x40020000
 8001d4c:	40004400 	.word	0x40004400

08001d50 <SPI_Conf>:

void SPI_Conf(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
	 */
	SPI_Config_SSOE(SPI1,ENABLE);

#endif

}
 8001d54:	bf00      	nop
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <GPIO_Conf>:



void GPIO_Conf(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
	/*
	 * Configure LED
	 * **If SPI is ON PA5 isn't available
	 */

	_GPIOA.pGPIOX = GPIOA;
 8001d66:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <GPIO_Conf+0x60>)
 8001d68:	60fb      	str	r3, [r7, #12]
	_GPIOA.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8001d6a:	2305      	movs	r3, #5
 8001d6c:	743b      	strb	r3, [r7, #16]
	_GPIOA.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	747b      	strb	r3, [r7, #17]
	_GPIOA.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8001d72:	2300      	movs	r3, #0
 8001d74:	74bb      	strb	r3, [r7, #18]
	_GPIOA.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001d76:	2300      	movs	r3, #0
 8001d78:	753b      	strb	r3, [r7, #20]
	_GPIOA.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	74fb      	strb	r3, [r7, #19]
	//GPIO_PeriClockControl(GPIOA, ENABLE);
	GPIO_Init(&_GPIOA);
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fda2 	bl	80008cc <GPIO_Init>
#endif
	/*
	 * Configure Button
	 */
	_GPIOC.pGPIOX = GPIOC;
 8001d88:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <GPIO_Conf+0x64>)
 8001d8a:	603b      	str	r3, [r7, #0]
	_GPIOC.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 8001d8c:	230d      	movs	r3, #13
 8001d8e:	713b      	strb	r3, [r7, #4]
	_GPIOC.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8001d90:	2305      	movs	r3, #5
 8001d92:	717b      	strb	r3, [r7, #5]
	_GPIOC.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	71bb      	strb	r3, [r7, #6]
	_GPIOC.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	723b      	strb	r3, [r7, #8]
	_GPIOC.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	71fb      	strb	r3, [r7, #7]
	//GPIO_PeriClockControl(GPIOC, ENABLE);
	GPIO_Init(&_GPIOC);
 8001da0:	463b      	mov	r3, r7
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fd92 	bl	80008cc <GPIO_Init>

	//Button interrupt
	GPIO_IRQInterruptConfig(EXTI15_10_IRQn,ENABLE);
 8001da8:	2101      	movs	r1, #1
 8001daa:	2028      	movs	r0, #40	; 0x28
 8001dac:	f7ff f81a 	bl	8000de4 <GPIO_IRQInterruptConfig>
	GPIO_IRQPriorityConfig(EXTI15_10_IRQn,1);
 8001db0:	2101      	movs	r1, #1
 8001db2:	2028      	movs	r0, #40	; 0x28
 8001db4:	f7ff f89e 	bl	8000ef4 <GPIO_IRQPriorityConfig>




}
 8001db8:	bf00      	nop
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40020000 	.word	0x40020000
 8001dc4:	40020800 	.word	0x40020800

08001dc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001dc8:	480d      	ldr	r0, [pc, #52]	; (8001e00 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dcc:	480d      	ldr	r0, [pc, #52]	; (8001e04 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dce:	490e      	ldr	r1, [pc, #56]	; (8001e08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dd0:	4a0e      	ldr	r2, [pc, #56]	; (8001e0c <LoopForever+0xe>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd4:	e002      	b.n	8001ddc <LoopCopyDataInit>

08001dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dda:	3304      	adds	r3, #4

08001ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de0:	d3f9      	bcc.n	8001dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001de2:	4a0b      	ldr	r2, [pc, #44]	; (8001e10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001de4:	4c0b      	ldr	r4, [pc, #44]	; (8001e14 <LoopForever+0x16>)
  movs r3, #0
 8001de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de8:	e001      	b.n	8001dee <LoopFillZerobss>

08001dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dec:	3204      	adds	r2, #4

08001dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df0:	d3fb      	bcc.n	8001dea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001df2:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001df6:	f000 fbb7 	bl	8002568 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dfa:	f7ff fe9b 	bl	8001b34 <main>

08001dfe <LoopForever>:

LoopForever:
    b LoopForever
 8001dfe:	e7fe      	b.n	8001dfe <LoopForever>
  ldr   r0, =_estack
 8001e00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e08:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001e0c:	080037bc 	.word	0x080037bc
  ldr r2, =_sbss
 8001e10:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001e14:	200001f8 	.word	0x200001f8

08001e18 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e18:	e7fe      	b.n	8001e18 <ADC_IRQHandler>
	...

08001e1c <findslot>:
 8001e1c:	4b0a      	ldr	r3, [pc, #40]	; (8001e48 <findslot+0x2c>)
 8001e1e:	b510      	push	{r4, lr}
 8001e20:	4604      	mov	r4, r0
 8001e22:	6818      	ldr	r0, [r3, #0]
 8001e24:	b118      	cbz	r0, 8001e2e <findslot+0x12>
 8001e26:	6983      	ldr	r3, [r0, #24]
 8001e28:	b90b      	cbnz	r3, 8001e2e <findslot+0x12>
 8001e2a:	f000 fb13 	bl	8002454 <__sinit>
 8001e2e:	2c13      	cmp	r4, #19
 8001e30:	d807      	bhi.n	8001e42 <findslot+0x26>
 8001e32:	4806      	ldr	r0, [pc, #24]	; (8001e4c <findslot+0x30>)
 8001e34:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	d002      	beq.n	8001e42 <findslot+0x26>
 8001e3c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001e40:	bd10      	pop	{r4, pc}
 8001e42:	2000      	movs	r0, #0
 8001e44:	e7fc      	b.n	8001e40 <findslot+0x24>
 8001e46:	bf00      	nop
 8001e48:	20000024 	.word	0x20000024
 8001e4c:	200000b4 	.word	0x200000b4

08001e50 <checkerror>:
 8001e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e52:	1c43      	adds	r3, r0, #1
 8001e54:	4605      	mov	r5, r0
 8001e56:	d109      	bne.n	8001e6c <checkerror+0x1c>
 8001e58:	f000 fab6 	bl	80023c8 <__errno>
 8001e5c:	2413      	movs	r4, #19
 8001e5e:	4606      	mov	r6, r0
 8001e60:	2700      	movs	r7, #0
 8001e62:	4620      	mov	r0, r4
 8001e64:	4639      	mov	r1, r7
 8001e66:	beab      	bkpt	0x00ab
 8001e68:	4604      	mov	r4, r0
 8001e6a:	6034      	str	r4, [r6, #0]
 8001e6c:	4628      	mov	r0, r5
 8001e6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e70 <error>:
 8001e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e72:	4605      	mov	r5, r0
 8001e74:	f000 faa8 	bl	80023c8 <__errno>
 8001e78:	2413      	movs	r4, #19
 8001e7a:	4606      	mov	r6, r0
 8001e7c:	2700      	movs	r7, #0
 8001e7e:	4620      	mov	r0, r4
 8001e80:	4639      	mov	r1, r7
 8001e82:	beab      	bkpt	0x00ab
 8001e84:	4604      	mov	r4, r0
 8001e86:	6034      	str	r4, [r6, #0]
 8001e88:	4628      	mov	r0, r5
 8001e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001e8c <_swiread>:
 8001e8c:	b530      	push	{r4, r5, lr}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001e94:	9203      	str	r2, [sp, #12]
 8001e96:	2406      	movs	r4, #6
 8001e98:	ad01      	add	r5, sp, #4
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	4629      	mov	r1, r5
 8001e9e:	beab      	bkpt	0x00ab
 8001ea0:	4604      	mov	r4, r0
 8001ea2:	4620      	mov	r0, r4
 8001ea4:	f7ff ffd4 	bl	8001e50 <checkerror>
 8001ea8:	b005      	add	sp, #20
 8001eaa:	bd30      	pop	{r4, r5, pc}

08001eac <_read>:
 8001eac:	b570      	push	{r4, r5, r6, lr}
 8001eae:	460e      	mov	r6, r1
 8001eb0:	4615      	mov	r5, r2
 8001eb2:	f7ff ffb3 	bl	8001e1c <findslot>
 8001eb6:	4604      	mov	r4, r0
 8001eb8:	b930      	cbnz	r0, 8001ec8 <_read+0x1c>
 8001eba:	f000 fa85 	bl	80023c8 <__errno>
 8001ebe:	2309      	movs	r3, #9
 8001ec0:	6003      	str	r3, [r0, #0]
 8001ec2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ec6:	bd70      	pop	{r4, r5, r6, pc}
 8001ec8:	462a      	mov	r2, r5
 8001eca:	4631      	mov	r1, r6
 8001ecc:	6800      	ldr	r0, [r0, #0]
 8001ece:	f7ff ffdd 	bl	8001e8c <_swiread>
 8001ed2:	1c43      	adds	r3, r0, #1
 8001ed4:	bf1f      	itttt	ne
 8001ed6:	6863      	ldrne	r3, [r4, #4]
 8001ed8:	1a28      	subne	r0, r5, r0
 8001eda:	181b      	addne	r3, r3, r0
 8001edc:	6063      	strne	r3, [r4, #4]
 8001ede:	e7f2      	b.n	8001ec6 <_read+0x1a>

08001ee0 <_swilseek>:
 8001ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ee2:	460c      	mov	r4, r1
 8001ee4:	4616      	mov	r6, r2
 8001ee6:	f7ff ff99 	bl	8001e1c <findslot>
 8001eea:	4605      	mov	r5, r0
 8001eec:	b940      	cbnz	r0, 8001f00 <_swilseek+0x20>
 8001eee:	f000 fa6b 	bl	80023c8 <__errno>
 8001ef2:	2309      	movs	r3, #9
 8001ef4:	6003      	str	r3, [r0, #0]
 8001ef6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001efa:	4620      	mov	r0, r4
 8001efc:	b003      	add	sp, #12
 8001efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f00:	2e02      	cmp	r6, #2
 8001f02:	d903      	bls.n	8001f0c <_swilseek+0x2c>
 8001f04:	f000 fa60 	bl	80023c8 <__errno>
 8001f08:	2316      	movs	r3, #22
 8001f0a:	e7f3      	b.n	8001ef4 <_swilseek+0x14>
 8001f0c:	2e01      	cmp	r6, #1
 8001f0e:	d112      	bne.n	8001f36 <_swilseek+0x56>
 8001f10:	6843      	ldr	r3, [r0, #4]
 8001f12:	18e4      	adds	r4, r4, r3
 8001f14:	d4f6      	bmi.n	8001f04 <_swilseek+0x24>
 8001f16:	682b      	ldr	r3, [r5, #0]
 8001f18:	260a      	movs	r6, #10
 8001f1a:	e9cd 3400 	strd	r3, r4, [sp]
 8001f1e:	466f      	mov	r7, sp
 8001f20:	4630      	mov	r0, r6
 8001f22:	4639      	mov	r1, r7
 8001f24:	beab      	bkpt	0x00ab
 8001f26:	4606      	mov	r6, r0
 8001f28:	4630      	mov	r0, r6
 8001f2a:	f7ff ff91 	bl	8001e50 <checkerror>
 8001f2e:	2800      	cmp	r0, #0
 8001f30:	dbe1      	blt.n	8001ef6 <_swilseek+0x16>
 8001f32:	606c      	str	r4, [r5, #4]
 8001f34:	e7e1      	b.n	8001efa <_swilseek+0x1a>
 8001f36:	2e02      	cmp	r6, #2
 8001f38:	d1ed      	bne.n	8001f16 <_swilseek+0x36>
 8001f3a:	af02      	add	r7, sp, #8
 8001f3c:	6803      	ldr	r3, [r0, #0]
 8001f3e:	f847 3d08 	str.w	r3, [r7, #-8]!
 8001f42:	260c      	movs	r6, #12
 8001f44:	4630      	mov	r0, r6
 8001f46:	4639      	mov	r1, r7
 8001f48:	beab      	bkpt	0x00ab
 8001f4a:	4606      	mov	r6, r0
 8001f4c:	4630      	mov	r0, r6
 8001f4e:	f7ff ff7f 	bl	8001e50 <checkerror>
 8001f52:	1c43      	adds	r3, r0, #1
 8001f54:	d0cf      	beq.n	8001ef6 <_swilseek+0x16>
 8001f56:	4404      	add	r4, r0
 8001f58:	e7dd      	b.n	8001f16 <_swilseek+0x36>

08001f5a <_lseek>:
 8001f5a:	f7ff bfc1 	b.w	8001ee0 <_swilseek>

08001f5e <_swiwrite>:
 8001f5e:	b530      	push	{r4, r5, lr}
 8001f60:	b085      	sub	sp, #20
 8001f62:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001f66:	9203      	str	r2, [sp, #12]
 8001f68:	2405      	movs	r4, #5
 8001f6a:	ad01      	add	r5, sp, #4
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	4629      	mov	r1, r5
 8001f70:	beab      	bkpt	0x00ab
 8001f72:	4604      	mov	r4, r0
 8001f74:	4620      	mov	r0, r4
 8001f76:	f7ff ff6b 	bl	8001e50 <checkerror>
 8001f7a:	b005      	add	sp, #20
 8001f7c:	bd30      	pop	{r4, r5, pc}

08001f7e <_write>:
 8001f7e:	b570      	push	{r4, r5, r6, lr}
 8001f80:	460e      	mov	r6, r1
 8001f82:	4615      	mov	r5, r2
 8001f84:	f7ff ff4a 	bl	8001e1c <findslot>
 8001f88:	4604      	mov	r4, r0
 8001f8a:	b930      	cbnz	r0, 8001f9a <_write+0x1c>
 8001f8c:	f000 fa1c 	bl	80023c8 <__errno>
 8001f90:	2309      	movs	r3, #9
 8001f92:	6003      	str	r3, [r0, #0]
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f98:	bd70      	pop	{r4, r5, r6, pc}
 8001f9a:	462a      	mov	r2, r5
 8001f9c:	4631      	mov	r1, r6
 8001f9e:	6800      	ldr	r0, [r0, #0]
 8001fa0:	f7ff ffdd 	bl	8001f5e <_swiwrite>
 8001fa4:	1e02      	subs	r2, r0, #0
 8001fa6:	dbf5      	blt.n	8001f94 <_write+0x16>
 8001fa8:	6863      	ldr	r3, [r4, #4]
 8001faa:	1aa8      	subs	r0, r5, r2
 8001fac:	4403      	add	r3, r0
 8001fae:	42aa      	cmp	r2, r5
 8001fb0:	6063      	str	r3, [r4, #4]
 8001fb2:	d1f1      	bne.n	8001f98 <_write+0x1a>
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001fba:	f7ff bf59 	b.w	8001e70 <error>

08001fbe <_swiclose>:
 8001fbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001fc0:	ad02      	add	r5, sp, #8
 8001fc2:	2402      	movs	r4, #2
 8001fc4:	f845 0d04 	str.w	r0, [r5, #-4]!
 8001fc8:	4620      	mov	r0, r4
 8001fca:	4629      	mov	r1, r5
 8001fcc:	beab      	bkpt	0x00ab
 8001fce:	4604      	mov	r4, r0
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	f7ff ff3d 	bl	8001e50 <checkerror>
 8001fd6:	b003      	add	sp, #12
 8001fd8:	bd30      	pop	{r4, r5, pc}
	...

08001fdc <_close>:
 8001fdc:	b538      	push	{r3, r4, r5, lr}
 8001fde:	4605      	mov	r5, r0
 8001fe0:	f7ff ff1c 	bl	8001e1c <findslot>
 8001fe4:	4604      	mov	r4, r0
 8001fe6:	b930      	cbnz	r0, 8001ff6 <_close+0x1a>
 8001fe8:	f000 f9ee 	bl	80023c8 <__errno>
 8001fec:	2309      	movs	r3, #9
 8001fee:	6003      	str	r3, [r0, #0]
 8001ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ff4:	bd38      	pop	{r3, r4, r5, pc}
 8001ff6:	3d01      	subs	r5, #1
 8001ff8:	2d01      	cmp	r5, #1
 8001ffa:	d809      	bhi.n	8002010 <_close+0x34>
 8001ffc:	4b09      	ldr	r3, [pc, #36]	; (8002024 <_close+0x48>)
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	691b      	ldr	r3, [r3, #16]
 8002002:	429a      	cmp	r2, r3
 8002004:	d104      	bne.n	8002010 <_close+0x34>
 8002006:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800200a:	6003      	str	r3, [r0, #0]
 800200c:	2000      	movs	r0, #0
 800200e:	e7f1      	b.n	8001ff4 <_close+0x18>
 8002010:	6820      	ldr	r0, [r4, #0]
 8002012:	f7ff ffd4 	bl	8001fbe <_swiclose>
 8002016:	2800      	cmp	r0, #0
 8002018:	d1ec      	bne.n	8001ff4 <_close+0x18>
 800201a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800201e:	6023      	str	r3, [r4, #0]
 8002020:	e7e8      	b.n	8001ff4 <_close+0x18>
 8002022:	bf00      	nop
 8002024:	200000b4 	.word	0x200000b4

08002028 <_getpid>:
 8002028:	2001      	movs	r0, #1
 800202a:	4770      	bx	lr

0800202c <_sbrk>:
 800202c:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <_sbrk+0x38>)
 800202e:	6819      	ldr	r1, [r3, #0]
 8002030:	b510      	push	{r4, lr}
 8002032:	4602      	mov	r2, r0
 8002034:	b909      	cbnz	r1, 800203a <_sbrk+0xe>
 8002036:	490c      	ldr	r1, [pc, #48]	; (8002068 <_sbrk+0x3c>)
 8002038:	6019      	str	r1, [r3, #0]
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	4669      	mov	r1, sp
 800203e:	4402      	add	r2, r0
 8002040:	428a      	cmp	r2, r1
 8002042:	d806      	bhi.n	8002052 <_sbrk+0x26>
 8002044:	4909      	ldr	r1, [pc, #36]	; (800206c <_sbrk+0x40>)
 8002046:	4c0a      	ldr	r4, [pc, #40]	; (8002070 <_sbrk+0x44>)
 8002048:	6809      	ldr	r1, [r1, #0]
 800204a:	42a1      	cmp	r1, r4
 800204c:	d008      	beq.n	8002060 <_sbrk+0x34>
 800204e:	428a      	cmp	r2, r1
 8002050:	d906      	bls.n	8002060 <_sbrk+0x34>
 8002052:	f000 f9b9 	bl	80023c8 <__errno>
 8002056:	230c      	movs	r3, #12
 8002058:	6003      	str	r3, [r0, #0]
 800205a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800205e:	bd10      	pop	{r4, pc}
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	e7fc      	b.n	800205e <_sbrk+0x32>
 8002064:	200000a4 	.word	0x200000a4
 8002068:	200001f8 	.word	0x200001f8
 800206c:	20000018 	.word	0x20000018
 8002070:	cafedead 	.word	0xcafedead

08002074 <_swistat>:
 8002074:	b570      	push	{r4, r5, r6, lr}
 8002076:	460c      	mov	r4, r1
 8002078:	f7ff fed0 	bl	8001e1c <findslot>
 800207c:	4606      	mov	r6, r0
 800207e:	b930      	cbnz	r0, 800208e <_swistat+0x1a>
 8002080:	f000 f9a2 	bl	80023c8 <__errno>
 8002084:	2309      	movs	r3, #9
 8002086:	6003      	str	r3, [r0, #0]
 8002088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800208c:	bd70      	pop	{r4, r5, r6, pc}
 800208e:	6863      	ldr	r3, [r4, #4]
 8002090:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002094:	6063      	str	r3, [r4, #4]
 8002096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800209a:	6463      	str	r3, [r4, #68]	; 0x44
 800209c:	250c      	movs	r5, #12
 800209e:	4628      	mov	r0, r5
 80020a0:	4631      	mov	r1, r6
 80020a2:	beab      	bkpt	0x00ab
 80020a4:	4605      	mov	r5, r0
 80020a6:	4628      	mov	r0, r5
 80020a8:	f7ff fed2 	bl	8001e50 <checkerror>
 80020ac:	1c43      	adds	r3, r0, #1
 80020ae:	bf1c      	itt	ne
 80020b0:	6120      	strne	r0, [r4, #16]
 80020b2:	2000      	movne	r0, #0
 80020b4:	e7ea      	b.n	800208c <_swistat+0x18>

080020b6 <_fstat>:
 80020b6:	460b      	mov	r3, r1
 80020b8:	b510      	push	{r4, lr}
 80020ba:	2100      	movs	r1, #0
 80020bc:	4604      	mov	r4, r0
 80020be:	2258      	movs	r2, #88	; 0x58
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 fa7d 	bl	80025c0 <memset>
 80020c6:	4601      	mov	r1, r0
 80020c8:	4620      	mov	r0, r4
 80020ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80020ce:	f7ff bfd1 	b.w	8002074 <_swistat>

080020d2 <_stat>:
 80020d2:	b538      	push	{r3, r4, r5, lr}
 80020d4:	460d      	mov	r5, r1
 80020d6:	4604      	mov	r4, r0
 80020d8:	2258      	movs	r2, #88	; 0x58
 80020da:	2100      	movs	r1, #0
 80020dc:	4628      	mov	r0, r5
 80020de:	f000 fa6f 	bl	80025c0 <memset>
 80020e2:	4620      	mov	r0, r4
 80020e4:	2100      	movs	r1, #0
 80020e6:	f000 f811 	bl	800210c <_swiopen>
 80020ea:	1c43      	adds	r3, r0, #1
 80020ec:	4604      	mov	r4, r0
 80020ee:	d00b      	beq.n	8002108 <_stat+0x36>
 80020f0:	686b      	ldr	r3, [r5, #4]
 80020f2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80020f6:	606b      	str	r3, [r5, #4]
 80020f8:	4629      	mov	r1, r5
 80020fa:	f7ff ffbb 	bl	8002074 <_swistat>
 80020fe:	4605      	mov	r5, r0
 8002100:	4620      	mov	r0, r4
 8002102:	f7ff ff6b 	bl	8001fdc <_close>
 8002106:	462c      	mov	r4, r5
 8002108:	4620      	mov	r0, r4
 800210a:	bd38      	pop	{r3, r4, r5, pc}

0800210c <_swiopen>:
 800210c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002110:	4b2b      	ldr	r3, [pc, #172]	; (80021c0 <_swiopen+0xb4>)
 8002112:	b096      	sub	sp, #88	; 0x58
 8002114:	4682      	mov	sl, r0
 8002116:	460e      	mov	r6, r1
 8002118:	2500      	movs	r5, #0
 800211a:	4698      	mov	r8, r3
 800211c:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8002120:	1c61      	adds	r1, r4, #1
 8002122:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 8002126:	d036      	beq.n	8002196 <_swiopen+0x8a>
 8002128:	3501      	adds	r5, #1
 800212a:	2d14      	cmp	r5, #20
 800212c:	d1f6      	bne.n	800211c <_swiopen+0x10>
 800212e:	f000 f94b 	bl	80023c8 <__errno>
 8002132:	2318      	movs	r3, #24
 8002134:	6003      	str	r3, [r0, #0]
 8002136:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800213a:	e03c      	b.n	80021b6 <_swiopen+0xaa>
 800213c:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002140:	f240 6301 	movw	r3, #1537	; 0x601
 8002144:	07b2      	lsls	r2, r6, #30
 8002146:	bf48      	it	mi
 8002148:	f044 0402 	orrmi.w	r4, r4, #2
 800214c:	421e      	tst	r6, r3
 800214e:	bf18      	it	ne
 8002150:	f044 0404 	orrne.w	r4, r4, #4
 8002154:	0733      	lsls	r3, r6, #28
 8002156:	bf48      	it	mi
 8002158:	f024 0404 	bicmi.w	r4, r4, #4
 800215c:	4650      	mov	r0, sl
 800215e:	bf48      	it	mi
 8002160:	f044 0408 	orrmi.w	r4, r4, #8
 8002164:	f8cd a000 	str.w	sl, [sp]
 8002168:	f7fe f852 	bl	8000210 <strlen>
 800216c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002170:	2401      	movs	r4, #1
 8002172:	4620      	mov	r0, r4
 8002174:	4649      	mov	r1, r9
 8002176:	beab      	bkpt	0x00ab
 8002178:	4604      	mov	r4, r0
 800217a:	2c00      	cmp	r4, #0
 800217c:	db06      	blt.n	800218c <_swiopen+0x80>
 800217e:	4447      	add	r7, r8
 8002180:	2300      	movs	r3, #0
 8002182:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	462c      	mov	r4, r5
 800218a:	e014      	b.n	80021b6 <_swiopen+0xaa>
 800218c:	4620      	mov	r0, r4
 800218e:	f7ff fe6f 	bl	8001e70 <error>
 8002192:	4604      	mov	r4, r0
 8002194:	e00f      	b.n	80021b6 <_swiopen+0xaa>
 8002196:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800219a:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800219e:	46e9      	mov	r9, sp
 80021a0:	d1cc      	bne.n	800213c <_swiopen+0x30>
 80021a2:	4649      	mov	r1, r9
 80021a4:	4650      	mov	r0, sl
 80021a6:	f7ff ff94 	bl	80020d2 <_stat>
 80021aa:	3001      	adds	r0, #1
 80021ac:	d0c6      	beq.n	800213c <_swiopen+0x30>
 80021ae:	f000 f90b 	bl	80023c8 <__errno>
 80021b2:	2311      	movs	r3, #17
 80021b4:	6003      	str	r3, [r0, #0]
 80021b6:	4620      	mov	r0, r4
 80021b8:	b016      	add	sp, #88	; 0x58
 80021ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021be:	bf00      	nop
 80021c0:	200000b4 	.word	0x200000b4

080021c4 <_get_semihosting_exts>:
 80021c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80021c8:	4607      	mov	r7, r0
 80021ca:	4688      	mov	r8, r1
 80021cc:	4829      	ldr	r0, [pc, #164]	; (8002274 <_get_semihosting_exts+0xb0>)
 80021ce:	2100      	movs	r1, #0
 80021d0:	4615      	mov	r5, r2
 80021d2:	f7ff ff9b 	bl	800210c <_swiopen>
 80021d6:	462a      	mov	r2, r5
 80021d8:	4604      	mov	r4, r0
 80021da:	2100      	movs	r1, #0
 80021dc:	4638      	mov	r0, r7
 80021de:	f000 f9ef 	bl	80025c0 <memset>
 80021e2:	1c63      	adds	r3, r4, #1
 80021e4:	d015      	beq.n	8002212 <_get_semihosting_exts+0x4e>
 80021e6:	4620      	mov	r0, r4
 80021e8:	f7ff fe18 	bl	8001e1c <findslot>
 80021ec:	260c      	movs	r6, #12
 80021ee:	4681      	mov	r9, r0
 80021f0:	4630      	mov	r0, r6
 80021f2:	4649      	mov	r1, r9
 80021f4:	beab      	bkpt	0x00ab
 80021f6:	4606      	mov	r6, r0
 80021f8:	4630      	mov	r0, r6
 80021fa:	f7ff fe29 	bl	8001e50 <checkerror>
 80021fe:	2803      	cmp	r0, #3
 8002200:	dd02      	ble.n	8002208 <_get_semihosting_exts+0x44>
 8002202:	3803      	subs	r0, #3
 8002204:	42a8      	cmp	r0, r5
 8002206:	dc08      	bgt.n	800221a <_get_semihosting_exts+0x56>
 8002208:	4620      	mov	r0, r4
 800220a:	f7ff fee7 	bl	8001fdc <_close>
 800220e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002212:	4620      	mov	r0, r4
 8002214:	b003      	add	sp, #12
 8002216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800221a:	2204      	movs	r2, #4
 800221c:	eb0d 0102 	add.w	r1, sp, r2
 8002220:	4620      	mov	r0, r4
 8002222:	f7ff fe43 	bl	8001eac <_read>
 8002226:	2803      	cmp	r0, #3
 8002228:	ddee      	ble.n	8002208 <_get_semihosting_exts+0x44>
 800222a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800222e:	2b53      	cmp	r3, #83	; 0x53
 8002230:	d1ea      	bne.n	8002208 <_get_semihosting_exts+0x44>
 8002232:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002236:	2b48      	cmp	r3, #72	; 0x48
 8002238:	d1e6      	bne.n	8002208 <_get_semihosting_exts+0x44>
 800223a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800223e:	2b46      	cmp	r3, #70	; 0x46
 8002240:	d1e2      	bne.n	8002208 <_get_semihosting_exts+0x44>
 8002242:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002246:	2b42      	cmp	r3, #66	; 0x42
 8002248:	d1de      	bne.n	8002208 <_get_semihosting_exts+0x44>
 800224a:	2201      	movs	r2, #1
 800224c:	4641      	mov	r1, r8
 800224e:	4620      	mov	r0, r4
 8002250:	f7ff fe46 	bl	8001ee0 <_swilseek>
 8002254:	2800      	cmp	r0, #0
 8002256:	dbd7      	blt.n	8002208 <_get_semihosting_exts+0x44>
 8002258:	462a      	mov	r2, r5
 800225a:	4639      	mov	r1, r7
 800225c:	4620      	mov	r0, r4
 800225e:	f7ff fe25 	bl	8001eac <_read>
 8002262:	4605      	mov	r5, r0
 8002264:	4620      	mov	r0, r4
 8002266:	f7ff feb9 	bl	8001fdc <_close>
 800226a:	4628      	mov	r0, r5
 800226c:	f7ff fdf0 	bl	8001e50 <checkerror>
 8002270:	4604      	mov	r4, r0
 8002272:	e7ce      	b.n	8002212 <_get_semihosting_exts+0x4e>
 8002274:	08003701 	.word	0x08003701

08002278 <initialise_semihosting_exts>:
 8002278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800227a:	4d0a      	ldr	r5, [pc, #40]	; (80022a4 <initialise_semihosting_exts+0x2c>)
 800227c:	4c0a      	ldr	r4, [pc, #40]	; (80022a8 <initialise_semihosting_exts+0x30>)
 800227e:	2100      	movs	r1, #0
 8002280:	2201      	movs	r2, #1
 8002282:	a801      	add	r0, sp, #4
 8002284:	6029      	str	r1, [r5, #0]
 8002286:	6022      	str	r2, [r4, #0]
 8002288:	f7ff ff9c 	bl	80021c4 <_get_semihosting_exts>
 800228c:	2800      	cmp	r0, #0
 800228e:	dd07      	ble.n	80022a0 <initialise_semihosting_exts+0x28>
 8002290:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002294:	f003 0201 	and.w	r2, r3, #1
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	602a      	str	r2, [r5, #0]
 800229e:	6023      	str	r3, [r4, #0]
 80022a0:	b003      	add	sp, #12
 80022a2:	bd30      	pop	{r4, r5, pc}
 80022a4:	2000001c 	.word	0x2000001c
 80022a8:	20000020 	.word	0x20000020

080022ac <_has_ext_stdout_stderr>:
 80022ac:	b510      	push	{r4, lr}
 80022ae:	4c04      	ldr	r4, [pc, #16]	; (80022c0 <_has_ext_stdout_stderr+0x14>)
 80022b0:	6822      	ldr	r2, [r4, #0]
 80022b2:	2a00      	cmp	r2, #0
 80022b4:	da01      	bge.n	80022ba <_has_ext_stdout_stderr+0xe>
 80022b6:	f7ff ffdf 	bl	8002278 <initialise_semihosting_exts>
 80022ba:	6820      	ldr	r0, [r4, #0]
 80022bc:	bd10      	pop	{r4, pc}
 80022be:	bf00      	nop
 80022c0:	20000020 	.word	0x20000020

080022c4 <initialise_monitor_handles>:
 80022c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022c8:	b085      	sub	sp, #20
 80022ca:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 800237c <initialise_monitor_handles+0xb8>
 80022ce:	f8cd 9004 	str.w	r9, [sp, #4]
 80022d2:	2303      	movs	r3, #3
 80022d4:	2400      	movs	r4, #0
 80022d6:	9303      	str	r3, [sp, #12]
 80022d8:	f10d 0804 	add.w	r8, sp, #4
 80022dc:	9402      	str	r4, [sp, #8]
 80022de:	2501      	movs	r5, #1
 80022e0:	4628      	mov	r0, r5
 80022e2:	4641      	mov	r1, r8
 80022e4:	beab      	bkpt	0x00ab
 80022e6:	4605      	mov	r5, r0
 80022e8:	4e20      	ldr	r6, [pc, #128]	; (800236c <initialise_monitor_handles+0xa8>)
 80022ea:	4a21      	ldr	r2, [pc, #132]	; (8002370 <initialise_monitor_handles+0xac>)
 80022ec:	6035      	str	r5, [r6, #0]
 80022ee:	4623      	mov	r3, r4
 80022f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022f4:	4614      	mov	r4, r2
 80022f6:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80022fa:	3301      	adds	r3, #1
 80022fc:	2b14      	cmp	r3, #20
 80022fe:	d1fa      	bne.n	80022f6 <initialise_monitor_handles+0x32>
 8002300:	f7ff ffd4 	bl	80022ac <_has_ext_stdout_stderr>
 8002304:	4d1b      	ldr	r5, [pc, #108]	; (8002374 <initialise_monitor_handles+0xb0>)
 8002306:	b1d0      	cbz	r0, 800233e <initialise_monitor_handles+0x7a>
 8002308:	f04f 0a03 	mov.w	sl, #3
 800230c:	2304      	movs	r3, #4
 800230e:	f8cd 9004 	str.w	r9, [sp, #4]
 8002312:	2701      	movs	r7, #1
 8002314:	f8cd a00c 	str.w	sl, [sp, #12]
 8002318:	9302      	str	r3, [sp, #8]
 800231a:	4638      	mov	r0, r7
 800231c:	4641      	mov	r1, r8
 800231e:	beab      	bkpt	0x00ab
 8002320:	4683      	mov	fp, r0
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <initialise_monitor_handles+0xb4>)
 8002324:	f8cd 9004 	str.w	r9, [sp, #4]
 8002328:	f8c3 b000 	str.w	fp, [r3]
 800232c:	2308      	movs	r3, #8
 800232e:	f8cd a00c 	str.w	sl, [sp, #12]
 8002332:	9302      	str	r3, [sp, #8]
 8002334:	4638      	mov	r0, r7
 8002336:	4641      	mov	r1, r8
 8002338:	beab      	bkpt	0x00ab
 800233a:	4607      	mov	r7, r0
 800233c:	602f      	str	r7, [r5, #0]
 800233e:	682b      	ldr	r3, [r5, #0]
 8002340:	3301      	adds	r3, #1
 8002342:	bf02      	ittt	eq
 8002344:	4b0c      	ldreq	r3, [pc, #48]	; (8002378 <initialise_monitor_handles+0xb4>)
 8002346:	681b      	ldreq	r3, [r3, #0]
 8002348:	602b      	streq	r3, [r5, #0]
 800234a:	6833      	ldr	r3, [r6, #0]
 800234c:	6023      	str	r3, [r4, #0]
 800234e:	2600      	movs	r6, #0
 8002350:	6066      	str	r6, [r4, #4]
 8002352:	f7ff ffab 	bl	80022ac <_has_ext_stdout_stderr>
 8002356:	b130      	cbz	r0, 8002366 <initialise_monitor_handles+0xa2>
 8002358:	4b07      	ldr	r3, [pc, #28]	; (8002378 <initialise_monitor_handles+0xb4>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002360:	682b      	ldr	r3, [r5, #0]
 8002362:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002366:	b005      	add	sp, #20
 8002368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800236c:	200000ac 	.word	0x200000ac
 8002370:	200000b4 	.word	0x200000b4
 8002374:	200000a8 	.word	0x200000a8
 8002378:	200000b0 	.word	0x200000b0
 800237c:	08003717 	.word	0x08003717

08002380 <_isatty>:
 8002380:	b570      	push	{r4, r5, r6, lr}
 8002382:	f7ff fd4b 	bl	8001e1c <findslot>
 8002386:	2509      	movs	r5, #9
 8002388:	4604      	mov	r4, r0
 800238a:	b920      	cbnz	r0, 8002396 <_isatty+0x16>
 800238c:	f000 f81c 	bl	80023c8 <__errno>
 8002390:	6005      	str	r5, [r0, #0]
 8002392:	4620      	mov	r0, r4
 8002394:	bd70      	pop	{r4, r5, r6, pc}
 8002396:	4628      	mov	r0, r5
 8002398:	4621      	mov	r1, r4
 800239a:	beab      	bkpt	0x00ab
 800239c:	4604      	mov	r4, r0
 800239e:	2c01      	cmp	r4, #1
 80023a0:	d0f7      	beq.n	8002392 <_isatty+0x12>
 80023a2:	f000 f811 	bl	80023c8 <__errno>
 80023a6:	2400      	movs	r4, #0
 80023a8:	4606      	mov	r6, r0
 80023aa:	2513      	movs	r5, #19
 80023ac:	4628      	mov	r0, r5
 80023ae:	4621      	mov	r1, r4
 80023b0:	beab      	bkpt	0x00ab
 80023b2:	4605      	mov	r5, r0
 80023b4:	6035      	str	r5, [r6, #0]
 80023b6:	e7ec      	b.n	8002392 <_isatty+0x12>

080023b8 <abort>:
 80023b8:	b508      	push	{r3, lr}
 80023ba:	2006      	movs	r0, #6
 80023bc:	f000 fa64 	bl	8002888 <raise>
 80023c0:	2001      	movs	r0, #1
 80023c2:	f000 ffcf 	bl	8003364 <_exit>
	...

080023c8 <__errno>:
 80023c8:	4b01      	ldr	r3, [pc, #4]	; (80023d0 <__errno+0x8>)
 80023ca:	6818      	ldr	r0, [r3, #0]
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000024 	.word	0x20000024

080023d4 <std>:
 80023d4:	2300      	movs	r3, #0
 80023d6:	b510      	push	{r4, lr}
 80023d8:	4604      	mov	r4, r0
 80023da:	e9c0 3300 	strd	r3, r3, [r0]
 80023de:	6083      	str	r3, [r0, #8]
 80023e0:	8181      	strh	r1, [r0, #12]
 80023e2:	6643      	str	r3, [r0, #100]	; 0x64
 80023e4:	81c2      	strh	r2, [r0, #14]
 80023e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80023ea:	6183      	str	r3, [r0, #24]
 80023ec:	4619      	mov	r1, r3
 80023ee:	2208      	movs	r2, #8
 80023f0:	305c      	adds	r0, #92	; 0x5c
 80023f2:	f000 f8e5 	bl	80025c0 <memset>
 80023f6:	4b05      	ldr	r3, [pc, #20]	; (800240c <std+0x38>)
 80023f8:	6263      	str	r3, [r4, #36]	; 0x24
 80023fa:	4b05      	ldr	r3, [pc, #20]	; (8002410 <std+0x3c>)
 80023fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <std+0x40>)
 8002400:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <std+0x44>)
 8002404:	6224      	str	r4, [r4, #32]
 8002406:	6323      	str	r3, [r4, #48]	; 0x30
 8002408:	bd10      	pop	{r4, pc}
 800240a:	bf00      	nop
 800240c:	080028c1 	.word	0x080028c1
 8002410:	080028e3 	.word	0x080028e3
 8002414:	0800291b 	.word	0x0800291b
 8002418:	0800293f 	.word	0x0800293f

0800241c <_cleanup_r>:
 800241c:	4901      	ldr	r1, [pc, #4]	; (8002424 <_cleanup_r+0x8>)
 800241e:	f000 b885 	b.w	800252c <_fwalk_reent>
 8002422:	bf00      	nop
 8002424:	08002c19 	.word	0x08002c19

08002428 <__sfmoreglue>:
 8002428:	b570      	push	{r4, r5, r6, lr}
 800242a:	1e4a      	subs	r2, r1, #1
 800242c:	2568      	movs	r5, #104	; 0x68
 800242e:	4355      	muls	r5, r2
 8002430:	460e      	mov	r6, r1
 8002432:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002436:	f000 f919 	bl	800266c <_malloc_r>
 800243a:	4604      	mov	r4, r0
 800243c:	b140      	cbz	r0, 8002450 <__sfmoreglue+0x28>
 800243e:	2100      	movs	r1, #0
 8002440:	e9c0 1600 	strd	r1, r6, [r0]
 8002444:	300c      	adds	r0, #12
 8002446:	60a0      	str	r0, [r4, #8]
 8002448:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800244c:	f000 f8b8 	bl	80025c0 <memset>
 8002450:	4620      	mov	r0, r4
 8002452:	bd70      	pop	{r4, r5, r6, pc}

08002454 <__sinit>:
 8002454:	6983      	ldr	r3, [r0, #24]
 8002456:	b510      	push	{r4, lr}
 8002458:	4604      	mov	r4, r0
 800245a:	bb33      	cbnz	r3, 80024aa <__sinit+0x56>
 800245c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002460:	6503      	str	r3, [r0, #80]	; 0x50
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <__sinit+0x58>)
 8002464:	4a12      	ldr	r2, [pc, #72]	; (80024b0 <__sinit+0x5c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6282      	str	r2, [r0, #40]	; 0x28
 800246a:	4298      	cmp	r0, r3
 800246c:	bf04      	itt	eq
 800246e:	2301      	moveq	r3, #1
 8002470:	6183      	streq	r3, [r0, #24]
 8002472:	f000 f81f 	bl	80024b4 <__sfp>
 8002476:	6060      	str	r0, [r4, #4]
 8002478:	4620      	mov	r0, r4
 800247a:	f000 f81b 	bl	80024b4 <__sfp>
 800247e:	60a0      	str	r0, [r4, #8]
 8002480:	4620      	mov	r0, r4
 8002482:	f000 f817 	bl	80024b4 <__sfp>
 8002486:	2200      	movs	r2, #0
 8002488:	60e0      	str	r0, [r4, #12]
 800248a:	2104      	movs	r1, #4
 800248c:	6860      	ldr	r0, [r4, #4]
 800248e:	f7ff ffa1 	bl	80023d4 <std>
 8002492:	2201      	movs	r2, #1
 8002494:	2109      	movs	r1, #9
 8002496:	68a0      	ldr	r0, [r4, #8]
 8002498:	f7ff ff9c 	bl	80023d4 <std>
 800249c:	2202      	movs	r2, #2
 800249e:	2112      	movs	r1, #18
 80024a0:	68e0      	ldr	r0, [r4, #12]
 80024a2:	f7ff ff97 	bl	80023d4 <std>
 80024a6:	2301      	movs	r3, #1
 80024a8:	61a3      	str	r3, [r4, #24]
 80024aa:	bd10      	pop	{r4, pc}
 80024ac:	0800377c 	.word	0x0800377c
 80024b0:	0800241d 	.word	0x0800241d

080024b4 <__sfp>:
 80024b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b6:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <__sfp+0x70>)
 80024b8:	681e      	ldr	r6, [r3, #0]
 80024ba:	69b3      	ldr	r3, [r6, #24]
 80024bc:	4607      	mov	r7, r0
 80024be:	b913      	cbnz	r3, 80024c6 <__sfp+0x12>
 80024c0:	4630      	mov	r0, r6
 80024c2:	f7ff ffc7 	bl	8002454 <__sinit>
 80024c6:	3648      	adds	r6, #72	; 0x48
 80024c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	d503      	bpl.n	80024d8 <__sfp+0x24>
 80024d0:	6833      	ldr	r3, [r6, #0]
 80024d2:	b133      	cbz	r3, 80024e2 <__sfp+0x2e>
 80024d4:	6836      	ldr	r6, [r6, #0]
 80024d6:	e7f7      	b.n	80024c8 <__sfp+0x14>
 80024d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80024dc:	b16d      	cbz	r5, 80024fa <__sfp+0x46>
 80024de:	3468      	adds	r4, #104	; 0x68
 80024e0:	e7f4      	b.n	80024cc <__sfp+0x18>
 80024e2:	2104      	movs	r1, #4
 80024e4:	4638      	mov	r0, r7
 80024e6:	f7ff ff9f 	bl	8002428 <__sfmoreglue>
 80024ea:	6030      	str	r0, [r6, #0]
 80024ec:	2800      	cmp	r0, #0
 80024ee:	d1f1      	bne.n	80024d4 <__sfp+0x20>
 80024f0:	230c      	movs	r3, #12
 80024f2:	603b      	str	r3, [r7, #0]
 80024f4:	4604      	mov	r4, r0
 80024f6:	4620      	mov	r0, r4
 80024f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024fa:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <__sfp+0x74>)
 80024fc:	6665      	str	r5, [r4, #100]	; 0x64
 80024fe:	e9c4 5500 	strd	r5, r5, [r4]
 8002502:	60a5      	str	r5, [r4, #8]
 8002504:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002508:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800250c:	2208      	movs	r2, #8
 800250e:	4629      	mov	r1, r5
 8002510:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002514:	f000 f854 	bl	80025c0 <memset>
 8002518:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800251c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002520:	e7e9      	b.n	80024f6 <__sfp+0x42>
 8002522:	bf00      	nop
 8002524:	0800377c 	.word	0x0800377c
 8002528:	ffff0001 	.word	0xffff0001

0800252c <_fwalk_reent>:
 800252c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002530:	4680      	mov	r8, r0
 8002532:	4689      	mov	r9, r1
 8002534:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002538:	2600      	movs	r6, #0
 800253a:	b914      	cbnz	r4, 8002542 <_fwalk_reent+0x16>
 800253c:	4630      	mov	r0, r6
 800253e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002542:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002546:	3f01      	subs	r7, #1
 8002548:	d501      	bpl.n	800254e <_fwalk_reent+0x22>
 800254a:	6824      	ldr	r4, [r4, #0]
 800254c:	e7f5      	b.n	800253a <_fwalk_reent+0xe>
 800254e:	89ab      	ldrh	r3, [r5, #12]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d907      	bls.n	8002564 <_fwalk_reent+0x38>
 8002554:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002558:	3301      	adds	r3, #1
 800255a:	d003      	beq.n	8002564 <_fwalk_reent+0x38>
 800255c:	4629      	mov	r1, r5
 800255e:	4640      	mov	r0, r8
 8002560:	47c8      	blx	r9
 8002562:	4306      	orrs	r6, r0
 8002564:	3568      	adds	r5, #104	; 0x68
 8002566:	e7ee      	b.n	8002546 <_fwalk_reent+0x1a>

08002568 <__libc_init_array>:
 8002568:	b570      	push	{r4, r5, r6, lr}
 800256a:	4e0d      	ldr	r6, [pc, #52]	; (80025a0 <__libc_init_array+0x38>)
 800256c:	4c0d      	ldr	r4, [pc, #52]	; (80025a4 <__libc_init_array+0x3c>)
 800256e:	1ba4      	subs	r4, r4, r6
 8002570:	10a4      	asrs	r4, r4, #2
 8002572:	2500      	movs	r5, #0
 8002574:	42a5      	cmp	r5, r4
 8002576:	d109      	bne.n	800258c <__libc_init_array+0x24>
 8002578:	4e0b      	ldr	r6, [pc, #44]	; (80025a8 <__libc_init_array+0x40>)
 800257a:	4c0c      	ldr	r4, [pc, #48]	; (80025ac <__libc_init_array+0x44>)
 800257c:	f000 fef4 	bl	8003368 <_init>
 8002580:	1ba4      	subs	r4, r4, r6
 8002582:	10a4      	asrs	r4, r4, #2
 8002584:	2500      	movs	r5, #0
 8002586:	42a5      	cmp	r5, r4
 8002588:	d105      	bne.n	8002596 <__libc_init_array+0x2e>
 800258a:	bd70      	pop	{r4, r5, r6, pc}
 800258c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002590:	4798      	blx	r3
 8002592:	3501      	adds	r5, #1
 8002594:	e7ee      	b.n	8002574 <__libc_init_array+0xc>
 8002596:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800259a:	4798      	blx	r3
 800259c:	3501      	adds	r5, #1
 800259e:	e7f2      	b.n	8002586 <__libc_init_array+0x1e>
 80025a0:	080037b4 	.word	0x080037b4
 80025a4:	080037b4 	.word	0x080037b4
 80025a8:	080037b4 	.word	0x080037b4
 80025ac:	080037b8 	.word	0x080037b8

080025b0 <malloc>:
 80025b0:	4b02      	ldr	r3, [pc, #8]	; (80025bc <malloc+0xc>)
 80025b2:	4601      	mov	r1, r0
 80025b4:	6818      	ldr	r0, [r3, #0]
 80025b6:	f000 b859 	b.w	800266c <_malloc_r>
 80025ba:	bf00      	nop
 80025bc:	20000024 	.word	0x20000024

080025c0 <memset>:
 80025c0:	4402      	add	r2, r0
 80025c2:	4603      	mov	r3, r0
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d100      	bne.n	80025ca <memset+0xa>
 80025c8:	4770      	bx	lr
 80025ca:	f803 1b01 	strb.w	r1, [r3], #1
 80025ce:	e7f9      	b.n	80025c4 <memset+0x4>

080025d0 <_free_r>:
 80025d0:	b538      	push	{r3, r4, r5, lr}
 80025d2:	4605      	mov	r5, r0
 80025d4:	2900      	cmp	r1, #0
 80025d6:	d045      	beq.n	8002664 <_free_r+0x94>
 80025d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025dc:	1f0c      	subs	r4, r1, #4
 80025de:	2b00      	cmp	r3, #0
 80025e0:	bfb8      	it	lt
 80025e2:	18e4      	addlt	r4, r4, r3
 80025e4:	f000 fbb8 	bl	8002d58 <__malloc_lock>
 80025e8:	4a1f      	ldr	r2, [pc, #124]	; (8002668 <_free_r+0x98>)
 80025ea:	6813      	ldr	r3, [r2, #0]
 80025ec:	4610      	mov	r0, r2
 80025ee:	b933      	cbnz	r3, 80025fe <_free_r+0x2e>
 80025f0:	6063      	str	r3, [r4, #4]
 80025f2:	6014      	str	r4, [r2, #0]
 80025f4:	4628      	mov	r0, r5
 80025f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025fa:	f000 bbae 	b.w	8002d5a <__malloc_unlock>
 80025fe:	42a3      	cmp	r3, r4
 8002600:	d90c      	bls.n	800261c <_free_r+0x4c>
 8002602:	6821      	ldr	r1, [r4, #0]
 8002604:	1862      	adds	r2, r4, r1
 8002606:	4293      	cmp	r3, r2
 8002608:	bf04      	itt	eq
 800260a:	681a      	ldreq	r2, [r3, #0]
 800260c:	685b      	ldreq	r3, [r3, #4]
 800260e:	6063      	str	r3, [r4, #4]
 8002610:	bf04      	itt	eq
 8002612:	1852      	addeq	r2, r2, r1
 8002614:	6022      	streq	r2, [r4, #0]
 8002616:	6004      	str	r4, [r0, #0]
 8002618:	e7ec      	b.n	80025f4 <_free_r+0x24>
 800261a:	4613      	mov	r3, r2
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	b10a      	cbz	r2, 8002624 <_free_r+0x54>
 8002620:	42a2      	cmp	r2, r4
 8002622:	d9fa      	bls.n	800261a <_free_r+0x4a>
 8002624:	6819      	ldr	r1, [r3, #0]
 8002626:	1858      	adds	r0, r3, r1
 8002628:	42a0      	cmp	r0, r4
 800262a:	d10b      	bne.n	8002644 <_free_r+0x74>
 800262c:	6820      	ldr	r0, [r4, #0]
 800262e:	4401      	add	r1, r0
 8002630:	1858      	adds	r0, r3, r1
 8002632:	4282      	cmp	r2, r0
 8002634:	6019      	str	r1, [r3, #0]
 8002636:	d1dd      	bne.n	80025f4 <_free_r+0x24>
 8002638:	6810      	ldr	r0, [r2, #0]
 800263a:	6852      	ldr	r2, [r2, #4]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	4401      	add	r1, r0
 8002640:	6019      	str	r1, [r3, #0]
 8002642:	e7d7      	b.n	80025f4 <_free_r+0x24>
 8002644:	d902      	bls.n	800264c <_free_r+0x7c>
 8002646:	230c      	movs	r3, #12
 8002648:	602b      	str	r3, [r5, #0]
 800264a:	e7d3      	b.n	80025f4 <_free_r+0x24>
 800264c:	6820      	ldr	r0, [r4, #0]
 800264e:	1821      	adds	r1, r4, r0
 8002650:	428a      	cmp	r2, r1
 8002652:	bf04      	itt	eq
 8002654:	6811      	ldreq	r1, [r2, #0]
 8002656:	6852      	ldreq	r2, [r2, #4]
 8002658:	6062      	str	r2, [r4, #4]
 800265a:	bf04      	itt	eq
 800265c:	1809      	addeq	r1, r1, r0
 800265e:	6021      	streq	r1, [r4, #0]
 8002660:	605c      	str	r4, [r3, #4]
 8002662:	e7c7      	b.n	80025f4 <_free_r+0x24>
 8002664:	bd38      	pop	{r3, r4, r5, pc}
 8002666:	bf00      	nop
 8002668:	20000154 	.word	0x20000154

0800266c <_malloc_r>:
 800266c:	b570      	push	{r4, r5, r6, lr}
 800266e:	1ccd      	adds	r5, r1, #3
 8002670:	f025 0503 	bic.w	r5, r5, #3
 8002674:	3508      	adds	r5, #8
 8002676:	2d0c      	cmp	r5, #12
 8002678:	bf38      	it	cc
 800267a:	250c      	movcc	r5, #12
 800267c:	2d00      	cmp	r5, #0
 800267e:	4606      	mov	r6, r0
 8002680:	db01      	blt.n	8002686 <_malloc_r+0x1a>
 8002682:	42a9      	cmp	r1, r5
 8002684:	d903      	bls.n	800268e <_malloc_r+0x22>
 8002686:	230c      	movs	r3, #12
 8002688:	6033      	str	r3, [r6, #0]
 800268a:	2000      	movs	r0, #0
 800268c:	bd70      	pop	{r4, r5, r6, pc}
 800268e:	f000 fb63 	bl	8002d58 <__malloc_lock>
 8002692:	4a21      	ldr	r2, [pc, #132]	; (8002718 <_malloc_r+0xac>)
 8002694:	6814      	ldr	r4, [r2, #0]
 8002696:	4621      	mov	r1, r4
 8002698:	b991      	cbnz	r1, 80026c0 <_malloc_r+0x54>
 800269a:	4c20      	ldr	r4, [pc, #128]	; (800271c <_malloc_r+0xb0>)
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	b91b      	cbnz	r3, 80026a8 <_malloc_r+0x3c>
 80026a0:	4630      	mov	r0, r6
 80026a2:	f000 f8b9 	bl	8002818 <_sbrk_r>
 80026a6:	6020      	str	r0, [r4, #0]
 80026a8:	4629      	mov	r1, r5
 80026aa:	4630      	mov	r0, r6
 80026ac:	f000 f8b4 	bl	8002818 <_sbrk_r>
 80026b0:	1c43      	adds	r3, r0, #1
 80026b2:	d124      	bne.n	80026fe <_malloc_r+0x92>
 80026b4:	230c      	movs	r3, #12
 80026b6:	6033      	str	r3, [r6, #0]
 80026b8:	4630      	mov	r0, r6
 80026ba:	f000 fb4e 	bl	8002d5a <__malloc_unlock>
 80026be:	e7e4      	b.n	800268a <_malloc_r+0x1e>
 80026c0:	680b      	ldr	r3, [r1, #0]
 80026c2:	1b5b      	subs	r3, r3, r5
 80026c4:	d418      	bmi.n	80026f8 <_malloc_r+0x8c>
 80026c6:	2b0b      	cmp	r3, #11
 80026c8:	d90f      	bls.n	80026ea <_malloc_r+0x7e>
 80026ca:	600b      	str	r3, [r1, #0]
 80026cc:	50cd      	str	r5, [r1, r3]
 80026ce:	18cc      	adds	r4, r1, r3
 80026d0:	4630      	mov	r0, r6
 80026d2:	f000 fb42 	bl	8002d5a <__malloc_unlock>
 80026d6:	f104 000b 	add.w	r0, r4, #11
 80026da:	1d23      	adds	r3, r4, #4
 80026dc:	f020 0007 	bic.w	r0, r0, #7
 80026e0:	1ac3      	subs	r3, r0, r3
 80026e2:	d0d3      	beq.n	800268c <_malloc_r+0x20>
 80026e4:	425a      	negs	r2, r3
 80026e6:	50e2      	str	r2, [r4, r3]
 80026e8:	e7d0      	b.n	800268c <_malloc_r+0x20>
 80026ea:	428c      	cmp	r4, r1
 80026ec:	684b      	ldr	r3, [r1, #4]
 80026ee:	bf16      	itet	ne
 80026f0:	6063      	strne	r3, [r4, #4]
 80026f2:	6013      	streq	r3, [r2, #0]
 80026f4:	460c      	movne	r4, r1
 80026f6:	e7eb      	b.n	80026d0 <_malloc_r+0x64>
 80026f8:	460c      	mov	r4, r1
 80026fa:	6849      	ldr	r1, [r1, #4]
 80026fc:	e7cc      	b.n	8002698 <_malloc_r+0x2c>
 80026fe:	1cc4      	adds	r4, r0, #3
 8002700:	f024 0403 	bic.w	r4, r4, #3
 8002704:	42a0      	cmp	r0, r4
 8002706:	d005      	beq.n	8002714 <_malloc_r+0xa8>
 8002708:	1a21      	subs	r1, r4, r0
 800270a:	4630      	mov	r0, r6
 800270c:	f000 f884 	bl	8002818 <_sbrk_r>
 8002710:	3001      	adds	r0, #1
 8002712:	d0cf      	beq.n	80026b4 <_malloc_r+0x48>
 8002714:	6025      	str	r5, [r4, #0]
 8002716:	e7db      	b.n	80026d0 <_malloc_r+0x64>
 8002718:	20000154 	.word	0x20000154
 800271c:	20000158 	.word	0x20000158

08002720 <iprintf>:
 8002720:	b40f      	push	{r0, r1, r2, r3}
 8002722:	4b0a      	ldr	r3, [pc, #40]	; (800274c <iprintf+0x2c>)
 8002724:	b513      	push	{r0, r1, r4, lr}
 8002726:	681c      	ldr	r4, [r3, #0]
 8002728:	b124      	cbz	r4, 8002734 <iprintf+0x14>
 800272a:	69a3      	ldr	r3, [r4, #24]
 800272c:	b913      	cbnz	r3, 8002734 <iprintf+0x14>
 800272e:	4620      	mov	r0, r4
 8002730:	f7ff fe90 	bl	8002454 <__sinit>
 8002734:	ab05      	add	r3, sp, #20
 8002736:	9a04      	ldr	r2, [sp, #16]
 8002738:	68a1      	ldr	r1, [r4, #8]
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	4620      	mov	r0, r4
 800273e:	f000 fb37 	bl	8002db0 <_vfiprintf_r>
 8002742:	b002      	add	sp, #8
 8002744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002748:	b004      	add	sp, #16
 800274a:	4770      	bx	lr
 800274c:	20000024 	.word	0x20000024

08002750 <_puts_r>:
 8002750:	b570      	push	{r4, r5, r6, lr}
 8002752:	460e      	mov	r6, r1
 8002754:	4605      	mov	r5, r0
 8002756:	b118      	cbz	r0, 8002760 <_puts_r+0x10>
 8002758:	6983      	ldr	r3, [r0, #24]
 800275a:	b90b      	cbnz	r3, 8002760 <_puts_r+0x10>
 800275c:	f7ff fe7a 	bl	8002454 <__sinit>
 8002760:	69ab      	ldr	r3, [r5, #24]
 8002762:	68ac      	ldr	r4, [r5, #8]
 8002764:	b913      	cbnz	r3, 800276c <_puts_r+0x1c>
 8002766:	4628      	mov	r0, r5
 8002768:	f7ff fe74 	bl	8002454 <__sinit>
 800276c:	4b23      	ldr	r3, [pc, #140]	; (80027fc <_puts_r+0xac>)
 800276e:	429c      	cmp	r4, r3
 8002770:	d117      	bne.n	80027a2 <_puts_r+0x52>
 8002772:	686c      	ldr	r4, [r5, #4]
 8002774:	89a3      	ldrh	r3, [r4, #12]
 8002776:	071b      	lsls	r3, r3, #28
 8002778:	d51d      	bpl.n	80027b6 <_puts_r+0x66>
 800277a:	6923      	ldr	r3, [r4, #16]
 800277c:	b1db      	cbz	r3, 80027b6 <_puts_r+0x66>
 800277e:	3e01      	subs	r6, #1
 8002780:	68a3      	ldr	r3, [r4, #8]
 8002782:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002786:	3b01      	subs	r3, #1
 8002788:	60a3      	str	r3, [r4, #8]
 800278a:	b9e9      	cbnz	r1, 80027c8 <_puts_r+0x78>
 800278c:	2b00      	cmp	r3, #0
 800278e:	da2e      	bge.n	80027ee <_puts_r+0x9e>
 8002790:	4622      	mov	r2, r4
 8002792:	210a      	movs	r1, #10
 8002794:	4628      	mov	r0, r5
 8002796:	f000 f8d7 	bl	8002948 <__swbuf_r>
 800279a:	3001      	adds	r0, #1
 800279c:	d011      	beq.n	80027c2 <_puts_r+0x72>
 800279e:	200a      	movs	r0, #10
 80027a0:	e011      	b.n	80027c6 <_puts_r+0x76>
 80027a2:	4b17      	ldr	r3, [pc, #92]	; (8002800 <_puts_r+0xb0>)
 80027a4:	429c      	cmp	r4, r3
 80027a6:	d101      	bne.n	80027ac <_puts_r+0x5c>
 80027a8:	68ac      	ldr	r4, [r5, #8]
 80027aa:	e7e3      	b.n	8002774 <_puts_r+0x24>
 80027ac:	4b15      	ldr	r3, [pc, #84]	; (8002804 <_puts_r+0xb4>)
 80027ae:	429c      	cmp	r4, r3
 80027b0:	bf08      	it	eq
 80027b2:	68ec      	ldreq	r4, [r5, #12]
 80027b4:	e7de      	b.n	8002774 <_puts_r+0x24>
 80027b6:	4621      	mov	r1, r4
 80027b8:	4628      	mov	r0, r5
 80027ba:	f000 f929 	bl	8002a10 <__swsetup_r>
 80027be:	2800      	cmp	r0, #0
 80027c0:	d0dd      	beq.n	800277e <_puts_r+0x2e>
 80027c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027c6:	bd70      	pop	{r4, r5, r6, pc}
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	da04      	bge.n	80027d6 <_puts_r+0x86>
 80027cc:	69a2      	ldr	r2, [r4, #24]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	dc06      	bgt.n	80027e0 <_puts_r+0x90>
 80027d2:	290a      	cmp	r1, #10
 80027d4:	d004      	beq.n	80027e0 <_puts_r+0x90>
 80027d6:	6823      	ldr	r3, [r4, #0]
 80027d8:	1c5a      	adds	r2, r3, #1
 80027da:	6022      	str	r2, [r4, #0]
 80027dc:	7019      	strb	r1, [r3, #0]
 80027de:	e7cf      	b.n	8002780 <_puts_r+0x30>
 80027e0:	4622      	mov	r2, r4
 80027e2:	4628      	mov	r0, r5
 80027e4:	f000 f8b0 	bl	8002948 <__swbuf_r>
 80027e8:	3001      	adds	r0, #1
 80027ea:	d1c9      	bne.n	8002780 <_puts_r+0x30>
 80027ec:	e7e9      	b.n	80027c2 <_puts_r+0x72>
 80027ee:	6823      	ldr	r3, [r4, #0]
 80027f0:	200a      	movs	r0, #10
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	6022      	str	r2, [r4, #0]
 80027f6:	7018      	strb	r0, [r3, #0]
 80027f8:	e7e5      	b.n	80027c6 <_puts_r+0x76>
 80027fa:	bf00      	nop
 80027fc:	0800373c 	.word	0x0800373c
 8002800:	0800375c 	.word	0x0800375c
 8002804:	0800371c 	.word	0x0800371c

08002808 <puts>:
 8002808:	4b02      	ldr	r3, [pc, #8]	; (8002814 <puts+0xc>)
 800280a:	4601      	mov	r1, r0
 800280c:	6818      	ldr	r0, [r3, #0]
 800280e:	f7ff bf9f 	b.w	8002750 <_puts_r>
 8002812:	bf00      	nop
 8002814:	20000024 	.word	0x20000024

08002818 <_sbrk_r>:
 8002818:	b538      	push	{r3, r4, r5, lr}
 800281a:	4c06      	ldr	r4, [pc, #24]	; (8002834 <_sbrk_r+0x1c>)
 800281c:	2300      	movs	r3, #0
 800281e:	4605      	mov	r5, r0
 8002820:	4608      	mov	r0, r1
 8002822:	6023      	str	r3, [r4, #0]
 8002824:	f7ff fc02 	bl	800202c <_sbrk>
 8002828:	1c43      	adds	r3, r0, #1
 800282a:	d102      	bne.n	8002832 <_sbrk_r+0x1a>
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	b103      	cbz	r3, 8002832 <_sbrk_r+0x1a>
 8002830:	602b      	str	r3, [r5, #0]
 8002832:	bd38      	pop	{r3, r4, r5, pc}
 8002834:	200001f4 	.word	0x200001f4

08002838 <_raise_r>:
 8002838:	291f      	cmp	r1, #31
 800283a:	b538      	push	{r3, r4, r5, lr}
 800283c:	4604      	mov	r4, r0
 800283e:	460d      	mov	r5, r1
 8002840:	d904      	bls.n	800284c <_raise_r+0x14>
 8002842:	2316      	movs	r3, #22
 8002844:	6003      	str	r3, [r0, #0]
 8002846:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800284a:	bd38      	pop	{r3, r4, r5, pc}
 800284c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800284e:	b112      	cbz	r2, 8002856 <_raise_r+0x1e>
 8002850:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002854:	b94b      	cbnz	r3, 800286a <_raise_r+0x32>
 8002856:	4620      	mov	r0, r4
 8002858:	f000 f830 	bl	80028bc <_getpid_r>
 800285c:	462a      	mov	r2, r5
 800285e:	4601      	mov	r1, r0
 8002860:	4620      	mov	r0, r4
 8002862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002866:	f000 b817 	b.w	8002898 <_kill_r>
 800286a:	2b01      	cmp	r3, #1
 800286c:	d00a      	beq.n	8002884 <_raise_r+0x4c>
 800286e:	1c59      	adds	r1, r3, #1
 8002870:	d103      	bne.n	800287a <_raise_r+0x42>
 8002872:	2316      	movs	r3, #22
 8002874:	6003      	str	r3, [r0, #0]
 8002876:	2001      	movs	r0, #1
 8002878:	e7e7      	b.n	800284a <_raise_r+0x12>
 800287a:	2400      	movs	r4, #0
 800287c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002880:	4628      	mov	r0, r5
 8002882:	4798      	blx	r3
 8002884:	2000      	movs	r0, #0
 8002886:	e7e0      	b.n	800284a <_raise_r+0x12>

08002888 <raise>:
 8002888:	4b02      	ldr	r3, [pc, #8]	; (8002894 <raise+0xc>)
 800288a:	4601      	mov	r1, r0
 800288c:	6818      	ldr	r0, [r3, #0]
 800288e:	f7ff bfd3 	b.w	8002838 <_raise_r>
 8002892:	bf00      	nop
 8002894:	20000024 	.word	0x20000024

08002898 <_kill_r>:
 8002898:	b538      	push	{r3, r4, r5, lr}
 800289a:	4c07      	ldr	r4, [pc, #28]	; (80028b8 <_kill_r+0x20>)
 800289c:	2300      	movs	r3, #0
 800289e:	4605      	mov	r5, r0
 80028a0:	4608      	mov	r0, r1
 80028a2:	4611      	mov	r1, r2
 80028a4:	6023      	str	r3, [r4, #0]
 80028a6:	f000 fd55 	bl	8003354 <_kill>
 80028aa:	1c43      	adds	r3, r0, #1
 80028ac:	d102      	bne.n	80028b4 <_kill_r+0x1c>
 80028ae:	6823      	ldr	r3, [r4, #0]
 80028b0:	b103      	cbz	r3, 80028b4 <_kill_r+0x1c>
 80028b2:	602b      	str	r3, [r5, #0]
 80028b4:	bd38      	pop	{r3, r4, r5, pc}
 80028b6:	bf00      	nop
 80028b8:	200001f4 	.word	0x200001f4

080028bc <_getpid_r>:
 80028bc:	f7ff bbb4 	b.w	8002028 <_getpid>

080028c0 <__sread>:
 80028c0:	b510      	push	{r4, lr}
 80028c2:	460c      	mov	r4, r1
 80028c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028c8:	f000 fd10 	bl	80032ec <_read_r>
 80028cc:	2800      	cmp	r0, #0
 80028ce:	bfab      	itete	ge
 80028d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80028d2:	89a3      	ldrhlt	r3, [r4, #12]
 80028d4:	181b      	addge	r3, r3, r0
 80028d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80028da:	bfac      	ite	ge
 80028dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80028de:	81a3      	strhlt	r3, [r4, #12]
 80028e0:	bd10      	pop	{r4, pc}

080028e2 <__swrite>:
 80028e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028e6:	461f      	mov	r7, r3
 80028e8:	898b      	ldrh	r3, [r1, #12]
 80028ea:	05db      	lsls	r3, r3, #23
 80028ec:	4605      	mov	r5, r0
 80028ee:	460c      	mov	r4, r1
 80028f0:	4616      	mov	r6, r2
 80028f2:	d505      	bpl.n	8002900 <__swrite+0x1e>
 80028f4:	2302      	movs	r3, #2
 80028f6:	2200      	movs	r2, #0
 80028f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028fc:	f000 f9b6 	bl	8002c6c <_lseek_r>
 8002900:	89a3      	ldrh	r3, [r4, #12]
 8002902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800290a:	81a3      	strh	r3, [r4, #12]
 800290c:	4632      	mov	r2, r6
 800290e:	463b      	mov	r3, r7
 8002910:	4628      	mov	r0, r5
 8002912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002916:	f000 b869 	b.w	80029ec <_write_r>

0800291a <__sseek>:
 800291a:	b510      	push	{r4, lr}
 800291c:	460c      	mov	r4, r1
 800291e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002922:	f000 f9a3 	bl	8002c6c <_lseek_r>
 8002926:	1c43      	adds	r3, r0, #1
 8002928:	89a3      	ldrh	r3, [r4, #12]
 800292a:	bf15      	itete	ne
 800292c:	6560      	strne	r0, [r4, #84]	; 0x54
 800292e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002932:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002936:	81a3      	strheq	r3, [r4, #12]
 8002938:	bf18      	it	ne
 800293a:	81a3      	strhne	r3, [r4, #12]
 800293c:	bd10      	pop	{r4, pc}

0800293e <__sclose>:
 800293e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002942:	f000 b8d3 	b.w	8002aec <_close_r>
	...

08002948 <__swbuf_r>:
 8002948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800294a:	460e      	mov	r6, r1
 800294c:	4614      	mov	r4, r2
 800294e:	4605      	mov	r5, r0
 8002950:	b118      	cbz	r0, 800295a <__swbuf_r+0x12>
 8002952:	6983      	ldr	r3, [r0, #24]
 8002954:	b90b      	cbnz	r3, 800295a <__swbuf_r+0x12>
 8002956:	f7ff fd7d 	bl	8002454 <__sinit>
 800295a:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <__swbuf_r+0x98>)
 800295c:	429c      	cmp	r4, r3
 800295e:	d12a      	bne.n	80029b6 <__swbuf_r+0x6e>
 8002960:	686c      	ldr	r4, [r5, #4]
 8002962:	69a3      	ldr	r3, [r4, #24]
 8002964:	60a3      	str	r3, [r4, #8]
 8002966:	89a3      	ldrh	r3, [r4, #12]
 8002968:	071a      	lsls	r2, r3, #28
 800296a:	d52e      	bpl.n	80029ca <__swbuf_r+0x82>
 800296c:	6923      	ldr	r3, [r4, #16]
 800296e:	b363      	cbz	r3, 80029ca <__swbuf_r+0x82>
 8002970:	6923      	ldr	r3, [r4, #16]
 8002972:	6820      	ldr	r0, [r4, #0]
 8002974:	1ac0      	subs	r0, r0, r3
 8002976:	6963      	ldr	r3, [r4, #20]
 8002978:	b2f6      	uxtb	r6, r6
 800297a:	4283      	cmp	r3, r0
 800297c:	4637      	mov	r7, r6
 800297e:	dc04      	bgt.n	800298a <__swbuf_r+0x42>
 8002980:	4621      	mov	r1, r4
 8002982:	4628      	mov	r0, r5
 8002984:	f000 f948 	bl	8002c18 <_fflush_r>
 8002988:	bb28      	cbnz	r0, 80029d6 <__swbuf_r+0x8e>
 800298a:	68a3      	ldr	r3, [r4, #8]
 800298c:	3b01      	subs	r3, #1
 800298e:	60a3      	str	r3, [r4, #8]
 8002990:	6823      	ldr	r3, [r4, #0]
 8002992:	1c5a      	adds	r2, r3, #1
 8002994:	6022      	str	r2, [r4, #0]
 8002996:	701e      	strb	r6, [r3, #0]
 8002998:	6963      	ldr	r3, [r4, #20]
 800299a:	3001      	adds	r0, #1
 800299c:	4283      	cmp	r3, r0
 800299e:	d004      	beq.n	80029aa <__swbuf_r+0x62>
 80029a0:	89a3      	ldrh	r3, [r4, #12]
 80029a2:	07db      	lsls	r3, r3, #31
 80029a4:	d519      	bpl.n	80029da <__swbuf_r+0x92>
 80029a6:	2e0a      	cmp	r6, #10
 80029a8:	d117      	bne.n	80029da <__swbuf_r+0x92>
 80029aa:	4621      	mov	r1, r4
 80029ac:	4628      	mov	r0, r5
 80029ae:	f000 f933 	bl	8002c18 <_fflush_r>
 80029b2:	b190      	cbz	r0, 80029da <__swbuf_r+0x92>
 80029b4:	e00f      	b.n	80029d6 <__swbuf_r+0x8e>
 80029b6:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <__swbuf_r+0x9c>)
 80029b8:	429c      	cmp	r4, r3
 80029ba:	d101      	bne.n	80029c0 <__swbuf_r+0x78>
 80029bc:	68ac      	ldr	r4, [r5, #8]
 80029be:	e7d0      	b.n	8002962 <__swbuf_r+0x1a>
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <__swbuf_r+0xa0>)
 80029c2:	429c      	cmp	r4, r3
 80029c4:	bf08      	it	eq
 80029c6:	68ec      	ldreq	r4, [r5, #12]
 80029c8:	e7cb      	b.n	8002962 <__swbuf_r+0x1a>
 80029ca:	4621      	mov	r1, r4
 80029cc:	4628      	mov	r0, r5
 80029ce:	f000 f81f 	bl	8002a10 <__swsetup_r>
 80029d2:	2800      	cmp	r0, #0
 80029d4:	d0cc      	beq.n	8002970 <__swbuf_r+0x28>
 80029d6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80029da:	4638      	mov	r0, r7
 80029dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029de:	bf00      	nop
 80029e0:	0800373c 	.word	0x0800373c
 80029e4:	0800375c 	.word	0x0800375c
 80029e8:	0800371c 	.word	0x0800371c

080029ec <_write_r>:
 80029ec:	b538      	push	{r3, r4, r5, lr}
 80029ee:	4c07      	ldr	r4, [pc, #28]	; (8002a0c <_write_r+0x20>)
 80029f0:	4605      	mov	r5, r0
 80029f2:	4608      	mov	r0, r1
 80029f4:	4611      	mov	r1, r2
 80029f6:	2200      	movs	r2, #0
 80029f8:	6022      	str	r2, [r4, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	f7ff fabf 	bl	8001f7e <_write>
 8002a00:	1c43      	adds	r3, r0, #1
 8002a02:	d102      	bne.n	8002a0a <_write_r+0x1e>
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	b103      	cbz	r3, 8002a0a <_write_r+0x1e>
 8002a08:	602b      	str	r3, [r5, #0]
 8002a0a:	bd38      	pop	{r3, r4, r5, pc}
 8002a0c:	200001f4 	.word	0x200001f4

08002a10 <__swsetup_r>:
 8002a10:	4b32      	ldr	r3, [pc, #200]	; (8002adc <__swsetup_r+0xcc>)
 8002a12:	b570      	push	{r4, r5, r6, lr}
 8002a14:	681d      	ldr	r5, [r3, #0]
 8002a16:	4606      	mov	r6, r0
 8002a18:	460c      	mov	r4, r1
 8002a1a:	b125      	cbz	r5, 8002a26 <__swsetup_r+0x16>
 8002a1c:	69ab      	ldr	r3, [r5, #24]
 8002a1e:	b913      	cbnz	r3, 8002a26 <__swsetup_r+0x16>
 8002a20:	4628      	mov	r0, r5
 8002a22:	f7ff fd17 	bl	8002454 <__sinit>
 8002a26:	4b2e      	ldr	r3, [pc, #184]	; (8002ae0 <__swsetup_r+0xd0>)
 8002a28:	429c      	cmp	r4, r3
 8002a2a:	d10f      	bne.n	8002a4c <__swsetup_r+0x3c>
 8002a2c:	686c      	ldr	r4, [r5, #4]
 8002a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	0715      	lsls	r5, r2, #28
 8002a36:	d42c      	bmi.n	8002a92 <__swsetup_r+0x82>
 8002a38:	06d0      	lsls	r0, r2, #27
 8002a3a:	d411      	bmi.n	8002a60 <__swsetup_r+0x50>
 8002a3c:	2209      	movs	r2, #9
 8002a3e:	6032      	str	r2, [r6, #0]
 8002a40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a44:	81a3      	strh	r3, [r4, #12]
 8002a46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a4a:	e03e      	b.n	8002aca <__swsetup_r+0xba>
 8002a4c:	4b25      	ldr	r3, [pc, #148]	; (8002ae4 <__swsetup_r+0xd4>)
 8002a4e:	429c      	cmp	r4, r3
 8002a50:	d101      	bne.n	8002a56 <__swsetup_r+0x46>
 8002a52:	68ac      	ldr	r4, [r5, #8]
 8002a54:	e7eb      	b.n	8002a2e <__swsetup_r+0x1e>
 8002a56:	4b24      	ldr	r3, [pc, #144]	; (8002ae8 <__swsetup_r+0xd8>)
 8002a58:	429c      	cmp	r4, r3
 8002a5a:	bf08      	it	eq
 8002a5c:	68ec      	ldreq	r4, [r5, #12]
 8002a5e:	e7e6      	b.n	8002a2e <__swsetup_r+0x1e>
 8002a60:	0751      	lsls	r1, r2, #29
 8002a62:	d512      	bpl.n	8002a8a <__swsetup_r+0x7a>
 8002a64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002a66:	b141      	cbz	r1, 8002a7a <__swsetup_r+0x6a>
 8002a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002a6c:	4299      	cmp	r1, r3
 8002a6e:	d002      	beq.n	8002a76 <__swsetup_r+0x66>
 8002a70:	4630      	mov	r0, r6
 8002a72:	f7ff fdad 	bl	80025d0 <_free_r>
 8002a76:	2300      	movs	r3, #0
 8002a78:	6363      	str	r3, [r4, #52]	; 0x34
 8002a7a:	89a3      	ldrh	r3, [r4, #12]
 8002a7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002a80:	81a3      	strh	r3, [r4, #12]
 8002a82:	2300      	movs	r3, #0
 8002a84:	6063      	str	r3, [r4, #4]
 8002a86:	6923      	ldr	r3, [r4, #16]
 8002a88:	6023      	str	r3, [r4, #0]
 8002a8a:	89a3      	ldrh	r3, [r4, #12]
 8002a8c:	f043 0308 	orr.w	r3, r3, #8
 8002a90:	81a3      	strh	r3, [r4, #12]
 8002a92:	6923      	ldr	r3, [r4, #16]
 8002a94:	b94b      	cbnz	r3, 8002aaa <__swsetup_r+0x9a>
 8002a96:	89a3      	ldrh	r3, [r4, #12]
 8002a98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002a9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002aa0:	d003      	beq.n	8002aaa <__swsetup_r+0x9a>
 8002aa2:	4621      	mov	r1, r4
 8002aa4:	4630      	mov	r0, r6
 8002aa6:	f000 f917 	bl	8002cd8 <__smakebuf_r>
 8002aaa:	89a2      	ldrh	r2, [r4, #12]
 8002aac:	f012 0301 	ands.w	r3, r2, #1
 8002ab0:	d00c      	beq.n	8002acc <__swsetup_r+0xbc>
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60a3      	str	r3, [r4, #8]
 8002ab6:	6963      	ldr	r3, [r4, #20]
 8002ab8:	425b      	negs	r3, r3
 8002aba:	61a3      	str	r3, [r4, #24]
 8002abc:	6923      	ldr	r3, [r4, #16]
 8002abe:	b953      	cbnz	r3, 8002ad6 <__swsetup_r+0xc6>
 8002ac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ac4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002ac8:	d1ba      	bne.n	8002a40 <__swsetup_r+0x30>
 8002aca:	bd70      	pop	{r4, r5, r6, pc}
 8002acc:	0792      	lsls	r2, r2, #30
 8002ace:	bf58      	it	pl
 8002ad0:	6963      	ldrpl	r3, [r4, #20]
 8002ad2:	60a3      	str	r3, [r4, #8]
 8002ad4:	e7f2      	b.n	8002abc <__swsetup_r+0xac>
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	e7f7      	b.n	8002aca <__swsetup_r+0xba>
 8002ada:	bf00      	nop
 8002adc:	20000024 	.word	0x20000024
 8002ae0:	0800373c 	.word	0x0800373c
 8002ae4:	0800375c 	.word	0x0800375c
 8002ae8:	0800371c 	.word	0x0800371c

08002aec <_close_r>:
 8002aec:	b538      	push	{r3, r4, r5, lr}
 8002aee:	4c06      	ldr	r4, [pc, #24]	; (8002b08 <_close_r+0x1c>)
 8002af0:	2300      	movs	r3, #0
 8002af2:	4605      	mov	r5, r0
 8002af4:	4608      	mov	r0, r1
 8002af6:	6023      	str	r3, [r4, #0]
 8002af8:	f7ff fa70 	bl	8001fdc <_close>
 8002afc:	1c43      	adds	r3, r0, #1
 8002afe:	d102      	bne.n	8002b06 <_close_r+0x1a>
 8002b00:	6823      	ldr	r3, [r4, #0]
 8002b02:	b103      	cbz	r3, 8002b06 <_close_r+0x1a>
 8002b04:	602b      	str	r3, [r5, #0]
 8002b06:	bd38      	pop	{r3, r4, r5, pc}
 8002b08:	200001f4 	.word	0x200001f4

08002b0c <__sflush_r>:
 8002b0c:	898a      	ldrh	r2, [r1, #12]
 8002b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b12:	4605      	mov	r5, r0
 8002b14:	0710      	lsls	r0, r2, #28
 8002b16:	460c      	mov	r4, r1
 8002b18:	d458      	bmi.n	8002bcc <__sflush_r+0xc0>
 8002b1a:	684b      	ldr	r3, [r1, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	dc05      	bgt.n	8002b2c <__sflush_r+0x20>
 8002b20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	dc02      	bgt.n	8002b2c <__sflush_r+0x20>
 8002b26:	2000      	movs	r0, #0
 8002b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b2e:	2e00      	cmp	r6, #0
 8002b30:	d0f9      	beq.n	8002b26 <__sflush_r+0x1a>
 8002b32:	2300      	movs	r3, #0
 8002b34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002b38:	682f      	ldr	r7, [r5, #0]
 8002b3a:	6a21      	ldr	r1, [r4, #32]
 8002b3c:	602b      	str	r3, [r5, #0]
 8002b3e:	d032      	beq.n	8002ba6 <__sflush_r+0x9a>
 8002b40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b42:	89a3      	ldrh	r3, [r4, #12]
 8002b44:	075a      	lsls	r2, r3, #29
 8002b46:	d505      	bpl.n	8002b54 <__sflush_r+0x48>
 8002b48:	6863      	ldr	r3, [r4, #4]
 8002b4a:	1ac0      	subs	r0, r0, r3
 8002b4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b4e:	b10b      	cbz	r3, 8002b54 <__sflush_r+0x48>
 8002b50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b52:	1ac0      	subs	r0, r0, r3
 8002b54:	2300      	movs	r3, #0
 8002b56:	4602      	mov	r2, r0
 8002b58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b5a:	6a21      	ldr	r1, [r4, #32]
 8002b5c:	4628      	mov	r0, r5
 8002b5e:	47b0      	blx	r6
 8002b60:	1c43      	adds	r3, r0, #1
 8002b62:	89a3      	ldrh	r3, [r4, #12]
 8002b64:	d106      	bne.n	8002b74 <__sflush_r+0x68>
 8002b66:	6829      	ldr	r1, [r5, #0]
 8002b68:	291d      	cmp	r1, #29
 8002b6a:	d848      	bhi.n	8002bfe <__sflush_r+0xf2>
 8002b6c:	4a29      	ldr	r2, [pc, #164]	; (8002c14 <__sflush_r+0x108>)
 8002b6e:	40ca      	lsrs	r2, r1
 8002b70:	07d6      	lsls	r6, r2, #31
 8002b72:	d544      	bpl.n	8002bfe <__sflush_r+0xf2>
 8002b74:	2200      	movs	r2, #0
 8002b76:	6062      	str	r2, [r4, #4]
 8002b78:	04d9      	lsls	r1, r3, #19
 8002b7a:	6922      	ldr	r2, [r4, #16]
 8002b7c:	6022      	str	r2, [r4, #0]
 8002b7e:	d504      	bpl.n	8002b8a <__sflush_r+0x7e>
 8002b80:	1c42      	adds	r2, r0, #1
 8002b82:	d101      	bne.n	8002b88 <__sflush_r+0x7c>
 8002b84:	682b      	ldr	r3, [r5, #0]
 8002b86:	b903      	cbnz	r3, 8002b8a <__sflush_r+0x7e>
 8002b88:	6560      	str	r0, [r4, #84]	; 0x54
 8002b8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b8c:	602f      	str	r7, [r5, #0]
 8002b8e:	2900      	cmp	r1, #0
 8002b90:	d0c9      	beq.n	8002b26 <__sflush_r+0x1a>
 8002b92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b96:	4299      	cmp	r1, r3
 8002b98:	d002      	beq.n	8002ba0 <__sflush_r+0x94>
 8002b9a:	4628      	mov	r0, r5
 8002b9c:	f7ff fd18 	bl	80025d0 <_free_r>
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	6360      	str	r0, [r4, #52]	; 0x34
 8002ba4:	e7c0      	b.n	8002b28 <__sflush_r+0x1c>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	4628      	mov	r0, r5
 8002baa:	47b0      	blx	r6
 8002bac:	1c41      	adds	r1, r0, #1
 8002bae:	d1c8      	bne.n	8002b42 <__sflush_r+0x36>
 8002bb0:	682b      	ldr	r3, [r5, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d0c5      	beq.n	8002b42 <__sflush_r+0x36>
 8002bb6:	2b1d      	cmp	r3, #29
 8002bb8:	d001      	beq.n	8002bbe <__sflush_r+0xb2>
 8002bba:	2b16      	cmp	r3, #22
 8002bbc:	d101      	bne.n	8002bc2 <__sflush_r+0xb6>
 8002bbe:	602f      	str	r7, [r5, #0]
 8002bc0:	e7b1      	b.n	8002b26 <__sflush_r+0x1a>
 8002bc2:	89a3      	ldrh	r3, [r4, #12]
 8002bc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bc8:	81a3      	strh	r3, [r4, #12]
 8002bca:	e7ad      	b.n	8002b28 <__sflush_r+0x1c>
 8002bcc:	690f      	ldr	r7, [r1, #16]
 8002bce:	2f00      	cmp	r7, #0
 8002bd0:	d0a9      	beq.n	8002b26 <__sflush_r+0x1a>
 8002bd2:	0793      	lsls	r3, r2, #30
 8002bd4:	680e      	ldr	r6, [r1, #0]
 8002bd6:	bf08      	it	eq
 8002bd8:	694b      	ldreq	r3, [r1, #20]
 8002bda:	600f      	str	r7, [r1, #0]
 8002bdc:	bf18      	it	ne
 8002bde:	2300      	movne	r3, #0
 8002be0:	eba6 0807 	sub.w	r8, r6, r7
 8002be4:	608b      	str	r3, [r1, #8]
 8002be6:	f1b8 0f00 	cmp.w	r8, #0
 8002bea:	dd9c      	ble.n	8002b26 <__sflush_r+0x1a>
 8002bec:	4643      	mov	r3, r8
 8002bee:	463a      	mov	r2, r7
 8002bf0:	6a21      	ldr	r1, [r4, #32]
 8002bf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002bf4:	4628      	mov	r0, r5
 8002bf6:	47b0      	blx	r6
 8002bf8:	2800      	cmp	r0, #0
 8002bfa:	dc06      	bgt.n	8002c0a <__sflush_r+0xfe>
 8002bfc:	89a3      	ldrh	r3, [r4, #12]
 8002bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c02:	81a3      	strh	r3, [r4, #12]
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c08:	e78e      	b.n	8002b28 <__sflush_r+0x1c>
 8002c0a:	4407      	add	r7, r0
 8002c0c:	eba8 0800 	sub.w	r8, r8, r0
 8002c10:	e7e9      	b.n	8002be6 <__sflush_r+0xda>
 8002c12:	bf00      	nop
 8002c14:	20400001 	.word	0x20400001

08002c18 <_fflush_r>:
 8002c18:	b538      	push	{r3, r4, r5, lr}
 8002c1a:	690b      	ldr	r3, [r1, #16]
 8002c1c:	4605      	mov	r5, r0
 8002c1e:	460c      	mov	r4, r1
 8002c20:	b1db      	cbz	r3, 8002c5a <_fflush_r+0x42>
 8002c22:	b118      	cbz	r0, 8002c2c <_fflush_r+0x14>
 8002c24:	6983      	ldr	r3, [r0, #24]
 8002c26:	b90b      	cbnz	r3, 8002c2c <_fflush_r+0x14>
 8002c28:	f7ff fc14 	bl	8002454 <__sinit>
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <_fflush_r+0x48>)
 8002c2e:	429c      	cmp	r4, r3
 8002c30:	d109      	bne.n	8002c46 <_fflush_r+0x2e>
 8002c32:	686c      	ldr	r4, [r5, #4]
 8002c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c38:	b17b      	cbz	r3, 8002c5a <_fflush_r+0x42>
 8002c3a:	4621      	mov	r1, r4
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c42:	f7ff bf63 	b.w	8002b0c <__sflush_r>
 8002c46:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <_fflush_r+0x4c>)
 8002c48:	429c      	cmp	r4, r3
 8002c4a:	d101      	bne.n	8002c50 <_fflush_r+0x38>
 8002c4c:	68ac      	ldr	r4, [r5, #8]
 8002c4e:	e7f1      	b.n	8002c34 <_fflush_r+0x1c>
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <_fflush_r+0x50>)
 8002c52:	429c      	cmp	r4, r3
 8002c54:	bf08      	it	eq
 8002c56:	68ec      	ldreq	r4, [r5, #12]
 8002c58:	e7ec      	b.n	8002c34 <_fflush_r+0x1c>
 8002c5a:	2000      	movs	r0, #0
 8002c5c:	bd38      	pop	{r3, r4, r5, pc}
 8002c5e:	bf00      	nop
 8002c60:	0800373c 	.word	0x0800373c
 8002c64:	0800375c 	.word	0x0800375c
 8002c68:	0800371c 	.word	0x0800371c

08002c6c <_lseek_r>:
 8002c6c:	b538      	push	{r3, r4, r5, lr}
 8002c6e:	4c07      	ldr	r4, [pc, #28]	; (8002c8c <_lseek_r+0x20>)
 8002c70:	4605      	mov	r5, r0
 8002c72:	4608      	mov	r0, r1
 8002c74:	4611      	mov	r1, r2
 8002c76:	2200      	movs	r2, #0
 8002c78:	6022      	str	r2, [r4, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f7ff f96d 	bl	8001f5a <_lseek>
 8002c80:	1c43      	adds	r3, r0, #1
 8002c82:	d102      	bne.n	8002c8a <_lseek_r+0x1e>
 8002c84:	6823      	ldr	r3, [r4, #0]
 8002c86:	b103      	cbz	r3, 8002c8a <_lseek_r+0x1e>
 8002c88:	602b      	str	r3, [r5, #0]
 8002c8a:	bd38      	pop	{r3, r4, r5, pc}
 8002c8c:	200001f4 	.word	0x200001f4

08002c90 <__swhatbuf_r>:
 8002c90:	b570      	push	{r4, r5, r6, lr}
 8002c92:	460e      	mov	r6, r1
 8002c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c98:	2900      	cmp	r1, #0
 8002c9a:	b096      	sub	sp, #88	; 0x58
 8002c9c:	4614      	mov	r4, r2
 8002c9e:	461d      	mov	r5, r3
 8002ca0:	da07      	bge.n	8002cb2 <__swhatbuf_r+0x22>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	602b      	str	r3, [r5, #0]
 8002ca6:	89b3      	ldrh	r3, [r6, #12]
 8002ca8:	061a      	lsls	r2, r3, #24
 8002caa:	d410      	bmi.n	8002cce <__swhatbuf_r+0x3e>
 8002cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cb0:	e00e      	b.n	8002cd0 <__swhatbuf_r+0x40>
 8002cb2:	466a      	mov	r2, sp
 8002cb4:	f000 fb2c 	bl	8003310 <_fstat_r>
 8002cb8:	2800      	cmp	r0, #0
 8002cba:	dbf2      	blt.n	8002ca2 <__swhatbuf_r+0x12>
 8002cbc:	9a01      	ldr	r2, [sp, #4]
 8002cbe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002cc2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002cc6:	425a      	negs	r2, r3
 8002cc8:	415a      	adcs	r2, r3
 8002cca:	602a      	str	r2, [r5, #0]
 8002ccc:	e7ee      	b.n	8002cac <__swhatbuf_r+0x1c>
 8002cce:	2340      	movs	r3, #64	; 0x40
 8002cd0:	2000      	movs	r0, #0
 8002cd2:	6023      	str	r3, [r4, #0]
 8002cd4:	b016      	add	sp, #88	; 0x58
 8002cd6:	bd70      	pop	{r4, r5, r6, pc}

08002cd8 <__smakebuf_r>:
 8002cd8:	898b      	ldrh	r3, [r1, #12]
 8002cda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002cdc:	079d      	lsls	r5, r3, #30
 8002cde:	4606      	mov	r6, r0
 8002ce0:	460c      	mov	r4, r1
 8002ce2:	d507      	bpl.n	8002cf4 <__smakebuf_r+0x1c>
 8002ce4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002ce8:	6023      	str	r3, [r4, #0]
 8002cea:	6123      	str	r3, [r4, #16]
 8002cec:	2301      	movs	r3, #1
 8002cee:	6163      	str	r3, [r4, #20]
 8002cf0:	b002      	add	sp, #8
 8002cf2:	bd70      	pop	{r4, r5, r6, pc}
 8002cf4:	ab01      	add	r3, sp, #4
 8002cf6:	466a      	mov	r2, sp
 8002cf8:	f7ff ffca 	bl	8002c90 <__swhatbuf_r>
 8002cfc:	9900      	ldr	r1, [sp, #0]
 8002cfe:	4605      	mov	r5, r0
 8002d00:	4630      	mov	r0, r6
 8002d02:	f7ff fcb3 	bl	800266c <_malloc_r>
 8002d06:	b948      	cbnz	r0, 8002d1c <__smakebuf_r+0x44>
 8002d08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d0c:	059a      	lsls	r2, r3, #22
 8002d0e:	d4ef      	bmi.n	8002cf0 <__smakebuf_r+0x18>
 8002d10:	f023 0303 	bic.w	r3, r3, #3
 8002d14:	f043 0302 	orr.w	r3, r3, #2
 8002d18:	81a3      	strh	r3, [r4, #12]
 8002d1a:	e7e3      	b.n	8002ce4 <__smakebuf_r+0xc>
 8002d1c:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <__smakebuf_r+0x7c>)
 8002d1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002d20:	89a3      	ldrh	r3, [r4, #12]
 8002d22:	6020      	str	r0, [r4, #0]
 8002d24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d28:	81a3      	strh	r3, [r4, #12]
 8002d2a:	9b00      	ldr	r3, [sp, #0]
 8002d2c:	6163      	str	r3, [r4, #20]
 8002d2e:	9b01      	ldr	r3, [sp, #4]
 8002d30:	6120      	str	r0, [r4, #16]
 8002d32:	b15b      	cbz	r3, 8002d4c <__smakebuf_r+0x74>
 8002d34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d38:	4630      	mov	r0, r6
 8002d3a:	f000 fafb 	bl	8003334 <_isatty_r>
 8002d3e:	b128      	cbz	r0, 8002d4c <__smakebuf_r+0x74>
 8002d40:	89a3      	ldrh	r3, [r4, #12]
 8002d42:	f023 0303 	bic.w	r3, r3, #3
 8002d46:	f043 0301 	orr.w	r3, r3, #1
 8002d4a:	81a3      	strh	r3, [r4, #12]
 8002d4c:	89a3      	ldrh	r3, [r4, #12]
 8002d4e:	431d      	orrs	r5, r3
 8002d50:	81a5      	strh	r5, [r4, #12]
 8002d52:	e7cd      	b.n	8002cf0 <__smakebuf_r+0x18>
 8002d54:	0800241d 	.word	0x0800241d

08002d58 <__malloc_lock>:
 8002d58:	4770      	bx	lr

08002d5a <__malloc_unlock>:
 8002d5a:	4770      	bx	lr

08002d5c <__sfputc_r>:
 8002d5c:	6893      	ldr	r3, [r2, #8]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	b410      	push	{r4}
 8002d64:	6093      	str	r3, [r2, #8]
 8002d66:	da08      	bge.n	8002d7a <__sfputc_r+0x1e>
 8002d68:	6994      	ldr	r4, [r2, #24]
 8002d6a:	42a3      	cmp	r3, r4
 8002d6c:	db01      	blt.n	8002d72 <__sfputc_r+0x16>
 8002d6e:	290a      	cmp	r1, #10
 8002d70:	d103      	bne.n	8002d7a <__sfputc_r+0x1e>
 8002d72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d76:	f7ff bde7 	b.w	8002948 <__swbuf_r>
 8002d7a:	6813      	ldr	r3, [r2, #0]
 8002d7c:	1c58      	adds	r0, r3, #1
 8002d7e:	6010      	str	r0, [r2, #0]
 8002d80:	7019      	strb	r1, [r3, #0]
 8002d82:	4608      	mov	r0, r1
 8002d84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d88:	4770      	bx	lr

08002d8a <__sfputs_r>:
 8002d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8c:	4606      	mov	r6, r0
 8002d8e:	460f      	mov	r7, r1
 8002d90:	4614      	mov	r4, r2
 8002d92:	18d5      	adds	r5, r2, r3
 8002d94:	42ac      	cmp	r4, r5
 8002d96:	d101      	bne.n	8002d9c <__sfputs_r+0x12>
 8002d98:	2000      	movs	r0, #0
 8002d9a:	e007      	b.n	8002dac <__sfputs_r+0x22>
 8002d9c:	463a      	mov	r2, r7
 8002d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002da2:	4630      	mov	r0, r6
 8002da4:	f7ff ffda 	bl	8002d5c <__sfputc_r>
 8002da8:	1c43      	adds	r3, r0, #1
 8002daa:	d1f3      	bne.n	8002d94 <__sfputs_r+0xa>
 8002dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002db0 <_vfiprintf_r>:
 8002db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db4:	460c      	mov	r4, r1
 8002db6:	b09d      	sub	sp, #116	; 0x74
 8002db8:	4617      	mov	r7, r2
 8002dba:	461d      	mov	r5, r3
 8002dbc:	4606      	mov	r6, r0
 8002dbe:	b118      	cbz	r0, 8002dc8 <_vfiprintf_r+0x18>
 8002dc0:	6983      	ldr	r3, [r0, #24]
 8002dc2:	b90b      	cbnz	r3, 8002dc8 <_vfiprintf_r+0x18>
 8002dc4:	f7ff fb46 	bl	8002454 <__sinit>
 8002dc8:	4b7c      	ldr	r3, [pc, #496]	; (8002fbc <_vfiprintf_r+0x20c>)
 8002dca:	429c      	cmp	r4, r3
 8002dcc:	d158      	bne.n	8002e80 <_vfiprintf_r+0xd0>
 8002dce:	6874      	ldr	r4, [r6, #4]
 8002dd0:	89a3      	ldrh	r3, [r4, #12]
 8002dd2:	0718      	lsls	r0, r3, #28
 8002dd4:	d55e      	bpl.n	8002e94 <_vfiprintf_r+0xe4>
 8002dd6:	6923      	ldr	r3, [r4, #16]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d05b      	beq.n	8002e94 <_vfiprintf_r+0xe4>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	9309      	str	r3, [sp, #36]	; 0x24
 8002de0:	2320      	movs	r3, #32
 8002de2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002de6:	2330      	movs	r3, #48	; 0x30
 8002de8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002dec:	9503      	str	r5, [sp, #12]
 8002dee:	f04f 0b01 	mov.w	fp, #1
 8002df2:	46b8      	mov	r8, r7
 8002df4:	4645      	mov	r5, r8
 8002df6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002dfa:	b10b      	cbz	r3, 8002e00 <_vfiprintf_r+0x50>
 8002dfc:	2b25      	cmp	r3, #37	; 0x25
 8002dfe:	d154      	bne.n	8002eaa <_vfiprintf_r+0xfa>
 8002e00:	ebb8 0a07 	subs.w	sl, r8, r7
 8002e04:	d00b      	beq.n	8002e1e <_vfiprintf_r+0x6e>
 8002e06:	4653      	mov	r3, sl
 8002e08:	463a      	mov	r2, r7
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	4630      	mov	r0, r6
 8002e0e:	f7ff ffbc 	bl	8002d8a <__sfputs_r>
 8002e12:	3001      	adds	r0, #1
 8002e14:	f000 80c2 	beq.w	8002f9c <_vfiprintf_r+0x1ec>
 8002e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e1a:	4453      	add	r3, sl
 8002e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8002e1e:	f898 3000 	ldrb.w	r3, [r8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f000 80ba 	beq.w	8002f9c <_vfiprintf_r+0x1ec>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002e32:	9304      	str	r3, [sp, #16]
 8002e34:	9307      	str	r3, [sp, #28]
 8002e36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002e3a:	931a      	str	r3, [sp, #104]	; 0x68
 8002e3c:	46a8      	mov	r8, r5
 8002e3e:	2205      	movs	r2, #5
 8002e40:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002e44:	485e      	ldr	r0, [pc, #376]	; (8002fc0 <_vfiprintf_r+0x210>)
 8002e46:	f7fd f9eb 	bl	8000220 <memchr>
 8002e4a:	9b04      	ldr	r3, [sp, #16]
 8002e4c:	bb78      	cbnz	r0, 8002eae <_vfiprintf_r+0xfe>
 8002e4e:	06d9      	lsls	r1, r3, #27
 8002e50:	bf44      	itt	mi
 8002e52:	2220      	movmi	r2, #32
 8002e54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002e58:	071a      	lsls	r2, r3, #28
 8002e5a:	bf44      	itt	mi
 8002e5c:	222b      	movmi	r2, #43	; 0x2b
 8002e5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002e62:	782a      	ldrb	r2, [r5, #0]
 8002e64:	2a2a      	cmp	r2, #42	; 0x2a
 8002e66:	d02a      	beq.n	8002ebe <_vfiprintf_r+0x10e>
 8002e68:	9a07      	ldr	r2, [sp, #28]
 8002e6a:	46a8      	mov	r8, r5
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	250a      	movs	r5, #10
 8002e70:	4641      	mov	r1, r8
 8002e72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e76:	3b30      	subs	r3, #48	; 0x30
 8002e78:	2b09      	cmp	r3, #9
 8002e7a:	d969      	bls.n	8002f50 <_vfiprintf_r+0x1a0>
 8002e7c:	b360      	cbz	r0, 8002ed8 <_vfiprintf_r+0x128>
 8002e7e:	e024      	b.n	8002eca <_vfiprintf_r+0x11a>
 8002e80:	4b50      	ldr	r3, [pc, #320]	; (8002fc4 <_vfiprintf_r+0x214>)
 8002e82:	429c      	cmp	r4, r3
 8002e84:	d101      	bne.n	8002e8a <_vfiprintf_r+0xda>
 8002e86:	68b4      	ldr	r4, [r6, #8]
 8002e88:	e7a2      	b.n	8002dd0 <_vfiprintf_r+0x20>
 8002e8a:	4b4f      	ldr	r3, [pc, #316]	; (8002fc8 <_vfiprintf_r+0x218>)
 8002e8c:	429c      	cmp	r4, r3
 8002e8e:	bf08      	it	eq
 8002e90:	68f4      	ldreq	r4, [r6, #12]
 8002e92:	e79d      	b.n	8002dd0 <_vfiprintf_r+0x20>
 8002e94:	4621      	mov	r1, r4
 8002e96:	4630      	mov	r0, r6
 8002e98:	f7ff fdba 	bl	8002a10 <__swsetup_r>
 8002e9c:	2800      	cmp	r0, #0
 8002e9e:	d09d      	beq.n	8002ddc <_vfiprintf_r+0x2c>
 8002ea0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ea4:	b01d      	add	sp, #116	; 0x74
 8002ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eaa:	46a8      	mov	r8, r5
 8002eac:	e7a2      	b.n	8002df4 <_vfiprintf_r+0x44>
 8002eae:	4a44      	ldr	r2, [pc, #272]	; (8002fc0 <_vfiprintf_r+0x210>)
 8002eb0:	1a80      	subs	r0, r0, r2
 8002eb2:	fa0b f000 	lsl.w	r0, fp, r0
 8002eb6:	4318      	orrs	r0, r3
 8002eb8:	9004      	str	r0, [sp, #16]
 8002eba:	4645      	mov	r5, r8
 8002ebc:	e7be      	b.n	8002e3c <_vfiprintf_r+0x8c>
 8002ebe:	9a03      	ldr	r2, [sp, #12]
 8002ec0:	1d11      	adds	r1, r2, #4
 8002ec2:	6812      	ldr	r2, [r2, #0]
 8002ec4:	9103      	str	r1, [sp, #12]
 8002ec6:	2a00      	cmp	r2, #0
 8002ec8:	db01      	blt.n	8002ece <_vfiprintf_r+0x11e>
 8002eca:	9207      	str	r2, [sp, #28]
 8002ecc:	e004      	b.n	8002ed8 <_vfiprintf_r+0x128>
 8002ece:	4252      	negs	r2, r2
 8002ed0:	f043 0302 	orr.w	r3, r3, #2
 8002ed4:	9207      	str	r2, [sp, #28]
 8002ed6:	9304      	str	r3, [sp, #16]
 8002ed8:	f898 3000 	ldrb.w	r3, [r8]
 8002edc:	2b2e      	cmp	r3, #46	; 0x2e
 8002ede:	d10e      	bne.n	8002efe <_vfiprintf_r+0x14e>
 8002ee0:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002ee4:	2b2a      	cmp	r3, #42	; 0x2a
 8002ee6:	d138      	bne.n	8002f5a <_vfiprintf_r+0x1aa>
 8002ee8:	9b03      	ldr	r3, [sp, #12]
 8002eea:	1d1a      	adds	r2, r3, #4
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	9203      	str	r2, [sp, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bfb8      	it	lt
 8002ef4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002ef8:	f108 0802 	add.w	r8, r8, #2
 8002efc:	9305      	str	r3, [sp, #20]
 8002efe:	4d33      	ldr	r5, [pc, #204]	; (8002fcc <_vfiprintf_r+0x21c>)
 8002f00:	f898 1000 	ldrb.w	r1, [r8]
 8002f04:	2203      	movs	r2, #3
 8002f06:	4628      	mov	r0, r5
 8002f08:	f7fd f98a 	bl	8000220 <memchr>
 8002f0c:	b140      	cbz	r0, 8002f20 <_vfiprintf_r+0x170>
 8002f0e:	2340      	movs	r3, #64	; 0x40
 8002f10:	1b40      	subs	r0, r0, r5
 8002f12:	fa03 f000 	lsl.w	r0, r3, r0
 8002f16:	9b04      	ldr	r3, [sp, #16]
 8002f18:	4303      	orrs	r3, r0
 8002f1a:	f108 0801 	add.w	r8, r8, #1
 8002f1e:	9304      	str	r3, [sp, #16]
 8002f20:	f898 1000 	ldrb.w	r1, [r8]
 8002f24:	482a      	ldr	r0, [pc, #168]	; (8002fd0 <_vfiprintf_r+0x220>)
 8002f26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002f2a:	2206      	movs	r2, #6
 8002f2c:	f108 0701 	add.w	r7, r8, #1
 8002f30:	f7fd f976 	bl	8000220 <memchr>
 8002f34:	2800      	cmp	r0, #0
 8002f36:	d037      	beq.n	8002fa8 <_vfiprintf_r+0x1f8>
 8002f38:	4b26      	ldr	r3, [pc, #152]	; (8002fd4 <_vfiprintf_r+0x224>)
 8002f3a:	bb1b      	cbnz	r3, 8002f84 <_vfiprintf_r+0x1d4>
 8002f3c:	9b03      	ldr	r3, [sp, #12]
 8002f3e:	3307      	adds	r3, #7
 8002f40:	f023 0307 	bic.w	r3, r3, #7
 8002f44:	3308      	adds	r3, #8
 8002f46:	9303      	str	r3, [sp, #12]
 8002f48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f4a:	444b      	add	r3, r9
 8002f4c:	9309      	str	r3, [sp, #36]	; 0x24
 8002f4e:	e750      	b.n	8002df2 <_vfiprintf_r+0x42>
 8002f50:	fb05 3202 	mla	r2, r5, r2, r3
 8002f54:	2001      	movs	r0, #1
 8002f56:	4688      	mov	r8, r1
 8002f58:	e78a      	b.n	8002e70 <_vfiprintf_r+0xc0>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f108 0801 	add.w	r8, r8, #1
 8002f60:	9305      	str	r3, [sp, #20]
 8002f62:	4619      	mov	r1, r3
 8002f64:	250a      	movs	r5, #10
 8002f66:	4640      	mov	r0, r8
 8002f68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f6c:	3a30      	subs	r2, #48	; 0x30
 8002f6e:	2a09      	cmp	r2, #9
 8002f70:	d903      	bls.n	8002f7a <_vfiprintf_r+0x1ca>
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0c3      	beq.n	8002efe <_vfiprintf_r+0x14e>
 8002f76:	9105      	str	r1, [sp, #20]
 8002f78:	e7c1      	b.n	8002efe <_vfiprintf_r+0x14e>
 8002f7a:	fb05 2101 	mla	r1, r5, r1, r2
 8002f7e:	2301      	movs	r3, #1
 8002f80:	4680      	mov	r8, r0
 8002f82:	e7f0      	b.n	8002f66 <_vfiprintf_r+0x1b6>
 8002f84:	ab03      	add	r3, sp, #12
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	4622      	mov	r2, r4
 8002f8a:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <_vfiprintf_r+0x228>)
 8002f8c:	a904      	add	r1, sp, #16
 8002f8e:	4630      	mov	r0, r6
 8002f90:	f3af 8000 	nop.w
 8002f94:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002f98:	4681      	mov	r9, r0
 8002f9a:	d1d5      	bne.n	8002f48 <_vfiprintf_r+0x198>
 8002f9c:	89a3      	ldrh	r3, [r4, #12]
 8002f9e:	065b      	lsls	r3, r3, #25
 8002fa0:	f53f af7e 	bmi.w	8002ea0 <_vfiprintf_r+0xf0>
 8002fa4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002fa6:	e77d      	b.n	8002ea4 <_vfiprintf_r+0xf4>
 8002fa8:	ab03      	add	r3, sp, #12
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	4622      	mov	r2, r4
 8002fae:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <_vfiprintf_r+0x228>)
 8002fb0:	a904      	add	r1, sp, #16
 8002fb2:	4630      	mov	r0, r6
 8002fb4:	f000 f888 	bl	80030c8 <_printf_i>
 8002fb8:	e7ec      	b.n	8002f94 <_vfiprintf_r+0x1e4>
 8002fba:	bf00      	nop
 8002fbc:	0800373c 	.word	0x0800373c
 8002fc0:	08003780 	.word	0x08003780
 8002fc4:	0800375c 	.word	0x0800375c
 8002fc8:	0800371c 	.word	0x0800371c
 8002fcc:	08003786 	.word	0x08003786
 8002fd0:	0800378a 	.word	0x0800378a
 8002fd4:	00000000 	.word	0x00000000
 8002fd8:	08002d8b 	.word	0x08002d8b

08002fdc <_printf_common>:
 8002fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fe0:	4691      	mov	r9, r2
 8002fe2:	461f      	mov	r7, r3
 8002fe4:	688a      	ldr	r2, [r1, #8]
 8002fe6:	690b      	ldr	r3, [r1, #16]
 8002fe8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fec:	4293      	cmp	r3, r2
 8002fee:	bfb8      	it	lt
 8002ff0:	4613      	movlt	r3, r2
 8002ff2:	f8c9 3000 	str.w	r3, [r9]
 8002ff6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002ffa:	4606      	mov	r6, r0
 8002ffc:	460c      	mov	r4, r1
 8002ffe:	b112      	cbz	r2, 8003006 <_printf_common+0x2a>
 8003000:	3301      	adds	r3, #1
 8003002:	f8c9 3000 	str.w	r3, [r9]
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	0699      	lsls	r1, r3, #26
 800300a:	bf42      	ittt	mi
 800300c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003010:	3302      	addmi	r3, #2
 8003012:	f8c9 3000 	strmi.w	r3, [r9]
 8003016:	6825      	ldr	r5, [r4, #0]
 8003018:	f015 0506 	ands.w	r5, r5, #6
 800301c:	d107      	bne.n	800302e <_printf_common+0x52>
 800301e:	f104 0a19 	add.w	sl, r4, #25
 8003022:	68e3      	ldr	r3, [r4, #12]
 8003024:	f8d9 2000 	ldr.w	r2, [r9]
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	42ab      	cmp	r3, r5
 800302c:	dc28      	bgt.n	8003080 <_printf_common+0xa4>
 800302e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003032:	6822      	ldr	r2, [r4, #0]
 8003034:	3300      	adds	r3, #0
 8003036:	bf18      	it	ne
 8003038:	2301      	movne	r3, #1
 800303a:	0692      	lsls	r2, r2, #26
 800303c:	d42d      	bmi.n	800309a <_printf_common+0xbe>
 800303e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003042:	4639      	mov	r1, r7
 8003044:	4630      	mov	r0, r6
 8003046:	47c0      	blx	r8
 8003048:	3001      	adds	r0, #1
 800304a:	d020      	beq.n	800308e <_printf_common+0xb2>
 800304c:	6823      	ldr	r3, [r4, #0]
 800304e:	68e5      	ldr	r5, [r4, #12]
 8003050:	f8d9 2000 	ldr.w	r2, [r9]
 8003054:	f003 0306 	and.w	r3, r3, #6
 8003058:	2b04      	cmp	r3, #4
 800305a:	bf08      	it	eq
 800305c:	1aad      	subeq	r5, r5, r2
 800305e:	68a3      	ldr	r3, [r4, #8]
 8003060:	6922      	ldr	r2, [r4, #16]
 8003062:	bf0c      	ite	eq
 8003064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003068:	2500      	movne	r5, #0
 800306a:	4293      	cmp	r3, r2
 800306c:	bfc4      	itt	gt
 800306e:	1a9b      	subgt	r3, r3, r2
 8003070:	18ed      	addgt	r5, r5, r3
 8003072:	f04f 0900 	mov.w	r9, #0
 8003076:	341a      	adds	r4, #26
 8003078:	454d      	cmp	r5, r9
 800307a:	d11a      	bne.n	80030b2 <_printf_common+0xd6>
 800307c:	2000      	movs	r0, #0
 800307e:	e008      	b.n	8003092 <_printf_common+0xb6>
 8003080:	2301      	movs	r3, #1
 8003082:	4652      	mov	r2, sl
 8003084:	4639      	mov	r1, r7
 8003086:	4630      	mov	r0, r6
 8003088:	47c0      	blx	r8
 800308a:	3001      	adds	r0, #1
 800308c:	d103      	bne.n	8003096 <_printf_common+0xba>
 800308e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003092:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003096:	3501      	adds	r5, #1
 8003098:	e7c3      	b.n	8003022 <_printf_common+0x46>
 800309a:	18e1      	adds	r1, r4, r3
 800309c:	1c5a      	adds	r2, r3, #1
 800309e:	2030      	movs	r0, #48	; 0x30
 80030a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80030a4:	4422      	add	r2, r4
 80030a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80030aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80030ae:	3302      	adds	r3, #2
 80030b0:	e7c5      	b.n	800303e <_printf_common+0x62>
 80030b2:	2301      	movs	r3, #1
 80030b4:	4622      	mov	r2, r4
 80030b6:	4639      	mov	r1, r7
 80030b8:	4630      	mov	r0, r6
 80030ba:	47c0      	blx	r8
 80030bc:	3001      	adds	r0, #1
 80030be:	d0e6      	beq.n	800308e <_printf_common+0xb2>
 80030c0:	f109 0901 	add.w	r9, r9, #1
 80030c4:	e7d8      	b.n	8003078 <_printf_common+0x9c>
	...

080030c8 <_printf_i>:
 80030c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80030d0:	460c      	mov	r4, r1
 80030d2:	7e09      	ldrb	r1, [r1, #24]
 80030d4:	b085      	sub	sp, #20
 80030d6:	296e      	cmp	r1, #110	; 0x6e
 80030d8:	4617      	mov	r7, r2
 80030da:	4606      	mov	r6, r0
 80030dc:	4698      	mov	r8, r3
 80030de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80030e0:	f000 80b3 	beq.w	800324a <_printf_i+0x182>
 80030e4:	d822      	bhi.n	800312c <_printf_i+0x64>
 80030e6:	2963      	cmp	r1, #99	; 0x63
 80030e8:	d036      	beq.n	8003158 <_printf_i+0x90>
 80030ea:	d80a      	bhi.n	8003102 <_printf_i+0x3a>
 80030ec:	2900      	cmp	r1, #0
 80030ee:	f000 80b9 	beq.w	8003264 <_printf_i+0x19c>
 80030f2:	2958      	cmp	r1, #88	; 0x58
 80030f4:	f000 8083 	beq.w	80031fe <_printf_i+0x136>
 80030f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003100:	e032      	b.n	8003168 <_printf_i+0xa0>
 8003102:	2964      	cmp	r1, #100	; 0x64
 8003104:	d001      	beq.n	800310a <_printf_i+0x42>
 8003106:	2969      	cmp	r1, #105	; 0x69
 8003108:	d1f6      	bne.n	80030f8 <_printf_i+0x30>
 800310a:	6820      	ldr	r0, [r4, #0]
 800310c:	6813      	ldr	r3, [r2, #0]
 800310e:	0605      	lsls	r5, r0, #24
 8003110:	f103 0104 	add.w	r1, r3, #4
 8003114:	d52a      	bpl.n	800316c <_printf_i+0xa4>
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6011      	str	r1, [r2, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	da03      	bge.n	8003126 <_printf_i+0x5e>
 800311e:	222d      	movs	r2, #45	; 0x2d
 8003120:	425b      	negs	r3, r3
 8003122:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003126:	486f      	ldr	r0, [pc, #444]	; (80032e4 <_printf_i+0x21c>)
 8003128:	220a      	movs	r2, #10
 800312a:	e039      	b.n	80031a0 <_printf_i+0xd8>
 800312c:	2973      	cmp	r1, #115	; 0x73
 800312e:	f000 809d 	beq.w	800326c <_printf_i+0x1a4>
 8003132:	d808      	bhi.n	8003146 <_printf_i+0x7e>
 8003134:	296f      	cmp	r1, #111	; 0x6f
 8003136:	d020      	beq.n	800317a <_printf_i+0xb2>
 8003138:	2970      	cmp	r1, #112	; 0x70
 800313a:	d1dd      	bne.n	80030f8 <_printf_i+0x30>
 800313c:	6823      	ldr	r3, [r4, #0]
 800313e:	f043 0320 	orr.w	r3, r3, #32
 8003142:	6023      	str	r3, [r4, #0]
 8003144:	e003      	b.n	800314e <_printf_i+0x86>
 8003146:	2975      	cmp	r1, #117	; 0x75
 8003148:	d017      	beq.n	800317a <_printf_i+0xb2>
 800314a:	2978      	cmp	r1, #120	; 0x78
 800314c:	d1d4      	bne.n	80030f8 <_printf_i+0x30>
 800314e:	2378      	movs	r3, #120	; 0x78
 8003150:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003154:	4864      	ldr	r0, [pc, #400]	; (80032e8 <_printf_i+0x220>)
 8003156:	e055      	b.n	8003204 <_printf_i+0x13c>
 8003158:	6813      	ldr	r3, [r2, #0]
 800315a:	1d19      	adds	r1, r3, #4
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	6011      	str	r1, [r2, #0]
 8003160:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003164:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003168:	2301      	movs	r3, #1
 800316a:	e08c      	b.n	8003286 <_printf_i+0x1be>
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6011      	str	r1, [r2, #0]
 8003170:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003174:	bf18      	it	ne
 8003176:	b21b      	sxthne	r3, r3
 8003178:	e7cf      	b.n	800311a <_printf_i+0x52>
 800317a:	6813      	ldr	r3, [r2, #0]
 800317c:	6825      	ldr	r5, [r4, #0]
 800317e:	1d18      	adds	r0, r3, #4
 8003180:	6010      	str	r0, [r2, #0]
 8003182:	0628      	lsls	r0, r5, #24
 8003184:	d501      	bpl.n	800318a <_printf_i+0xc2>
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	e002      	b.n	8003190 <_printf_i+0xc8>
 800318a:	0668      	lsls	r0, r5, #25
 800318c:	d5fb      	bpl.n	8003186 <_printf_i+0xbe>
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	4854      	ldr	r0, [pc, #336]	; (80032e4 <_printf_i+0x21c>)
 8003192:	296f      	cmp	r1, #111	; 0x6f
 8003194:	bf14      	ite	ne
 8003196:	220a      	movne	r2, #10
 8003198:	2208      	moveq	r2, #8
 800319a:	2100      	movs	r1, #0
 800319c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80031a0:	6865      	ldr	r5, [r4, #4]
 80031a2:	60a5      	str	r5, [r4, #8]
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	f2c0 8095 	blt.w	80032d4 <_printf_i+0x20c>
 80031aa:	6821      	ldr	r1, [r4, #0]
 80031ac:	f021 0104 	bic.w	r1, r1, #4
 80031b0:	6021      	str	r1, [r4, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d13d      	bne.n	8003232 <_printf_i+0x16a>
 80031b6:	2d00      	cmp	r5, #0
 80031b8:	f040 808e 	bne.w	80032d8 <_printf_i+0x210>
 80031bc:	4665      	mov	r5, ip
 80031be:	2a08      	cmp	r2, #8
 80031c0:	d10b      	bne.n	80031da <_printf_i+0x112>
 80031c2:	6823      	ldr	r3, [r4, #0]
 80031c4:	07db      	lsls	r3, r3, #31
 80031c6:	d508      	bpl.n	80031da <_printf_i+0x112>
 80031c8:	6923      	ldr	r3, [r4, #16]
 80031ca:	6862      	ldr	r2, [r4, #4]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	bfde      	ittt	le
 80031d0:	2330      	movle	r3, #48	; 0x30
 80031d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80031d6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80031da:	ebac 0305 	sub.w	r3, ip, r5
 80031de:	6123      	str	r3, [r4, #16]
 80031e0:	f8cd 8000 	str.w	r8, [sp]
 80031e4:	463b      	mov	r3, r7
 80031e6:	aa03      	add	r2, sp, #12
 80031e8:	4621      	mov	r1, r4
 80031ea:	4630      	mov	r0, r6
 80031ec:	f7ff fef6 	bl	8002fdc <_printf_common>
 80031f0:	3001      	adds	r0, #1
 80031f2:	d14d      	bne.n	8003290 <_printf_i+0x1c8>
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031f8:	b005      	add	sp, #20
 80031fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031fe:	4839      	ldr	r0, [pc, #228]	; (80032e4 <_printf_i+0x21c>)
 8003200:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003204:	6813      	ldr	r3, [r2, #0]
 8003206:	6821      	ldr	r1, [r4, #0]
 8003208:	1d1d      	adds	r5, r3, #4
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6015      	str	r5, [r2, #0]
 800320e:	060a      	lsls	r2, r1, #24
 8003210:	d50b      	bpl.n	800322a <_printf_i+0x162>
 8003212:	07ca      	lsls	r2, r1, #31
 8003214:	bf44      	itt	mi
 8003216:	f041 0120 	orrmi.w	r1, r1, #32
 800321a:	6021      	strmi	r1, [r4, #0]
 800321c:	b91b      	cbnz	r3, 8003226 <_printf_i+0x15e>
 800321e:	6822      	ldr	r2, [r4, #0]
 8003220:	f022 0220 	bic.w	r2, r2, #32
 8003224:	6022      	str	r2, [r4, #0]
 8003226:	2210      	movs	r2, #16
 8003228:	e7b7      	b.n	800319a <_printf_i+0xd2>
 800322a:	064d      	lsls	r5, r1, #25
 800322c:	bf48      	it	mi
 800322e:	b29b      	uxthmi	r3, r3
 8003230:	e7ef      	b.n	8003212 <_printf_i+0x14a>
 8003232:	4665      	mov	r5, ip
 8003234:	fbb3 f1f2 	udiv	r1, r3, r2
 8003238:	fb02 3311 	mls	r3, r2, r1, r3
 800323c:	5cc3      	ldrb	r3, [r0, r3]
 800323e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003242:	460b      	mov	r3, r1
 8003244:	2900      	cmp	r1, #0
 8003246:	d1f5      	bne.n	8003234 <_printf_i+0x16c>
 8003248:	e7b9      	b.n	80031be <_printf_i+0xf6>
 800324a:	6813      	ldr	r3, [r2, #0]
 800324c:	6825      	ldr	r5, [r4, #0]
 800324e:	6961      	ldr	r1, [r4, #20]
 8003250:	1d18      	adds	r0, r3, #4
 8003252:	6010      	str	r0, [r2, #0]
 8003254:	0628      	lsls	r0, r5, #24
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	d501      	bpl.n	800325e <_printf_i+0x196>
 800325a:	6019      	str	r1, [r3, #0]
 800325c:	e002      	b.n	8003264 <_printf_i+0x19c>
 800325e:	066a      	lsls	r2, r5, #25
 8003260:	d5fb      	bpl.n	800325a <_printf_i+0x192>
 8003262:	8019      	strh	r1, [r3, #0]
 8003264:	2300      	movs	r3, #0
 8003266:	6123      	str	r3, [r4, #16]
 8003268:	4665      	mov	r5, ip
 800326a:	e7b9      	b.n	80031e0 <_printf_i+0x118>
 800326c:	6813      	ldr	r3, [r2, #0]
 800326e:	1d19      	adds	r1, r3, #4
 8003270:	6011      	str	r1, [r2, #0]
 8003272:	681d      	ldr	r5, [r3, #0]
 8003274:	6862      	ldr	r2, [r4, #4]
 8003276:	2100      	movs	r1, #0
 8003278:	4628      	mov	r0, r5
 800327a:	f7fc ffd1 	bl	8000220 <memchr>
 800327e:	b108      	cbz	r0, 8003284 <_printf_i+0x1bc>
 8003280:	1b40      	subs	r0, r0, r5
 8003282:	6060      	str	r0, [r4, #4]
 8003284:	6863      	ldr	r3, [r4, #4]
 8003286:	6123      	str	r3, [r4, #16]
 8003288:	2300      	movs	r3, #0
 800328a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800328e:	e7a7      	b.n	80031e0 <_printf_i+0x118>
 8003290:	6923      	ldr	r3, [r4, #16]
 8003292:	462a      	mov	r2, r5
 8003294:	4639      	mov	r1, r7
 8003296:	4630      	mov	r0, r6
 8003298:	47c0      	blx	r8
 800329a:	3001      	adds	r0, #1
 800329c:	d0aa      	beq.n	80031f4 <_printf_i+0x12c>
 800329e:	6823      	ldr	r3, [r4, #0]
 80032a0:	079b      	lsls	r3, r3, #30
 80032a2:	d413      	bmi.n	80032cc <_printf_i+0x204>
 80032a4:	68e0      	ldr	r0, [r4, #12]
 80032a6:	9b03      	ldr	r3, [sp, #12]
 80032a8:	4298      	cmp	r0, r3
 80032aa:	bfb8      	it	lt
 80032ac:	4618      	movlt	r0, r3
 80032ae:	e7a3      	b.n	80031f8 <_printf_i+0x130>
 80032b0:	2301      	movs	r3, #1
 80032b2:	464a      	mov	r2, r9
 80032b4:	4639      	mov	r1, r7
 80032b6:	4630      	mov	r0, r6
 80032b8:	47c0      	blx	r8
 80032ba:	3001      	adds	r0, #1
 80032bc:	d09a      	beq.n	80031f4 <_printf_i+0x12c>
 80032be:	3501      	adds	r5, #1
 80032c0:	68e3      	ldr	r3, [r4, #12]
 80032c2:	9a03      	ldr	r2, [sp, #12]
 80032c4:	1a9b      	subs	r3, r3, r2
 80032c6:	42ab      	cmp	r3, r5
 80032c8:	dcf2      	bgt.n	80032b0 <_printf_i+0x1e8>
 80032ca:	e7eb      	b.n	80032a4 <_printf_i+0x1dc>
 80032cc:	2500      	movs	r5, #0
 80032ce:	f104 0919 	add.w	r9, r4, #25
 80032d2:	e7f5      	b.n	80032c0 <_printf_i+0x1f8>
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d1ac      	bne.n	8003232 <_printf_i+0x16a>
 80032d8:	7803      	ldrb	r3, [r0, #0]
 80032da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032e2:	e76c      	b.n	80031be <_printf_i+0xf6>
 80032e4:	08003791 	.word	0x08003791
 80032e8:	080037a2 	.word	0x080037a2

080032ec <_read_r>:
 80032ec:	b538      	push	{r3, r4, r5, lr}
 80032ee:	4c07      	ldr	r4, [pc, #28]	; (800330c <_read_r+0x20>)
 80032f0:	4605      	mov	r5, r0
 80032f2:	4608      	mov	r0, r1
 80032f4:	4611      	mov	r1, r2
 80032f6:	2200      	movs	r2, #0
 80032f8:	6022      	str	r2, [r4, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	f7fe fdd6 	bl	8001eac <_read>
 8003300:	1c43      	adds	r3, r0, #1
 8003302:	d102      	bne.n	800330a <_read_r+0x1e>
 8003304:	6823      	ldr	r3, [r4, #0]
 8003306:	b103      	cbz	r3, 800330a <_read_r+0x1e>
 8003308:	602b      	str	r3, [r5, #0]
 800330a:	bd38      	pop	{r3, r4, r5, pc}
 800330c:	200001f4 	.word	0x200001f4

08003310 <_fstat_r>:
 8003310:	b538      	push	{r3, r4, r5, lr}
 8003312:	4c07      	ldr	r4, [pc, #28]	; (8003330 <_fstat_r+0x20>)
 8003314:	2300      	movs	r3, #0
 8003316:	4605      	mov	r5, r0
 8003318:	4608      	mov	r0, r1
 800331a:	4611      	mov	r1, r2
 800331c:	6023      	str	r3, [r4, #0]
 800331e:	f7fe feca 	bl	80020b6 <_fstat>
 8003322:	1c43      	adds	r3, r0, #1
 8003324:	d102      	bne.n	800332c <_fstat_r+0x1c>
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	b103      	cbz	r3, 800332c <_fstat_r+0x1c>
 800332a:	602b      	str	r3, [r5, #0]
 800332c:	bd38      	pop	{r3, r4, r5, pc}
 800332e:	bf00      	nop
 8003330:	200001f4 	.word	0x200001f4

08003334 <_isatty_r>:
 8003334:	b538      	push	{r3, r4, r5, lr}
 8003336:	4c06      	ldr	r4, [pc, #24]	; (8003350 <_isatty_r+0x1c>)
 8003338:	2300      	movs	r3, #0
 800333a:	4605      	mov	r5, r0
 800333c:	4608      	mov	r0, r1
 800333e:	6023      	str	r3, [r4, #0]
 8003340:	f7ff f81e 	bl	8002380 <_isatty>
 8003344:	1c43      	adds	r3, r0, #1
 8003346:	d102      	bne.n	800334e <_isatty_r+0x1a>
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	b103      	cbz	r3, 800334e <_isatty_r+0x1a>
 800334c:	602b      	str	r3, [r5, #0]
 800334e:	bd38      	pop	{r3, r4, r5, pc}
 8003350:	200001f4 	.word	0x200001f4

08003354 <_kill>:
 8003354:	4b02      	ldr	r3, [pc, #8]	; (8003360 <_kill+0xc>)
 8003356:	2258      	movs	r2, #88	; 0x58
 8003358:	601a      	str	r2, [r3, #0]
 800335a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800335e:	4770      	bx	lr
 8003360:	200001f4 	.word	0x200001f4

08003364 <_exit>:
 8003364:	e7fe      	b.n	8003364 <_exit>
	...

08003368 <_init>:
 8003368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800336a:	bf00      	nop
 800336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336e:	bc08      	pop	{r3}
 8003370:	469e      	mov	lr, r3
 8003372:	4770      	bx	lr

08003374 <_fini>:
 8003374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003376:	bf00      	nop
 8003378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800337a:	bc08      	pop	{r3}
 800337c:	469e      	mov	lr, r3
 800337e:	4770      	bx	lr
