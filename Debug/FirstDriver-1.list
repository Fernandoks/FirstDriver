
FirstDriver-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000910  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ad4  08000adc  00010adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ad4  08000ad4  00010adc  2**0
                  CONTENTS
  4 .ARM          00000000  08000ad4  08000ad4  00010adc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ad4  08000adc  00010adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ad4  08000ad4  00010ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ad8  08000ad8  00010ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000adc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  20000020  08000adc  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010adc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000f41  00000000  00000000  00010b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000003f4  00000000  00000000  00011a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000108  00000000  00000000  00011e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000d0  00000000  00000000  00011f50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000150f  00000000  00000000  00012020  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000ee1  00000000  00000000  0001352f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00005faf  00000000  00000000  00014410  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001a3bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000031c  00000000  00000000  0001a43c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000abc 	.word	0x08000abc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000abc 	.word	0x08000abc

08000204 <SysTickInit>:

volatile uint32_t ticks;


void SysTickInit (void)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
	//Enable Systick
	uint32_t temp = 0;
 800020a:	2300      	movs	r3, #0
 800020c:	60bb      	str	r3, [r7, #8]
	uint32_t clock = 0;
 800020e:	2300      	movs	r3, #0
 8000210:	60fb      	str	r3, [r7, #12]


	temp |= (3ul << 0U); // Enable counter and Exception
 8000212:	68bb      	ldr	r3, [r7, #8]
 8000214:	f043 0303 	orr.w	r3, r3, #3
 8000218:	60bb      	str	r3, [r7, #8]
	temp |= (1ul << 1U); // 1 for internal clock, 0 for external
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	f043 0302 	orr.w	r3, r3, #2
 8000220:	60bb      	str	r3, [r7, #8]
	*SYST_CSR |= temp;
 8000222:	4b0f      	ldr	r3, [pc, #60]	; (8000260 <SysTickInit+0x5c>)
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	490e      	ldr	r1, [pc, #56]	; (8000260 <SysTickInit+0x5c>)
 8000228:	68bb      	ldr	r3, [r7, #8]
 800022a:	4313      	orrs	r3, r2
 800022c:	600b      	str	r3, [r1, #0]

	//get Clock

	RCC_RegDef_t* pRCC = RCC;
 800022e:	4b0d      	ldr	r3, [pc, #52]	; (8000264 <SysTickInit+0x60>)
 8000230:	607b      	str	r3, [r7, #4]

	if ( (pRCC->CR & (1ul << 0U)) == RESET  )
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	f003 0301 	and.w	r3, r3, #1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SysTickInit+0x3e>
		//HSE
	}
	else
	{
		//clock = ( ((pRCC->CR) & (0xFF << 8U) ) >> 8U ) ; //bit 8 to 15 are HSI cal//HSI
		clock = 16000000; //bit 8 to 15 are HSI cal//HSI
 800023e:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <SysTickInit+0x64>)
 8000240:	60fb      	str	r3, [r7, #12]
	}

	//set systick counter to interrupt each ms
	*SYST_RVR = ((clock/(1000*2))-1);
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	4a09      	ldr	r2, [pc, #36]	; (800026c <SysTickInit+0x68>)
 8000246:	fba2 2303 	umull	r2, r3, r2, r3
 800024a:	09db      	lsrs	r3, r3, #7
 800024c:	4a08      	ldr	r2, [pc, #32]	; (8000270 <SysTickInit+0x6c>)
 800024e:	3b01      	subs	r3, #1
 8000250:	6013      	str	r3, [r2, #0]



}
 8000252:	bf00      	nop
 8000254:	3714      	adds	r7, #20
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	e000e010 	.word	0xe000e010
 8000264:	40023800 	.word	0x40023800
 8000268:	00f42400 	.word	0x00f42400
 800026c:	10624dd3 	.word	0x10624dd3
 8000270:	e000e014 	.word	0xe000e014

08000274 <SysTick_Handler>:


void SysTick_Handler (void)
 {
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
   ticks++;
 8000278:	4b04      	ldr	r3, [pc, #16]	; (800028c <SysTick_Handler+0x18>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	4a03      	ldr	r2, [pc, #12]	; (800028c <SysTick_Handler+0x18>)
 8000280:	6013      	str	r3, [r2, #0]
 }
 8000282:	bf00      	nop
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	2000001c 	.word	0x2000001c

08000290 <millis>:


inline uint32_t millis (void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
   return ticks;
 8000294:	4b03      	ldr	r3, [pc, #12]	; (80002a4 <millis+0x14>)
 8000296:	681b      	ldr	r3, [r3, #0]
}
 8000298:	4618      	mov	r0, r3
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	2000001c 	.word	0x2000001c

080002a8 <delay_ms>:




void delay_ms (uint32_t t)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  uint32_t start, end;
  start = millis();
 80002b0:	f7ff ffee 	bl	8000290 <millis>
 80002b4:	60f8      	str	r0, [r7, #12]
  end = start + t;
 80002b6:	68fa      	ldr	r2, [r7, #12]
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	4413      	add	r3, r2
 80002bc:	60bb      	str	r3, [r7, #8]
  if (start < end) {
 80002be:	68fa      	ldr	r2, [r7, #12]
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	429a      	cmp	r2, r3
 80002c4:	d20d      	bcs.n	80002e2 <delay_ms+0x3a>
  	while ((millis() >= start) && (millis() < end)) {
 80002c6:	bf00      	nop
 80002c8:	f7ff ffe2 	bl	8000290 <millis>
 80002cc:	4602      	mov	r2, r0
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d813      	bhi.n	80002fc <delay_ms+0x54>
 80002d4:	f7ff ffdc 	bl	8000290 <millis>
 80002d8:	4602      	mov	r2, r0
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	4293      	cmp	r3, r2
 80002de:	d8f3      	bhi.n	80002c8 <delay_ms+0x20>
      // do nothing
    };
  }


}
 80002e0:	e00c      	b.n	80002fc <delay_ms+0x54>
    while ((millis() >= start) || (millis() < end)) {
 80002e2:	bf00      	nop
 80002e4:	f7ff ffd4 	bl	8000290 <millis>
 80002e8:	4602      	mov	r2, r0
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d9f9      	bls.n	80002e4 <delay_ms+0x3c>
 80002f0:	f7ff ffce 	bl	8000290 <millis>
 80002f4:	4602      	mov	r2, r0
 80002f6:	68bb      	ldr	r3, [r7, #8]
 80002f8:	4293      	cmp	r3, r2
 80002fa:	d8f3      	bhi.n	80002e4 <delay_ms+0x3c>
}
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}

08000304 <GPIO_PeriClockControl>:
 * @Param2:					Enable or Disable macro
 * @Return:					-
 * @Note:					-
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnableDisable){
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	460b      	mov	r3, r1
 800030e:	70fb      	strb	r3, [r7, #3]

	if (EnableDisable == ENABLE){
 8000310:	78fb      	ldrb	r3, [r7, #3]
 8000312:	2b01      	cmp	r3, #1
 8000314:	d14c      	bne.n	80003b0 <GPIO_PeriClockControl+0xac>
		if(pGPIOx == GPIOA){
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4a4e      	ldr	r2, [pc, #312]	; (8000454 <GPIO_PeriClockControl+0x150>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d106      	bne.n	800032c <GPIO_PeriClockControl+0x28>
			GPIOA_PCLK_EN();
 800031e:	4b4e      	ldr	r3, [pc, #312]	; (8000458 <GPIO_PeriClockControl+0x154>)
 8000320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000322:	4a4d      	ldr	r2, [pc, #308]	; (8000458 <GPIO_PeriClockControl+0x154>)
 8000324:	f043 0301 	orr.w	r3, r3, #1
 8000328:	6313      	str	r3, [r2, #48]	; 0x30
		else if (pGPIOx == GPIOH){
			GPIOH_PCLK_DI();
		}

	}
}
 800032a:	e08d      	b.n	8000448 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOB){
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4a4b      	ldr	r2, [pc, #300]	; (800045c <GPIO_PeriClockControl+0x158>)
 8000330:	4293      	cmp	r3, r2
 8000332:	d106      	bne.n	8000342 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000334:	4b48      	ldr	r3, [pc, #288]	; (8000458 <GPIO_PeriClockControl+0x154>)
 8000336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000338:	4a47      	ldr	r2, [pc, #284]	; (8000458 <GPIO_PeriClockControl+0x154>)
 800033a:	f043 0302 	orr.w	r3, r3, #2
 800033e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000340:	e082      	b.n	8000448 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOC){
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	4a46      	ldr	r2, [pc, #280]	; (8000460 <GPIO_PeriClockControl+0x15c>)
 8000346:	4293      	cmp	r3, r2
 8000348:	d106      	bne.n	8000358 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800034a:	4b43      	ldr	r3, [pc, #268]	; (8000458 <GPIO_PeriClockControl+0x154>)
 800034c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034e:	4a42      	ldr	r2, [pc, #264]	; (8000458 <GPIO_PeriClockControl+0x154>)
 8000350:	f043 0304 	orr.w	r3, r3, #4
 8000354:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000356:	e077      	b.n	8000448 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOD){
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a42      	ldr	r2, [pc, #264]	; (8000464 <GPIO_PeriClockControl+0x160>)
 800035c:	4293      	cmp	r3, r2
 800035e:	d106      	bne.n	800036e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000360:	4b3d      	ldr	r3, [pc, #244]	; (8000458 <GPIO_PeriClockControl+0x154>)
 8000362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000364:	4a3c      	ldr	r2, [pc, #240]	; (8000458 <GPIO_PeriClockControl+0x154>)
 8000366:	f043 0308 	orr.w	r3, r3, #8
 800036a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036c:	e06c      	b.n	8000448 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOE){
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a3d      	ldr	r2, [pc, #244]	; (8000468 <GPIO_PeriClockControl+0x164>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000376:	4b38      	ldr	r3, [pc, #224]	; (8000458 <GPIO_PeriClockControl+0x154>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037a:	4a37      	ldr	r2, [pc, #220]	; (8000458 <GPIO_PeriClockControl+0x154>)
 800037c:	f043 0310 	orr.w	r3, r3, #16
 8000380:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000382:	e061      	b.n	8000448 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOF){
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4a39      	ldr	r2, [pc, #228]	; (800046c <GPIO_PeriClockControl+0x168>)
 8000388:	4293      	cmp	r3, r2
 800038a:	d106      	bne.n	800039a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800038c:	4b32      	ldr	r3, [pc, #200]	; (8000458 <GPIO_PeriClockControl+0x154>)
 800038e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000390:	4a31      	ldr	r2, [pc, #196]	; (8000458 <GPIO_PeriClockControl+0x154>)
 8000392:	f043 0320 	orr.w	r3, r3, #32
 8000396:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000398:	e056      	b.n	8000448 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOH){
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	4a2d      	ldr	r2, [pc, #180]	; (8000454 <GPIO_PeriClockControl+0x150>)
 800039e:	4293      	cmp	r3, r2
 80003a0:	d152      	bne.n	8000448 <GPIO_PeriClockControl+0x144>
			GPIOH_PCLK_EN();
 80003a2:	4b2d      	ldr	r3, [pc, #180]	; (8000458 <GPIO_PeriClockControl+0x154>)
 80003a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a6:	4a2c      	ldr	r2, [pc, #176]	; (8000458 <GPIO_PeriClockControl+0x154>)
 80003a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ae:	e04b      	b.n	8000448 <GPIO_PeriClockControl+0x144>
		if(pGPIOx == GPIOA){
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4a28      	ldr	r2, [pc, #160]	; (8000454 <GPIO_PeriClockControl+0x150>)
 80003b4:	4293      	cmp	r3, r2
 80003b6:	d106      	bne.n	80003c6 <GPIO_PeriClockControl+0xc2>
			GPIOA_PCLK_DI();
 80003b8:	4b27      	ldr	r3, [pc, #156]	; (8000458 <GPIO_PeriClockControl+0x154>)
 80003ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003bc:	4a26      	ldr	r2, [pc, #152]	; (8000458 <GPIO_PeriClockControl+0x154>)
 80003be:	f023 0301 	bic.w	r3, r3, #1
 80003c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c4:	e040      	b.n	8000448 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOB){
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4a24      	ldr	r2, [pc, #144]	; (800045c <GPIO_PeriClockControl+0x158>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d106      	bne.n	80003dc <GPIO_PeriClockControl+0xd8>
			GPIOB_PCLK_DI();
 80003ce:	4b22      	ldr	r3, [pc, #136]	; (8000458 <GPIO_PeriClockControl+0x154>)
 80003d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d2:	4a21      	ldr	r2, [pc, #132]	; (8000458 <GPIO_PeriClockControl+0x154>)
 80003d4:	f023 0304 	bic.w	r3, r3, #4
 80003d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003da:	e035      	b.n	8000448 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOC){
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	4a20      	ldr	r2, [pc, #128]	; (8000460 <GPIO_PeriClockControl+0x15c>)
 80003e0:	4293      	cmp	r3, r2
 80003e2:	d106      	bne.n	80003f2 <GPIO_PeriClockControl+0xee>
			GPIOC_PCLK_DI();
 80003e4:	4b1c      	ldr	r3, [pc, #112]	; (8000458 <GPIO_PeriClockControl+0x154>)
 80003e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e8:	4a1b      	ldr	r2, [pc, #108]	; (8000458 <GPIO_PeriClockControl+0x154>)
 80003ea:	f023 0308 	bic.w	r3, r3, #8
 80003ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f0:	e02a      	b.n	8000448 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOD){
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	4a1b      	ldr	r2, [pc, #108]	; (8000464 <GPIO_PeriClockControl+0x160>)
 80003f6:	4293      	cmp	r3, r2
 80003f8:	d106      	bne.n	8000408 <GPIO_PeriClockControl+0x104>
			GPIOD_PCLK_DI();
 80003fa:	4b17      	ldr	r3, [pc, #92]	; (8000458 <GPIO_PeriClockControl+0x154>)
 80003fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003fe:	4a16      	ldr	r2, [pc, #88]	; (8000458 <GPIO_PeriClockControl+0x154>)
 8000400:	f023 0310 	bic.w	r3, r3, #16
 8000404:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000406:	e01f      	b.n	8000448 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOE){
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	4a17      	ldr	r2, [pc, #92]	; (8000468 <GPIO_PeriClockControl+0x164>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d106      	bne.n	800041e <GPIO_PeriClockControl+0x11a>
			GPIOE_PCLK_DI();
 8000410:	4b11      	ldr	r3, [pc, #68]	; (8000458 <GPIO_PeriClockControl+0x154>)
 8000412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000414:	4a10      	ldr	r2, [pc, #64]	; (8000458 <GPIO_PeriClockControl+0x154>)
 8000416:	f023 0320 	bic.w	r3, r3, #32
 800041a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041c:	e014      	b.n	8000448 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOF){
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	4a12      	ldr	r2, [pc, #72]	; (800046c <GPIO_PeriClockControl+0x168>)
 8000422:	4293      	cmp	r3, r2
 8000424:	d106      	bne.n	8000434 <GPIO_PeriClockControl+0x130>
			GPIOF_PCLK_DI();
 8000426:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <GPIO_PeriClockControl+0x154>)
 8000428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042a:	4a0b      	ldr	r2, [pc, #44]	; (8000458 <GPIO_PeriClockControl+0x154>)
 800042c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000430:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000432:	e009      	b.n	8000448 <GPIO_PeriClockControl+0x144>
		else if (pGPIOx == GPIOH){
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	4a07      	ldr	r2, [pc, #28]	; (8000454 <GPIO_PeriClockControl+0x150>)
 8000438:	4293      	cmp	r3, r2
 800043a:	d105      	bne.n	8000448 <GPIO_PeriClockControl+0x144>
			GPIOH_PCLK_DI();
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <GPIO_PeriClockControl+0x154>)
 800043e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000440:	4a05      	ldr	r2, [pc, #20]	; (8000458 <GPIO_PeriClockControl+0x154>)
 8000442:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000446:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr
 8000454:	40020000 	.word	0x40020000
 8000458:	40023800 	.word	0x40023800
 800045c:	40020400 	.word	0x40020400
 8000460:	40020800 	.word	0x40020800
 8000464:	40020c00 	.word	0x40020c00
 8000468:	40021000 	.word	0x40021000
 800046c:	40021400 	.word	0x40021400

08000470 <GPIO_Init>:
 * @Return:					-
 * @Note:					-
 */


void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]


	uint32_t temp = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	60fb      	str	r3, [r7, #12]
	//Configure the mode
	//This first line tests if this is a interruption mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	795b      	ldrb	r3, [r3, #5]
 8000480:	2b03      	cmp	r3, #3
 8000482:	d818      	bhi.n	80004b6 <GPIO_Init+0x46>
	{
		pGPIOHandle->pGPIOX->MODER |= ( (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode )<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Moder uses 2 bit for each position
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	681a      	ldr	r2, [r3, #0]
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	795b      	ldrb	r3, [r3, #5]
 800048e:	4619      	mov	r1, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	791b      	ldrb	r3, [r3, #4]
 8000494:	005b      	lsls	r3, r3, #1
 8000496:	fa01 f303 	lsl.w	r3, r1, r3
 800049a:	4619      	mov	r1, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	430a      	orrs	r2, r1
 80004a2:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOX->MODER |= temp;
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	6819      	ldr	r1, [r3, #0]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	430a      	orrs	r2, r1
 80004b2:	601a      	str	r2, [r3, #0]
 80004b4:	e0af      	b.n	8000616 <GPIO_Init+0x1a6>
	}
	else
	{
		/* Interrupt Mode*/
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	795b      	ldrb	r3, [r3, #5]
 80004ba:	2b05      	cmp	r3, #5
 80004bc:	d117      	bne.n	80004ee <GPIO_Init+0x7e>
		{
			//1.Configure FTSR and clear RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //SET FTSR
 80004be:	4b9a      	ldr	r3, [pc, #616]	; (8000728 <GPIO_Init+0x2b8>)
 80004c0:	68db      	ldr	r3, [r3, #12]
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	7912      	ldrb	r2, [r2, #4]
 80004c6:	4611      	mov	r1, r2
 80004c8:	2201      	movs	r2, #1
 80004ca:	408a      	lsls	r2, r1
 80004cc:	4611      	mov	r1, r2
 80004ce:	4a96      	ldr	r2, [pc, #600]	; (8000728 <GPIO_Init+0x2b8>)
 80004d0:	430b      	orrs	r3, r1
 80004d2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //RESET RTSR
 80004d4:	4b94      	ldr	r3, [pc, #592]	; (8000728 <GPIO_Init+0x2b8>)
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	687a      	ldr	r2, [r7, #4]
 80004da:	7912      	ldrb	r2, [r2, #4]
 80004dc:	4611      	mov	r1, r2
 80004de:	2201      	movs	r2, #1
 80004e0:	408a      	lsls	r2, r1
 80004e2:	43d2      	mvns	r2, r2
 80004e4:	4611      	mov	r1, r2
 80004e6:	4a90      	ldr	r2, [pc, #576]	; (8000728 <GPIO_Init+0x2b8>)
 80004e8:	400b      	ands	r3, r1
 80004ea:	6093      	str	r3, [r2, #8]
 80004ec:	e035      	b.n	800055a <GPIO_Init+0xea>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	795b      	ldrb	r3, [r3, #5]
 80004f2:	2b04      	cmp	r3, #4
 80004f4:	d117      	bne.n	8000526 <GPIO_Init+0xb6>
		{
			//1.Configure RTSR and clear FTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //SET RTSR
 80004f6:	4b8c      	ldr	r3, [pc, #560]	; (8000728 <GPIO_Init+0x2b8>)
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	7912      	ldrb	r2, [r2, #4]
 80004fe:	4611      	mov	r1, r2
 8000500:	2201      	movs	r2, #1
 8000502:	408a      	lsls	r2, r1
 8000504:	4611      	mov	r1, r2
 8000506:	4a88      	ldr	r2, [pc, #544]	; (8000728 <GPIO_Init+0x2b8>)
 8000508:	430b      	orrs	r3, r1
 800050a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //RESET FTSR
 800050c:	4b86      	ldr	r3, [pc, #536]	; (8000728 <GPIO_Init+0x2b8>)
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	7912      	ldrb	r2, [r2, #4]
 8000514:	4611      	mov	r1, r2
 8000516:	2201      	movs	r2, #1
 8000518:	408a      	lsls	r2, r1
 800051a:	43d2      	mvns	r2, r2
 800051c:	4611      	mov	r1, r2
 800051e:	4a82      	ldr	r2, [pc, #520]	; (8000728 <GPIO_Init+0x2b8>)
 8000520:	400b      	ands	r3, r1
 8000522:	60d3      	str	r3, [r2, #12]
 8000524:	e019      	b.n	800055a <GPIO_Init+0xea>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	795b      	ldrb	r3, [r3, #5]
 800052a:	2b06      	cmp	r3, #6
 800052c:	d115      	bne.n	800055a <GPIO_Init+0xea>
		{
			//1.configure FTSR and RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //SET RTSR
 800052e:	4b7e      	ldr	r3, [pc, #504]	; (8000728 <GPIO_Init+0x2b8>)
 8000530:	689b      	ldr	r3, [r3, #8]
 8000532:	687a      	ldr	r2, [r7, #4]
 8000534:	7912      	ldrb	r2, [r2, #4]
 8000536:	4611      	mov	r1, r2
 8000538:	2201      	movs	r2, #1
 800053a:	408a      	lsls	r2, r1
 800053c:	4611      	mov	r1, r2
 800053e:	4a7a      	ldr	r2, [pc, #488]	; (8000728 <GPIO_Init+0x2b8>)
 8000540:	430b      	orrs	r3, r1
 8000542:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //SET FTSR
 8000544:	4b78      	ldr	r3, [pc, #480]	; (8000728 <GPIO_Init+0x2b8>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	7912      	ldrb	r2, [r2, #4]
 800054c:	4611      	mov	r1, r2
 800054e:	2201      	movs	r2, #1
 8000550:	408a      	lsls	r2, r1
 8000552:	4611      	mov	r1, r2
 8000554:	4a74      	ldr	r2, [pc, #464]	; (8000728 <GPIO_Init+0x2b8>)
 8000556:	430b      	orrs	r3, r1
 8000558:	60d3      	str	r3, [r2, #12]
		}
		//2. Configure the GPIO port in the SYSCFG_EXTICR
		uint8_t temp1 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4); //The division by 4 will identify each EXTICR register to use - 4 because each register uses 4 bits
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	791b      	ldrb	r3, [r3, #4]
 800055e:	089b      	lsrs	r3, r3, #2
 8000560:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4); //This will identify the position in the register
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	791b      	ldrb	r3, [r3, #4]
 8000566:	f003 0303 	and.w	r3, r3, #3
 800056a:	72bb      	strb	r3, [r7, #10]
		uint8_t portcode = GPIO_BASEADDR_TO_PORT(pGPIOHandle->pGPIOX);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a6e      	ldr	r2, [pc, #440]	; (800072c <GPIO_Init+0x2bc>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d032      	beq.n	80005dc <GPIO_Init+0x16c>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a6d      	ldr	r2, [pc, #436]	; (8000730 <GPIO_Init+0x2c0>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d02b      	beq.n	80005d8 <GPIO_Init+0x168>
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a6b      	ldr	r2, [pc, #428]	; (8000734 <GPIO_Init+0x2c4>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d024      	beq.n	80005d4 <GPIO_Init+0x164>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a6a      	ldr	r2, [pc, #424]	; (8000738 <GPIO_Init+0x2c8>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d01d      	beq.n	80005d0 <GPIO_Init+0x160>
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a68      	ldr	r2, [pc, #416]	; (800073c <GPIO_Init+0x2cc>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d016      	beq.n	80005cc <GPIO_Init+0x15c>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a67      	ldr	r2, [pc, #412]	; (8000740 <GPIO_Init+0x2d0>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d00f      	beq.n	80005c8 <GPIO_Init+0x158>
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a65      	ldr	r2, [pc, #404]	; (8000744 <GPIO_Init+0x2d4>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d008      	beq.n	80005c4 <GPIO_Init+0x154>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a5d      	ldr	r2, [pc, #372]	; (800072c <GPIO_Init+0x2bc>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d101      	bne.n	80005c0 <GPIO_Init+0x150>
 80005bc:	2307      	movs	r3, #7
 80005be:	e00e      	b.n	80005de <GPIO_Init+0x16e>
 80005c0:	2300      	movs	r3, #0
 80005c2:	e00c      	b.n	80005de <GPIO_Init+0x16e>
 80005c4:	2306      	movs	r3, #6
 80005c6:	e00a      	b.n	80005de <GPIO_Init+0x16e>
 80005c8:	2305      	movs	r3, #5
 80005ca:	e008      	b.n	80005de <GPIO_Init+0x16e>
 80005cc:	2304      	movs	r3, #4
 80005ce:	e006      	b.n	80005de <GPIO_Init+0x16e>
 80005d0:	2303      	movs	r3, #3
 80005d2:	e004      	b.n	80005de <GPIO_Init+0x16e>
 80005d4:	2302      	movs	r3, #2
 80005d6:	e002      	b.n	80005de <GPIO_Init+0x16e>
 80005d8:	2301      	movs	r3, #1
 80005da:	e000      	b.n	80005de <GPIO_Init+0x16e>
 80005dc:	2300      	movs	r3, #0
 80005de:	727b      	strb	r3, [r7, #9]
		SYSCFG_PCLK_EN();
 80005e0:	4b59      	ldr	r3, [pc, #356]	; (8000748 <GPIO_Init+0x2d8>)
 80005e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e4:	4a58      	ldr	r2, [pc, #352]	; (8000748 <GPIO_Init+0x2d8>)
 80005e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ea:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = ( portcode << (temp2 * 4));
 80005ec:	7a7a      	ldrb	r2, [r7, #9]
 80005ee:	7abb      	ldrb	r3, [r7, #10]
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	fa02 f103 	lsl.w	r1, r2, r3
 80005f6:	4a55      	ldr	r2, [pc, #340]	; (800074c <GPIO_Init+0x2dc>)
 80005f8:	7afb      	ldrb	r3, [r7, #11]
 80005fa:	3302      	adds	r3, #2
 80005fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000600:	4b49      	ldr	r3, [pc, #292]	; (8000728 <GPIO_Init+0x2b8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	7912      	ldrb	r2, [r2, #4]
 8000608:	4611      	mov	r1, r2
 800060a:	2201      	movs	r2, #1
 800060c:	408a      	lsls	r2, r1
 800060e:	4611      	mov	r1, r2
 8000610:	4a45      	ldr	r2, [pc, #276]	; (8000728 <GPIO_Init+0x2b8>)
 8000612:	430b      	orrs	r3, r1
 8000614:	6013      	str	r3, [r2, #0]

	}
	temp = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]

	//Configure speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	799b      	ldrb	r3, [r3, #6]
 800061e:	461a      	mov	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	791b      	ldrb	r3, [r3, #4]
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	fa02 f303 	lsl.w	r3, r2, r3
 800062a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOX->OSPEEDER &= ~(3ul << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	6899      	ldr	r1, [r3, #8]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	791b      	ldrb	r3, [r3, #4]
 8000636:	461a      	mov	r2, r3
 8000638:	2303      	movs	r3, #3
 800063a:	4093      	lsls	r3, r2
 800063c:	43da      	mvns	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	400a      	ands	r2, r1
 8000644:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOX->OSPEEDER |= temp; //setting
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	6899      	ldr	r1, [r3, #8]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	68fa      	ldr	r2, [r7, #12]
 8000652:	430a      	orrs	r2, r1
 8000654:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]

	//configure PuPd
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	79db      	ldrb	r3, [r3, #7]
 800065e:	461a      	mov	r2, r3
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	791b      	ldrb	r3, [r3, #4]
 8000664:	005b      	lsls	r3, r3, #1
 8000666:	fa02 f303 	lsl.w	r3, r2, r3
 800066a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOX->PUPDR &= ~(3ul << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	68d9      	ldr	r1, [r3, #12]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	791b      	ldrb	r3, [r3, #4]
 8000676:	461a      	mov	r2, r3
 8000678:	2303      	movs	r3, #3
 800067a:	4093      	lsls	r3, r2
 800067c:	43da      	mvns	r2, r3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	400a      	ands	r2, r1
 8000684:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOX->PUPDR |= temp;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	68d9      	ldr	r1, [r3, #12]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	430a      	orrs	r2, r1
 8000694:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]

	// configure output type
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType) << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	7a1b      	ldrb	r3, [r3, #8]
 800069e:	461a      	mov	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	fa02 f303 	lsl.w	r3, r2, r3
 80006a8:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOX->OTYPER  &= ~(1ul << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	6859      	ldr	r1, [r3, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	461a      	mov	r2, r3
 80006b6:	2301      	movs	r3, #1
 80006b8:	4093      	lsls	r3, r2
 80006ba:	43da      	mvns	r2, r3
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	400a      	ands	r2, r1
 80006c2:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOX->OTYPER |= temp;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	6859      	ldr	r1, [r3, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	430a      	orrs	r2, r1
 80006d2:	605a      	str	r2, [r3, #4]
	temp = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]

	//alternate function
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN){
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	795b      	ldrb	r3, [r3, #5]
 80006dc:	2b02      	cmp	r3, #2
 80006de:	d158      	bne.n	8000792 <GPIO_Init+0x322>
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber < GPIO_PIN_8){
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	791b      	ldrb	r3, [r3, #4]
 80006e4:	2b07      	cmp	r3, #7
 80006e6:	d833      	bhi.n	8000750 <GPIO_Init+0x2e0>
			temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 4 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	799b      	ldrb	r3, [r3, #6]
 80006ec:	461a      	mov	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	791b      	ldrb	r3, [r3, #4]
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	fa02 f303 	lsl.w	r3, r2, r3
 80006f8:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOX->AFRL &= ~(15ul << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	6a19      	ldr	r1, [r3, #32]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	791b      	ldrb	r3, [r3, #4]
 8000704:	461a      	mov	r2, r3
 8000706:	230f      	movs	r3, #15
 8000708:	4093      	lsls	r3, r2
 800070a:	43da      	mvns	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	400a      	ands	r2, r1
 8000712:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOX->AFRL |= temp;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	6a19      	ldr	r1, [r3, #32]
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	430a      	orrs	r2, r1
 8000722:	621a      	str	r2, [r3, #32]
 8000724:	e033      	b.n	800078e <GPIO_Init+0x31e>
 8000726:	bf00      	nop
 8000728:	40013c00 	.word	0x40013c00
 800072c:	40020000 	.word	0x40020000
 8000730:	40020400 	.word	0x40020400
 8000734:	40020800 	.word	0x40020800
 8000738:	40020c00 	.word	0x40020c00
 800073c:	40021000 	.word	0x40021000
 8000740:	40021400 	.word	0x40021400
 8000744:	40021800 	.word	0x40021800
 8000748:	40023800 	.word	0x40023800
 800074c:	40013800 	.word	0x40013800
		}
		else{
			temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber - 8)));
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	799b      	ldrb	r3, [r3, #6]
 8000754:	461a      	mov	r2, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	791b      	ldrb	r3, [r3, #4]
 800075a:	3b08      	subs	r3, #8
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOX->AFRH &= ~(15ul << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	791b      	ldrb	r3, [r3, #4]
 800076e:	461a      	mov	r2, r3
 8000770:	230f      	movs	r3, #15
 8000772:	4093      	lsls	r3, r2
 8000774:	43da      	mvns	r2, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	400a      	ands	r2, r1
 800077c:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOX->AFRH |= temp;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	430a      	orrs	r2, r1
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
		}
		temp = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
	}

}
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop

080007a0 <GPIO_ToggleOutputPin>:
 * @Param1:					GPIOx base address
 * @Param2:					Pin number
 * @Return:					None
 * @Note:					-
 */
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber){
 80007a0:	b480      	push	{r7}
 80007a2:	b083      	sub	sp, #12
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR ^= (1 << PinNumber);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	695b      	ldr	r3, [r3, #20]
 80007b0:	78fa      	ldrb	r2, [r7, #3]
 80007b2:	2101      	movs	r1, #1
 80007b4:	fa01 f202 	lsl.w	r2, r1, r2
 80007b8:	405a      	eors	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	615a      	str	r2, [r3, #20]
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
	...

080007cc <GPIO_IRQInterruptConfig>:
 * @Param2:					IRQ priority
 * @Param3:					Enable or Disable
 * @Return:					None
 * @Note:					-
 */
void GPIO_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnableDisable){
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	460a      	mov	r2, r1
 80007d6:	71fb      	strb	r3, [r7, #7]
 80007d8:	4613      	mov	r3, r2
 80007da:	71bb      	strb	r3, [r7, #6]

	if (EnableDisable == ENABLE)
 80007dc:	79bb      	ldrb	r3, [r7, #6]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d133      	bne.n	800084a <GPIO_IRQInterruptConfig+0x7e>
	{
		if (IRQNumber < 32){
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	2b1f      	cmp	r3, #31
 80007e6:	d80a      	bhi.n	80007fe <GPIO_IRQInterruptConfig+0x32>
			//NVIC_ISER0
			*NVIC_ISER0 |= (1 << IRQNumber);
 80007e8:	4b36      	ldr	r3, [pc, #216]	; (80008c4 <GPIO_IRQInterruptConfig+0xf8>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	79fa      	ldrb	r2, [r7, #7]
 80007ee:	2101      	movs	r1, #1
 80007f0:	fa01 f202 	lsl.w	r2, r1, r2
 80007f4:	4611      	mov	r1, r2
 80007f6:	4a33      	ldr	r2, [pc, #204]	; (80008c4 <GPIO_IRQInterruptConfig+0xf8>)
 80007f8:	430b      	orrs	r3, r1
 80007fa:	6013      	str	r3, [r2, #0]
		else if (IRQNumber >= 64 && IRQNumber < 96){
			//NVIC_ICER2
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 80007fc:	e05c      	b.n	80008b8 <GPIO_IRQInterruptConfig+0xec>
		else if( IRQNumber >= 32 && IRQNumber < 64){
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	2b1f      	cmp	r3, #31
 8000802:	d90f      	bls.n	8000824 <GPIO_IRQInterruptConfig+0x58>
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b3f      	cmp	r3, #63	; 0x3f
 8000808:	d80c      	bhi.n	8000824 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800080a:	4b2f      	ldr	r3, [pc, #188]	; (80008c8 <GPIO_IRQInterruptConfig+0xfc>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	79fa      	ldrb	r2, [r7, #7]
 8000810:	f002 021f 	and.w	r2, r2, #31
 8000814:	2101      	movs	r1, #1
 8000816:	fa01 f202 	lsl.w	r2, r1, r2
 800081a:	4611      	mov	r1, r2
 800081c:	4a2a      	ldr	r2, [pc, #168]	; (80008c8 <GPIO_IRQInterruptConfig+0xfc>)
 800081e:	430b      	orrs	r3, r1
 8000820:	6013      	str	r3, [r2, #0]
 8000822:	e049      	b.n	80008b8 <GPIO_IRQInterruptConfig+0xec>
		else if (IRQNumber >= 64 && IRQNumber < 96){
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	2b3f      	cmp	r3, #63	; 0x3f
 8000828:	d946      	bls.n	80008b8 <GPIO_IRQInterruptConfig+0xec>
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	2b5f      	cmp	r3, #95	; 0x5f
 800082e:	d843      	bhi.n	80008b8 <GPIO_IRQInterruptConfig+0xec>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 8000830:	4b26      	ldr	r3, [pc, #152]	; (80008cc <GPIO_IRQInterruptConfig+0x100>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	79fa      	ldrb	r2, [r7, #7]
 8000836:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800083a:	2101      	movs	r1, #1
 800083c:	fa01 f202 	lsl.w	r2, r1, r2
 8000840:	4611      	mov	r1, r2
 8000842:	4a22      	ldr	r2, [pc, #136]	; (80008cc <GPIO_IRQInterruptConfig+0x100>)
 8000844:	430b      	orrs	r3, r1
 8000846:	6013      	str	r3, [r2, #0]
}
 8000848:	e036      	b.n	80008b8 <GPIO_IRQInterruptConfig+0xec>
	else if (EnableDisable == DISABLE){
 800084a:	79bb      	ldrb	r3, [r7, #6]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d133      	bne.n	80008b8 <GPIO_IRQInterruptConfig+0xec>
		if (IRQNumber < 32){
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	2b1f      	cmp	r3, #31
 8000854:	d80a      	bhi.n	800086c <GPIO_IRQInterruptConfig+0xa0>
			*NVIC_ICER0 |= (1 << IRQNumber);
 8000856:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <GPIO_IRQInterruptConfig+0x104>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	79fa      	ldrb	r2, [r7, #7]
 800085c:	2101      	movs	r1, #1
 800085e:	fa01 f202 	lsl.w	r2, r1, r2
 8000862:	4611      	mov	r1, r2
 8000864:	4a1a      	ldr	r2, [pc, #104]	; (80008d0 <GPIO_IRQInterruptConfig+0x104>)
 8000866:	430b      	orrs	r3, r1
 8000868:	6013      	str	r3, [r2, #0]
}
 800086a:	e025      	b.n	80008b8 <GPIO_IRQInterruptConfig+0xec>
		else if( IRQNumber >= 32 && IRQNumber < 64){
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	2b1f      	cmp	r3, #31
 8000870:	d90f      	bls.n	8000892 <GPIO_IRQInterruptConfig+0xc6>
 8000872:	79fb      	ldrb	r3, [r7, #7]
 8000874:	2b3f      	cmp	r3, #63	; 0x3f
 8000876:	d80c      	bhi.n	8000892 <GPIO_IRQInterruptConfig+0xc6>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <GPIO_IRQInterruptConfig+0x108>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	79fa      	ldrb	r2, [r7, #7]
 800087e:	f002 021f 	and.w	r2, r2, #31
 8000882:	2101      	movs	r1, #1
 8000884:	fa01 f202 	lsl.w	r2, r1, r2
 8000888:	4611      	mov	r1, r2
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <GPIO_IRQInterruptConfig+0x108>)
 800088c:	430b      	orrs	r3, r1
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	e012      	b.n	80008b8 <GPIO_IRQInterruptConfig+0xec>
		else if (IRQNumber >= 64 && IRQNumber < 96){
 8000892:	79fb      	ldrb	r3, [r7, #7]
 8000894:	2b3f      	cmp	r3, #63	; 0x3f
 8000896:	d90f      	bls.n	80008b8 <GPIO_IRQInterruptConfig+0xec>
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2b5f      	cmp	r3, #95	; 0x5f
 800089c:	d80c      	bhi.n	80008b8 <GPIO_IRQInterruptConfig+0xec>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <GPIO_IRQInterruptConfig+0x10c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	79fa      	ldrb	r2, [r7, #7]
 80008a4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008a8:	2101      	movs	r1, #1
 80008aa:	fa01 f202 	lsl.w	r2, r1, r2
 80008ae:	4611      	mov	r1, r2
 80008b0:	4a09      	ldr	r2, [pc, #36]	; (80008d8 <GPIO_IRQInterruptConfig+0x10c>)
 80008b2:	430b      	orrs	r3, r1
 80008b4:	6013      	str	r3, [r2, #0]
}
 80008b6:	e7ff      	b.n	80008b8 <GPIO_IRQInterruptConfig+0xec>
 80008b8:	bf00      	nop
 80008ba:	370c      	adds	r7, #12
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	e000e100 	.word	0xe000e100
 80008c8:	e000e104 	.word	0xe000e104
 80008cc:	e000e108 	.word	0xe000e108
 80008d0:	e000e180 	.word	0xe000e180
 80008d4:	e000e184 	.word	0xe000e184
 80008d8:	e000e188 	.word	0xe000e188

080008dc <GPIO_IRQPriorityConfig>:
	 *	each register is divided by 8 bits each IRQnumbers
	 *	To find which IPR register, divide by 4 (3 IRQ in each register)
 ************************************************************************/


void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint8_t IRQPriority){
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	460a      	mov	r2, r1
 80008e6:	71fb      	strb	r3, [r7, #7]
 80008e8:	4613      	mov	r3, r2
 80008ea:	71bb      	strb	r3, [r7, #6]
		//Here we find the IPR register that needs to be configured
		uint8_t iprx = IRQNumber / 4;
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	089b      	lsrs	r3, r3, #2
 80008f0:	73fb      	strb	r3, [r7, #15]
		//because each register is divided in 4 different IRQ, we use the MOD 4
		uint8_t iprx_section = IRQNumber % 4;
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	f003 0303 	and.w	r3, r3, #3
 80008f8:	73bb      	strb	r3, [r7, #14]
		/*Each register is 32 bits so we multiply the register number by 4
		 * Notice the 4 lower bits are inaccessible, so we need to shift by 4
		 * to configure the 4 higher bits
		 */
		uint8_t shift_IRQ = (8 * iprx_section) + (8 - NO_PR_BITS_IMPLEMENTED);
 80008fa:	7bbb      	ldrb	r3, [r7, #14]
 80008fc:	00db      	lsls	r3, r3, #3
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	3304      	adds	r3, #4
 8000902:	737b      	strb	r3, [r7, #13]
		*(NVIC_PR_BASEADDRESS + (iprx * 4)) = (IRQPriority << shift_IRQ);
 8000904:	79ba      	ldrb	r2, [r7, #6]
 8000906:	7b7b      	ldrb	r3, [r7, #13]
 8000908:	409a      	lsls	r2, r3
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	011b      	lsls	r3, r3, #4
 800090e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000912:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000916:	601a      	str	r2, [r3, #0]
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <GPIO_Clear_Interrupt>:
 * @Return:					None
 * @Note:					-
 ************************************************************************/


void GPIO_Clear_Interrupt(uint8_t PinNumber){
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
/*
 * Remember to use the correct implementation of the EXTI_IRQHandler
 * those functions are weak defined in Startup file
 */
	if( (EXTI->PR & (1 << PinNumber)) != 0){
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <GPIO_Clear_Interrupt+0x3c>)
 8000930:	695b      	ldr	r3, [r3, #20]
 8000932:	79fa      	ldrb	r2, [r7, #7]
 8000934:	2101      	movs	r1, #1
 8000936:	fa01 f202 	lsl.w	r2, r1, r2
 800093a:	4013      	ands	r3, r2
 800093c:	2b00      	cmp	r3, #0
 800093e:	d009      	beq.n	8000954 <GPIO_Clear_Interrupt+0x30>
		EXTI->PR |= (1 << PinNumber); // PR register is cleared with setting 1.
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <GPIO_Clear_Interrupt+0x3c>)
 8000942:	695b      	ldr	r3, [r3, #20]
 8000944:	79fa      	ldrb	r2, [r7, #7]
 8000946:	2101      	movs	r1, #1
 8000948:	fa01 f202 	lsl.w	r2, r1, r2
 800094c:	4611      	mov	r1, r2
 800094e:	4a04      	ldr	r2, [pc, #16]	; (8000960 <GPIO_Clear_Interrupt+0x3c>)
 8000950:	430b      	orrs	r3, r1
 8000952:	6153      	str	r3, [r2, #20]
	}
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	40013c00 	.word	0x40013c00

08000964 <main>:


/*
 * START PROGRAM
 */
int main(){
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

	SysTickInit();
 8000968:	f7ff fc4c 	bl	8000204 <SysTickInit>
	GPIO_Conf();
 800096c:	f000 f81c 	bl	80009a8 <GPIO_Conf>


	while(1)
	{
		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_5);
 8000970:	2105      	movs	r1, #5
 8000972:	4804      	ldr	r0, [pc, #16]	; (8000984 <main+0x20>)
 8000974:	f7ff ff14 	bl	80007a0 <GPIO_ToggleOutputPin>
		delay_ms(1000);
 8000978:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800097c:	f7ff fc94 	bl	80002a8 <delay_ms>
		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_5);
 8000980:	e7f6      	b.n	8000970 <main+0xc>
 8000982:	bf00      	nop
 8000984:	40020000 	.word	0x40020000

08000988 <EXTI15_10_IRQHandler>:


/*
 * EXTI Handler
 */
void EXTI15_10_IRQHandler(void){
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	GPIO_Clear_Interrupt(GPIO_PIN_13);
 800098c:	200d      	movs	r0, #13
 800098e:	f7ff ffc9 	bl	8000924 <GPIO_Clear_Interrupt>

	GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_5);
 8000992:	2105      	movs	r1, #5
 8000994:	4803      	ldr	r0, [pc, #12]	; (80009a4 <EXTI15_10_IRQHandler+0x1c>)
 8000996:	f7ff ff03 	bl	80007a0 <GPIO_ToggleOutputPin>
	delay_ms(100);
 800099a:	2064      	movs	r0, #100	; 0x64
 800099c:	f7ff fc84 	bl	80002a8 <delay_ms>

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40020000 	.word	0x40020000

080009a8 <GPIO_Conf>:

void GPIO_Conf(void){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0

	/*
	 * Configure LED
	 */

	_GPIOA.pGPIOX = GPIOA;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <GPIO_Conf+0x70>)
 80009b0:	60fb      	str	r3, [r7, #12]
	_GPIOA.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 80009b2:	2305      	movs	r3, #5
 80009b4:	743b      	strb	r3, [r7, #16]
	_GPIOA.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80009b6:	2301      	movs	r3, #1
 80009b8:	747b      	strb	r3, [r7, #17]
	_GPIOA.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 80009ba:	2300      	movs	r3, #0
 80009bc:	74bb      	strb	r3, [r7, #18]
	_GPIOA.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80009be:	2300      	movs	r3, #0
 80009c0:	753b      	strb	r3, [r7, #20]
	_GPIOA.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80009c2:	2300      	movs	r3, #0
 80009c4:	74fb      	strb	r3, [r7, #19]
	GPIO_PeriClockControl(GPIOA, ENABLE);
 80009c6:	2101      	movs	r1, #1
 80009c8:	4813      	ldr	r0, [pc, #76]	; (8000a18 <GPIO_Conf+0x70>)
 80009ca:	f7ff fc9b 	bl	8000304 <GPIO_PeriClockControl>
	GPIO_Init(&_GPIOA);
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fd4c 	bl	8000470 <GPIO_Init>

	/*
	 * Configure Button
	 */
	_GPIOC.pGPIOX = GPIOC;
 80009d8:	4b10      	ldr	r3, [pc, #64]	; (8000a1c <GPIO_Conf+0x74>)
 80009da:	603b      	str	r3, [r7, #0]
	_GPIOC.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;
 80009dc:	230d      	movs	r3, #13
 80009de:	713b      	strb	r3, [r7, #4]
	_GPIOC.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 80009e0:	2305      	movs	r3, #5
 80009e2:	717b      	strb	r3, [r7, #5]
	_GPIOC.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 80009e4:	2300      	movs	r3, #0
 80009e6:	71bb      	strb	r3, [r7, #6]
	_GPIOC.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80009e8:	2300      	movs	r3, #0
 80009ea:	723b      	strb	r3, [r7, #8]
	_GPIOC.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80009ec:	2300      	movs	r3, #0
 80009ee:	71fb      	strb	r3, [r7, #7]
	GPIO_PeriClockControl(GPIOC, ENABLE);
 80009f0:	2101      	movs	r1, #1
 80009f2:	480a      	ldr	r0, [pc, #40]	; (8000a1c <GPIO_Conf+0x74>)
 80009f4:	f7ff fc86 	bl	8000304 <GPIO_PeriClockControl>
	GPIO_Init(&_GPIOC);
 80009f8:	463b      	mov	r3, r7
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fd38 	bl	8000470 <GPIO_Init>

	//Button interrupt
	GPIO_IRQInterruptConfig(EXTI15_10_IRQn,ENABLE);
 8000a00:	2101      	movs	r1, #1
 8000a02:	2028      	movs	r0, #40	; 0x28
 8000a04:	f7ff fee2 	bl	80007cc <GPIO_IRQInterruptConfig>
	GPIO_IRQPriorityConfig(EXTI15_10_IRQn,1);
 8000a08:	2101      	movs	r1, #1
 8000a0a:	2028      	movs	r0, #40	; 0x28
 8000a0c:	f7ff ff66 	bl	80008dc <GPIO_IRQPriorityConfig>




}
 8000a10:	bf00      	nop
 8000a12:	3718      	adds	r7, #24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40020000 	.word	0x40020000
 8000a1c:	40020800 	.word	0x40020800

08000a20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a20:	480d      	ldr	r0, [pc, #52]	; (8000a58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a22:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a26:	490e      	ldr	r1, [pc, #56]	; (8000a60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a28:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <LoopForever+0xe>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a3c:	4c0b      	ldr	r4, [pc, #44]	; (8000a6c <LoopForever+0x16>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a4a:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000a4e:	f000 f811 	bl	8000a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a52:	f7ff ff87 	bl	8000964 <main>

08000a56 <LoopForever>:

LoopForever:
    b LoopForever
 8000a56:	e7fe      	b.n	8000a56 <LoopForever>
  ldr   r0, =_estack
 8000a58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a64:	08000adc 	.word	0x08000adc
  ldr r2, =_sbss
 8000a68:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a6c:	20000020 	.word	0x20000020

08000a70 <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC_IRQHandler>
	...

08000a74 <__libc_init_array>:
 8000a74:	b570      	push	{r4, r5, r6, lr}
 8000a76:	4e0d      	ldr	r6, [pc, #52]	; (8000aac <__libc_init_array+0x38>)
 8000a78:	4c0d      	ldr	r4, [pc, #52]	; (8000ab0 <__libc_init_array+0x3c>)
 8000a7a:	1ba4      	subs	r4, r4, r6
 8000a7c:	10a4      	asrs	r4, r4, #2
 8000a7e:	2500      	movs	r5, #0
 8000a80:	42a5      	cmp	r5, r4
 8000a82:	d109      	bne.n	8000a98 <__libc_init_array+0x24>
 8000a84:	4e0b      	ldr	r6, [pc, #44]	; (8000ab4 <__libc_init_array+0x40>)
 8000a86:	4c0c      	ldr	r4, [pc, #48]	; (8000ab8 <__libc_init_array+0x44>)
 8000a88:	f000 f818 	bl	8000abc <_init>
 8000a8c:	1ba4      	subs	r4, r4, r6
 8000a8e:	10a4      	asrs	r4, r4, #2
 8000a90:	2500      	movs	r5, #0
 8000a92:	42a5      	cmp	r5, r4
 8000a94:	d105      	bne.n	8000aa2 <__libc_init_array+0x2e>
 8000a96:	bd70      	pop	{r4, r5, r6, pc}
 8000a98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000a9c:	4798      	blx	r3
 8000a9e:	3501      	adds	r5, #1
 8000aa0:	e7ee      	b.n	8000a80 <__libc_init_array+0xc>
 8000aa2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000aa6:	4798      	blx	r3
 8000aa8:	3501      	adds	r5, #1
 8000aaa:	e7f2      	b.n	8000a92 <__libc_init_array+0x1e>
 8000aac:	08000ad4 	.word	0x08000ad4
 8000ab0:	08000ad4 	.word	0x08000ad4
 8000ab4:	08000ad4 	.word	0x08000ad4
 8000ab8:	08000ad8 	.word	0x08000ad8

08000abc <_init>:
 8000abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000abe:	bf00      	nop
 8000ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ac2:	bc08      	pop	{r3}
 8000ac4:	469e      	mov	lr, r3
 8000ac6:	4770      	bx	lr

08000ac8 <_fini>:
 8000ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aca:	bf00      	nop
 8000acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ace:	bc08      	pop	{r3}
 8000ad0:	469e      	mov	lr, r3
 8000ad2:	4770      	bx	lr
